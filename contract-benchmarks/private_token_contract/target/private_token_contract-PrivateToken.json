{"noir_version":"1.0.0-beta.13+6e469c3004209a8b107e7707306e25c80a110fd6","name":"PrivateToken","functions":[{"name":"constructor","hash":"12730807318143522581","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"anchor_block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::abis::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::abis::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"sponge_blob_hash","type":{"kind":"field"}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"initial_supply","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"note_hash_read_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_read_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"key_validation_requests_and_generators","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hashes","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifiers","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"private_call_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_call_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"private_logs","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_class_logs_hashes","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"anchor_block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::abis::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::abis::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"sponge_blob_hash","type":{"kind":"field"}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"344423948968719440":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"361444214588792908":{"error_kind":"string","string":"attempt to multiply with overflow"},"992401946138144806":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"1998584279744703196":{"error_kind":"string","string":"attempt to subtract with overflow"},"3080037330898348111":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"4261968856572588300":{"error_kind":"string","string":"Value does not fit in field"},"4440399188109668273":{"error_kind":"string","string":"Input length must be a multiple of 32"},"6565645037161677025":{"error_kind":"fmtstring","length":101,"item_types":[]},"7564993426627941149":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"7995966536718645961":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"8992688621799713766":{"error_kind":"string","string":"Invalid public keys hint for address"},"9791669845391776238":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"9885968605480832328":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"9921926525851912681":{"error_kind":"fmtstring","length":98,"item_types":[]},"9967937311635654895":{"error_kind":"string","string":"Initialization hash does not match"},"10791800398362570014":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"11021520179822076911":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"12469291177396340830":{"error_kind":"string","string":"call to assert_max_bit_size"},"12913276134398371456":{"error_kind":"string","string":"push out of bounds"},"13450089406971132036":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"13455385521185560676":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"14067204867181196045":{"error_kind":"fmtstring","length":75,"item_types":[]},"14415304921900233953":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"14990209321349310352":{"error_kind":"string","string":"attempt to add with overflow"},"15764276373176857197":{"error_kind":"string","string":"Stack too deep"},"15835548349546956319":{"error_kind":"string","string":"Field failed to decompose into specified 32 limbs"},"16431471497789672479":{"error_kind":"string","string":"Index out of bounds"},"16792019527863081935":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17154023812102399658":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17803644318014042523":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]}}},"bytecode":"H4sIAAAAAAAA/+ydBZgbx9KunXgp9pLjMNpJ7HDSLY2kmTjMzMwajRRmJoeZmTkOMzMzMzMzM96uk9njkdwyzVdzq+89/T/977jPpre+7qrqemdmtZP0+7eNGtyv38VT/Xs9ien946+Tmj6kYazva/K61fJ97ZaxySxjAy1jXZaxQZYxY3a/RRvGSMZ+DWNTW8ZmsMw3o2VsJsvYzJaxIZafMdQyNotlbFbL2GyWnzEs1tvSbzzaJPHXReOveVX0vGopV9V5XVa5IPQLyiuERV/7uuAXopyfz1d9zy8FYVBSgfbyVV0rBPma+rcN6j96LpWq5Sqcdk4+8XbmGwfItskTC/4fRzTz/53YkL7r4YnryePv6fvvBpt/T2H6lKZP1X/MDZy0YQ1UuqYHA9dzasy+64L2VV1QJublWofZgOswTX+cXcl1oHmHxL7Sl1gb2yTgdZkEN5fqTdg5bf9/v04Xf50+/jpD/HXG+OtM8deZ469D4q9D46+zxF9njb/OFn8dFn8dHn+dPf46R+PpRBM3nlKzWMaGWcbm6D/mJqCT1JwwZ9Ihp51zTbydXuOALZnOmUim0yauZ0hcz9WQTOc2/57H9HlNn8+STPs3rIFK1/R0wMCfuz9ub+bH2WXdm/kTezBP4nrexPV8DXujzL+16TnT8/1HJ7Wx7fv0iWvVv/kh6pl/F0wvml6y7Dva933Y+uY9TjuDibczUuPhB35iT2ZMXM+UuA4a9moB8+8Rpi9o+kIZxOjMwBhdABijCwNjlHP9hgDXbwRw/RZxZP2GAtdvQeD6Lcp8RiycyAGLJK4XTVwv1JAbFjP/Xtz0JUxfMoPcMAtwbxYD7s1Sjvj2rMD1Wxy4fks7sn6zAddvCeD6LcOcG5ZK5IClE9fLJK6XbMgNy5p/L2f68qavkEFuGAbcm2WBe7OiI749HLh+ywHXbyVH1m924PotD1y/lZlzw4qJHLBS4nrlxPUKDblhFfPvVU1fzfTVM8gNcwD3ZhXg3qzBvDdrJPZg1cT1aonr1Rv2Zk3z77VMX9v0dTJg83Vxa1CzrcG6Ca1rJq69sdyfWM/8e33TNzB9w3gNqE/aL5ubuusB/WLShJ0bxYG1cd8N0r6v9D/s1zC2cTyWbOjAXA8YTBuN/1yVccylNwZuQEu8bpP2a97G92eNy+5+jE65EThZ9bVNGp2RBiYZh+MhnWUctupx/O9qE6ATb9of5gx1j+g2HY9gTmv7xsB1QK5peQLWdFw/K7mm5UTS7EisZ3JNVbqm/x77fLlKTecL1VJBFcteISrmc1GupCKvUNPG4FzgmaWpVTw/8nP5Wq6Uq/yNte8/PtaX2PoOkr5TdeP4OjRfK6ZHyQVi8D/knc8Q6H9V8GHS3S+bKqTKlPBr/RkNrvXHz7sZ0Bm4dG+WCC7QvGPF5bTrgLzNXgHuz+aOBuvmTMG6RX9Gg7dgCNYthQcr6d4y42BV6VrdaajSNWgy3Yrp3iD6HsfW4OCcLLZxq0S1VUlcb91/9LtQQxLjQy3fs435uq3p28X/7ps7bDJ3lJh7XN+zvfm6g+k79revq0rX/uNLW/bH79dOYL9C28ele2dgnPdLtEnBdkbAHLILWDP6xVeKT+S+UEzuxOA7uzLlYrTvzAL0nd2E+86QmLpR81Gs7MrgO7uDfQe9juQzyBqI/GZ3hnVEvgzeL9HQdu6BW8vI9sxnj0QtQr7Qdz14LM989jT/3sv0vU3fpz//L3bMAMxDezoKrcD3seugdWR/RoNHMkDrvsKhlXTv69gdJi5HTWvXfo4G635Mwbp/f0aD92cI1gOEByvpPoApWNGVwL6xrejTdd/+Mve7702SLAKWqxpsanDaxTmQ6fYD2s6DJt7OXOOArXw9sL/9d5G3Towf1FC+Hmz+fYjph5p+WP/RryxldToczHQ6HN6f0eDDLVkSEeGtloWmdkTi51lFpf3hR078LhQaB8blmc1+Y/7IBs88yvz7aNOPMf3Y/vwvex4BzCJHAVP/cf2zqZtVuoaMZH00cP2OB2eYRt8+LuHbxyeuj0lcH9vg2yeYf59o+kmmn5zIum396pNAv8TPEbpX1iMeud7jyn0qXdPD+uHXAm3jcAdsPILJp9B2nuCIndMwxyicnaYBJu1TgIdJ8t1LmndIv3+TbU+/MZMLx0a6kWxzfHPr0aX5f94siK9PNetymumnm36G6WeafpbpZ5t+junnmn6e6eebfoHpF5p+kemjTL/Y9EtMv9T0y0y/3PQrTL/S9KtMv9r0a0y/1vTrTL/e9BtMv9H0m0y/uc8h+r6SMR0NY6dZxk63jJ1hGTvTMnaWZexsy9g5lrFzLWPnWcbOt4xdYBm70DJ2kWVslGXsYsvYJZaxSy1jl1nGLreMXWEZu9IydpVl7GrL2DWWsWstY9dZxq63jN1gGbvRMnaTZezmeCzZhsZfF42/qnStLumkTcanAuaq1qgpfRpoLtJ4OmSuf9frjPRz5fp+m+bMtHN5o38z56x0c6nkb/mcnWauXP1vDJ0z8XOpxt8+Onci5yrWxvxNpvMmbi7f9ltR50/MXL79N6wumPC5Ss1+W+vCCZ2r1Pw3vy6asLlyY/stslETMldp7L+RdvH4zzXO38q7ZHznKo0zF+pLx28uNR55VV82PnOp8crR+vJxz1UYz3yvrxjXXN54nx36yrHO5dUm4BzSV41trtIEnWn66uZz+RN4PuprmswV1Cb4rNXX2udSE3Fu6+tsc6mJqgH09WPOpSeyntA3NM4VTXRtom+snyufos7RNyXmytVS1Uz65v5uPq2/GVbrRTpp7y39GQ2myVHve/YZfwtuA/WtwGKcaw3JRtRjpb41vBUcBPRBs5P2yzYIVKoWsd5VSa7FbXGA3d54Z+O2eGOTY7dbCLQ/4yKmpcbbgAF0O3hz0c5HQXMbMBj7dN/m6Il0E8yPgihp7x39GQ2+A34iBdEdwBPpTuEnEq3hnfATKYjudPREuglmd1CxmMtyIt0VB9jdjSfSXZYT6e4MTqSbgCfSXcAAuptpc1EJqM9OpOZ7gMmsXz/8aXlrnIDQD0mRKHAvMJnZ1lCla5r2+F6GSuZeRyuZG2H5J8wn7b2vP6PB98ErmTB/HzD47xdeydAa3g+vZML8/czBj0ig9wpPoA+A17CvoQ9epI8/CIy9LCvgG2F2hzmLuSwV8ENxYn64sQJ+yFIBP5xBBYw7gZR+COiUDzNtLjoQkZofYa6AVbqmKTk+yFC9PSq8aqV9edQB3Vw+/ijQxx8T7uPNihRE8YOa63HwgZ0V7dwAO2v8WtLeJ/ozGvwEnHb82hPADXxSOO3QGj4Jpx2/9qRw2qFE93h/2cn4KXAy7mtozUgff9pR2rkBZrdftZjLQjvPxIn52UbaecZCO89mQDu4E0jpZ4BO+SzT5qIDEan5OeGVICXHpxmq/ueF0w7ty/MO6Oby8eeBPv6CcB9vVqSodE0ji5QXHX22cz3srMnVfY7FS/0ZDX4JTjs59RIwCF4WTju0hi/DaSenXhZOO5ToXuwvOxm/4gjtIH38VUdp53qY3bpmMZeFdl6LE/PrjbTzmoV2Xs+AdnAnkNKvAZ3ydabNRQciUvMbwitBSo6vMlT9bwqnHdqXNx3QzeXjbwJ9/C3hPt6sSFHpmkYWKW87SjvXwc6aqI523unPaPA7cNqJ1DvAIHhXOO3QGr4Lp51IvSucdijRvd1fdjJ+zxHaQfr4+47SznUwuyuZ0c4HcWL+sJF2PrDQzocZ0A7uBFL6A6BTfsi0uehARGr+SHglSMnxfYaq/2PhtEP78rEDurl8/GOgj38i3MebFSkqXdPIIuVTR2nnWthZU6z7TIzP+jMa/Bmcdor6M2AQfC6cdmgNP4fTTrFOt0rZbLoRie7T/rKT8ReO0A7Sx790lHauhdldzOyzVL6KE/PXjbTzlYV2vs6AdnAnkNJfAZ3ya6bNRQciUvM3witBSo5fMlT93wqnHdqXbx3QzeXj3wJ9/DvhPt6sSFHpmkYWKd87SjvX4J7t+El7f+jPaPAP+Gc7/g/AIPhROO3QGv6If7bj/yicdijRfd9fdjL+yRHaQfr4z47SzjUwu6OSxVwW2vklTsy/NtLOLxba+TUD2sGdQEr/AnTKX5k2Fx2ISM2/Ca8EKTn+zFD1/y6cdmhffndAN5eP/w708T+E+3izIkWlaxpZpPzpKO1cDTtrvCBp71/9GQ3+C047XvAXMAj+Fk47tIZ/w2nHC/4WTjuU6P7sLzsZ/+MI7UB9vMVN2rkatleebzGXhXYmif8G76Qt/erJhv6HRtqhb+KmHdwJpPQkLTinnLSFZ3PRgYjU3L8Fm3zQAUfJsV8L/mBoaeE9uFS6pmlfWhzQzeXjLUAfbxXu482KFJWuaWSR0gb0myxp5yrYWRPWvcnW3sJoME2OpZ1QtwODoAMYnFxr2NGCpp2wTrdK2Wy6EYmurUV2Mp4MnIz7Gloz0scHOEo7V8FoJ8zsTbaBcWLubKSdgRba6cyAdq4C0s5AoFN2tvBsLjoQkZq7hFeClBwHMFT93cJph/al2wHdXD7eDfTxHuE+3qxIUemaRhYpvY7SzpU42qkk7R3UwmjwIDztVAYBg2By4bRDazg5nnYqkwunHUp0vS2yk/FgR2gH6eNTOEo7V+JoJ7SYy0I7U8aJeapG2pnSQjtTZUA7VwJpZ0qgU07VwrO56EBEap5aeCVIyXEKhqp/GuG0Q/syjQO6uXx8GqCPTyvcx5sVKSpd08giZTpHaecK3JtsYdLe6VsYDZ4eTjteOD0wCGYQTju0hjPAaccLZxBOO5TopmuRnYxndIR2kD4+k6O0cwXuTbayxVwW2pk5TsxDGmlnZgvtDMmAdq4A0s7MQKcc0sKzuehARGoeKrwSpOQ4E0PVP4tw2qF9mcUB3Vw+PgvQx2cV7uPNihSVrmlkkTKbo7RzOeys8es+gXpYC6PBw+C046thwCAYLpx2aA2Hw2nHV8OF0w4lutlaZCfj2R2hHaSPz+Eo7VwOo51SZp9APWecmOdqpJ05LbQzVwa0czmQduYEOuVcLTybiw5EpOa5hVeClBznYKj65xFOO7Qv8zigm8vH5wH6+LzCfbxZkaLSNY0sUuZzlHYuY6Kd+VsYDZ6fgXbmBwaBEk47tIaKgXaUcNqhRDdfi+xkrB2hHaSP5xylncscpJ18nJi9RtrJW2jHy4B2LgPSTh7olJ4jtIPUXBBeCVJ05xiq/qJw2qF9KTqgm8vHi0AfLwn38WZFikrXNLJI8R2lnUthZ0257jPZghZGgwM47ZSDABgECwinHVrDBeC0Uw4WEE47lOj8FtnJeIQjtIP08QUdpZ1LYbRTzuwz2RaKE/PCjbSzkIV2Fs6Adi4F0s5CQKdcuIVnc9GBiNS8iPBKkJLjggxV/6LCaec/++KAbi4fXxTo44sJ9/FmRYpK1zSySFncUdq5BEc7XtLeJVoYDV4CTzveEsAgWFI47dAaLomnHW9J4bRDiW7xFtnJeClHaAfp40s7SjuX4GgnbzGXhXaWiRPzso20s4yFdpbNgHYuAdLOMkCnXLaFZ3PRgYjUvJzwSpCS49IMVf/ywmmH9mV5B3Rz+fjyQB9fQbiPNytSVLqmkUXKio7SzsW4vy5a92xnpRZGg1eC004UrAQMgpWF0w6t4cpw2omClYXTDiW6FVtkJ+NVHKEdpI+v6ijtXIz7A5SZPdtZLU7MqzfSzmoW2lk9A9q5GEg7qwGdcvUWns1FByJS8xrCK0FKjqsyVP1rCqcd2pc1HdDN5eNrAn18LeE+3qxIUemaRhYpaztKO6NgZ02lmrR3nRZGg9eB006lug4wCNYVTju0huvCaadSXVc47VCiW7tFdjJezxHaQfr4+o7SzigY7VQii7kstLNBnJg3bKSdDSy0s2EGtDMKSDsbAJ1ywxaezUUHIlLzRsIrQUqO6zNU/RsLpx3al40d0M3l4xsDfXwT4T7erEhR6ZpGFimbOko7F8HOGl33bKfcwmhwGU47OigDgyAUTju0hiGcdnQQCqcdSnSbtshOxhVHaAfp45GjtHMRjHZ0Zs92qnFirjXSTtVCO7UMaOciIO1UgU5Za+HZXHQgIjVvJrwSpOQYMVT9mwunHdqXzR3QzeXjmwN9fAvhPt6sSFHpmkYWKVs6SjsX4v66aB3tbNXCaPBWcNoJg62AQbC1cNqhNdwaTjthsLVw2qFEt2WL7GS8jSO0g/TxbR2lnQtxf100M9rZLk7M2zfSznYW2tk+A9q5EEg72wGdcvsWns1FByJS8w7CK0FKjtsyVP07Cqcd2pcdHdDN5eM7An18J+E+3qxIUemaRhYpOztKOxfgPoHaT9q7SwujwbvAacf3dwEGwa7CaYfWcFc47fj+rsJphxLdzi2yk/FujtAO0sd3d5R2LoDRjl+ymMtCO3vEiXnPRtrZw0I7e2ZAOxcAaWcPoFPu2cKzuehARGreS3glSMlxd4aqf2/htEP7srcDurl8fG+gj+8j3MebFSkqXdPIImWko7RzPuys8epoZ98WRoP3hdOO5+8LDIL9hNMOreF+cNrx/P2E0w4lupEtspPx/o7QDtLHD3CUds6H0Y6XGe0cGCfmgxpp50AL7RyUAe2cD6SdA4FOeVALz+aiAxGp+WDhlSAlxwMYqv5DhNMO7cshDujm8vFDgD5+qHAfb1akqHRNI4uUwxylnfNgZ02gk/Ye3sJo8OFw2gn04cAgOEI47dAaHgGnnaBOt0rZbLoRie6wFtnJ+EhHaAfp40c5SjvnwWgnUBZzWWjn6DgxH9NIO0dbaOeYDGjnPCDtHA10ymNaeDYXHYhIzccKrwQpOR7FUPUfJ5x2aF+Oc0A3l48fB/Tx44X7eLMiRaVrGlmknOAo7ZwLO2tKKmnviS2MBp8Ip52SOhEYBCcJpx1aw5PgtFNSJwmnHUp0J7TITsYnO0I7SB8/xVHaORdGO8WaxVwW2jk1TsynNdLOqRbaOS0D2jkXSDunAp3ytBaezUUHIlLz6cIrQUqOpzBU/WcIpx3alzMc0M3l42cAffxM4T7erEhR6ZpGFilnOUo75+A+paDuE6jPbmE0+Gw47YTVs4FBcI5w2qE1PAdOO2H1HOG0Q4nurBbZyfhcR2gH6ePnOUo75+A+pSCymMtCO+fHifmCRto530I7F2RAO+cAaed8oFNe0MKzuehARGq+UHglSMnxPIaq/yLhtEP7cpEDurl8/CKgj48S7uPNihSVrmlkkXKxo7RzNuysydU927mkhdHgS+C0k1OXAIPgUuG0Q2t4KZx2cupS4bRDie7iFtnJ+DJHaAfp45c7Sjtn4z6BOrNnO1fEifnKRtq5wkI7V2ZAO2cDaecKoFNe2cKzuehARGq+SnglSMnxcoaq/2rhtEP7crUDurl8/Gqgj18j3MebFSkqXdPIIuVaR2nnLNxZU0nae10Lo8HXwWlHVa4DBsH1wmmH1vB6OO2oyvXCaYcS3bUtspPxDY7QDtLHb3SUds6C0Y4KLeay0M5NcWK+uZF2brLQzs0Z0A7wBNI3AZ3y5haezUUHIlLzLcIrQUqONzJU/bcKpx3al1sd0M3l47cCffw24T7erEhR6ZpGFim3O0o7Z8LOmmLdm2x3tDAafAecdorVO4BBcKdw2qE1vBNOO8XqncJphxLd7S2yk/FdjtAO0sfvdpR2zsT93k5kMZeFdu6JE/O9jbRzj4V27s2Ads4E0s49QKe8t4Vnc9GBiNR8n/BKkJLj3QxV//3CaYf25X4HdHP5+P1AH39AuI83K1JUuqaRRcqDjtLOGbCzRtd9JttDLYwGPwSnHa0fAgbBw8Jph9bwYTjt6DrdKmWz6UYkugdbZCfjRxyhHaSPP+oo7ZyBe5Mts89keyxOzI830s5jFtp5PAPaOQNIO48BnfLxFp7NRQciUvMTwitBSo6PMlT9TwqnHdqXJx3QzeXjTwJ9/CnhPt6sSFHpmkYWKU87Sjun417GqPu9nWdaGA1+pgU/77PCCYV0P9syeoFB87JQBSWUp1tkJ73nHKEKpF8+z5zoEXvyPIOPZ5lQT2NKqC+0MBr8AkNCfVF4QiXdL2aUUFW6pikwXmzhCTiU7iyD7NT+uDVI2vtSC6PBLzGciC8BM/rLwgOW1vBlhiB4Wfg9WgrSlxnw5zngfr8i/HYB+c4rTMm+r6Fj+xXg/rwqHPGbEYNK1zSSGF4T7uO0x68xFHJIP6QQ7Ok3+pZ5sqHtHtaPJ877Qe3MsT7nmCSxtkPi69fNJrxh+pumv2X626a/Y/q7pr9n+vumf2D6h6Z/ZPrHpn9i+qemf2b656Z/YfqXpn9l+temf2P6t6Z/Z/r3pv9g+o+m/2T6z6b/Yvqvpv/W+Izl9fh5SnLsDcvYm5axtyxjb1vG3rGMvWsZe88y9r5l7APL2IeWsY8sYx9bxj6xjH1qGfvMMva5ZewLy9iXlrGvLGNfW8a+sYx9axn7zjL2vWXsB8vYj5axnyxjP1vGfrGM/WoZ+61lzGd3Q+Ovi8ZfVbpWl3TSJsvXAYm37zngG6C5SOObkLn+Xa+30s+Vi9dLv512Lu+/a6/fSTeXSuyjfjfNXLk6n9DvTfxcqsG/9PsTOVexNoav6g8mbi7f4vf6w4mZy7fGkP5owucqNYlH/fGEzlVqGtv6kwmbKzeWPKE/nZC5SmPNOfqz8Z+rMo78pT8f37lK48yF+ovxm0uNR17VX47PXGq8crT+atxzFcYz3+uvxzWXN95nh/5mrHN5tQk4h/S3Y5urNEFnmv6u+Vz+BJ6P+vsmcwW1CT5r9Q/2udREnNv6R9tcaqJqAP3TmHPpiawn9M+Nc0UTXZvoX+rnyqeoc/SviblytVQ1k/7N0Tvav8FqvajurePfWxgN/r0F/dZxpH/HbaD+A7ConHe0aQ3/AN7R7lvDP8BBkNXbo7jgjTJ7e/TPOMD+aryz8WfLmG+P/tXC//YoLpMo/ScwgP4Cby7a+Sho/gQGY5/uPx09kX6F+VEQJe39u4XR4L/hJ1IQ/Q08kf4RfiLRGv4DP5GC6B9HT6RfYXYHFYu5LCdSv9Z4LVr71Z8+9D80nkj0Tdwn0q/AE4k0pJ3rv29+tPJsLvpBMFLzpK24ff2Pk4G1/hEnIPSDYCQK9MetIUsSpz3u34rfG6TuLCuZX2D5J8wn7W1pZTSYJsdWMmG+BRj8rcCkxLWGra3oSibMtzIHPyKB9m+VnUDbwGvY19AHL9LH24Gxl2UF/AusAg5zFnNZKuCOODFP1lgBd1gq4MkyqIB/AVbAHUCnnKyVZ3PRgYjUPIC5Albpmqbk2M5QvQ0UXrXSvgx0QDeXjw8E+nincB9vVqQgih/UXF3gAzsr2vkZdtb4taS93a2MBnfDacevdQM3sEc47dAa9sBpx6/1CKcdSnRdrbKTcS84Gfc1tGakjw9ylHZ+htGOX7WYy0I7k8eJeXAj7UxuoZ3BGdDOz0DamRzolINbeTYXHYhIzVMIrwQpOQ5iqPqnFE47tC9TOqCby8enBPr4VMJ9vFmRotI1jSxSpnb02c5PsLOm/u+OT9PKaPA0cNrJqWmAQTCtcNqhNZwWTjs5Na1w2qFEN3Wr7GQ8nSO0g/Tx6R2lnZ9gtJPd3x2fIU7MMzbSzgwW2pkxA9r5CUg7MwCdcsZWns1FByJS80zCK0FKjtMzVP0zC6cd2peZHdDN5eMzA318iHAfb1akqHRNI4uUoY7Szo+43xKro51ZWhkNngVOO5GaBRgEswqnHVrDWeG0E6lZhdMOJbqhrbKT8WyO0A7Sx4c5Sjs/wminkhntDI8T8+yNtDPcQjuzZ0A7PwJpZzjQKWdv5dlcdCAiNc8hvBKk5DiMoeqfUzjt0L7M6YBuLh+fE+jjcwn38WZFikrXNLJImdtR2vkBdtYU6z4TY55WRoPngdNOUc8DDIJ5hdMOreG8cNop1ulWKZtNNyLRzd0qOxnP5wjtIH18fkdp5wcY7RQz+ywVFSdm3Ug7ykI7OgPa+QFIOwrolLqVZ3PRgYjUnBNeCVJynJ+h6s8Lpx3al7wDurl8PA/0cU+4jzcrUlS6ppFFSsFR2vke92zHT9pbbGU0uIh/tuMXgUFQEk47tIYl/LMdvyScdijRFVplJ2PfEdpB+njgKO18j/twwZLFXBbaWSBOzCMaaWcBC+2MyIB2vgfSzgJApxzRyrO56EBEal5QeCVIyTFgqPoXEk47tC8LOaCby8cXAvr4wsJ9vFmRotI1jSxSFnGUdr6DnTVekLR30VZOg+G04wWLAoNgMeG0Q2u4GJx2vGAx4bRDiW6RVtnJeHFHaAfp40s4SjvfwWjH8y3mstDOknFiXqqRdpa00M5SGdDOd0DaWRLolEu18mwuOhCRmpcWXglSclyCoepfRjjt0L4s44BuLh9fBujjywr38WZFikrXNLJIWc5R2vkW9wnUdW+yLd/KaPDycNoJ9fLAIFhBOO3QGq4Ap52wTrdK2Wy6EYluuVbZyXhFR2gH6eMrOUo73+I+gTqzN9lWjhPzKo20s7KFdlbJgHa+BdLOykCnXKWVZ3PRgYjUvKrwSpCS40oMVf9qwmmH9mU1B3Rz+fhqQB9fXbiPNytSVLqmkUXKGo7Szjc42qkk7V2zldHgNfG0U1kTGARrCacdWsO18LRTWUs47VCiW6NVdjJe2xHaQfr4Oo7Szjc42gkt5rLQzrpxYl6vkXbWtdDOehnQzjdA2lkX6JTrtfJsLjoQkZrXF14JUnJch6Hq30A47dC+bOCAbi4f3wDo4xsK9/FmRYpK1zSySNnIUdr5GvcmW5i0d+NWRoM3xr/JFm4MDIJNhNMOreEm+DfZwk2E0w4luo1aZSfjTR2hHaSPlx2lna9xb7KVLeay0E4YJ+ZKI+2EFtqpZEA7XwNpJwQ6ZaWVZ3PRgYjUHAmvBCk5lhmq/qpw2qF9qTqgm8vHq0Afrwn38WZFikrXNLJI2cxR2vkK99dF6z6BevNWRoM3h9OOrzYHBsEWwmmH1nALOO34agvhtEOJbrNW2cl4S0doB+njWzlKO1/BaKeU2SdQbx0n5m0aaWdrC+1skwHtfAWkna2BTrlNK8/mogMRqXlb4ZUgJcetGKr+7YTTDu3Ldg7o5vLx7YA+vr1wH29WpKh0TSOLlB0cpZ0vmWhnx1ZGg3dkoJ0dgUGwk3DaoTXciYF2dhJOO5TodmiVnYx3doR2kD6+i6O086WDtLNrnJh3a6SdXS20s1sGtPMlkHZ2BTrlbo7QDlLz7sIrQUqOuzBU/XsIpx3alz0c0M3l43sAfXxP4T7erEhR6ZpGFil7OUo7X8DOmnLdZ7Lt3cpo8N5w2ikHewODYB/htENruA+cdsrBPsJphxLdXq2yk/FIR2gH6eP7Oko7X8Bop5zZZ7LtFyfm/RtpZz8L7eyfAe18AaSd/YBOuX8rz+aiAxGp+QDhlSAlx30Zqv4DhdMO7cuBDujm8vEDgT5+kHAfb1akqHRNI4uUgx2lnc9xtOMl7T2kldHgQ/C04x0CDIJDhdMOreGheNrxDhVOO5ToDm6VnYwPc4R2kD5+uKO08zmOdvIWc1lo54g4MR/ZSDtHWGjnyAxo53Mg7RwBdMojW3k2Fx2ISM1HCa8EKTkezlD1Hy2cdmhfjnZAN5ePHw308WOE+3izIkWlaxpZpBzrKO18hvvronXPdo5rZTT4ODjtRMFxwCA4Xjjt0BoeD6edKDheOO1Qoju2VXYyPsER2kH6+ImO0s5nuL8umtmznZPixHxyI+2cZKGdkzOgnc+AtHMS0ClPbuXZXHQgIjWfIrwSpOR4IkPVf6pw2qF9OdUB3Vw+firQx08T7uPNihSVrmlkkXK6o7TzKeysqVST9p7RymjwGXDaqVTPAAbBmcJph9bwTDjtVKpnCqcdSnSnt8pOxmc5QjtIHz/bUdr5FEY7lchiLgvtnBMn5nMbaeccC+2cmwHtfAqknXOATnluK8/mogMRqfk84ZUgJcezGar+84XTDu3L+Q7o5vLx84E+foFwH29WpKh0TSOLlAsdpZ1PYGeNrnu2c1Ero8EXwWlHBxcBg2CUcNqhNRwFpx0djBJOO5ToLmyVnYwvdoR2kD5+iaO08wmMdnRmz3YujRPzZY20c6mFdi7LgHY+AdLOpUCnvKyVZ3PRgYjUfLnwSpCS4yUMVf8VwmmH9uUKB3Rz+fgVQB+/UriPNytSVLqmkUXKVY7Szse4vy5aRztXtzIafDWcdsLgamAQXCOcdmgNr4HTThhcI5x2KNFd1So7GV/rCO0gffw6R2nnY9xfF82Mdq6PE/MNjbRzvYV2bsiAdj4G0s71QKe8oZVnc9GBiNR8o/BKkJLjdQxV/03CaYf25SYHdHP5+E1AH79ZuI83K1JUuqaRRcotjtLOR7hPoPaT9t7aymjwrXDa8f1bgUFwm3DaoTW8DU47vn+bcNqhRHdLq+xkfLsjtIP08TscpZ2PYLTjlyzmstDOnXFivquRdu600M5dGdDOR0DauRPolHe18mwuOhCRmu8WXglScryDoeq/Rzjt0L7c44BuLh+/B+jj9wr38WZFikrXNLJIuc9R2vkQdtZ4dbRzfyujwffDacfz7wcGwQPCaYfW8AE47Xj+A8JphxLdfa2yk/GDjtAO0scfcpR2PoTRjpcZ7TwcJ+ZHGmnnYQvtPJIB7XwIpJ2HgU75SCvP5qIDEan5UeGVICXHhxiq/seE0w7ty2MO6Oby8ceAPv64cB9vVqSodE0ji5QnHKWdD2BnTaCT9j7Zymjwk3DaCfSTwCB4Sjjt0Bo+BaedoE63StlsuhGJ7olW2cn4aUdoB+njzzhKOx/AaCdQFnNZaOfZODE/10g7z1po57kMaOcDIO08C3TK51p5NhcdiEjNzwuvBCk5PsNQ9b8gnHZoX15wQDeXj78A9PEXhft4syJFpWsaWaS85CjtvA87a0oqae/LrYwGvwynnZJ6GRgErwinHVrDV+C0U1KvCKcdSnQvtcpOxq86QjtIH3/NUdp5H0Y7xZrFXBbaeT1OzG800s7rFtp5IwPaeR9IO68DnfKNVp7NRQciUvObwitBSo6vMVT9bwmnHdqXtxzQzeXjbwF9/G3hPt6sSFHpmkYWKe84Sjvv4T6loO4TqN9tZTT4XTjthNV3gUHwnnDaoTV8D047YfU94bRDie6dVtnJ+H1HaAfp4x84Sjvv4T6lILKYy0I7H8aJ+aNG2vnQQjsfZUA77wFp50OgU37UyrO56EBEav5YeCVIyfEDhqr/E+G0Q/vyiQO6uXz8E6CPfyrcx5sVKSpd08gi5TNHaedd2FmTq3u283kro8Gfw2knpz4HBsEXwmmH1vALOO3k1BfCaYcS3WetspPxl47QDtLHv3KUdt7FfQJ1Zs92vo4T8zeNtPO1hXa+yYB23gXSztdAp/ymlWdz0YGI1Pyt8EqQkuNXDFX/d8Jph/blOwd0c/n4d0Af/164jzcrUlS6ppFFyg+O0s47uLOmkrT3x1ZGg3+E046q/AgMgp+E0w6t4U9w2lGVn4TTDiW6H1plJ+OfHaEdpI//4ijtvAOjHRVazGWhnV/jxPxbI+38aqGd3zKgHeAJpH8FOuVvrTybiw5EpObfhVeClBx/Yaj6/xBOO7Qvfzigm8vH/wD6+J/CfbxZkaLSNY0sUv5ylHbehp01xbo32f5uZTT4bzjtFKt/A4PgH+G0Q2v4D5x2itV/hNMOJbq/WmUn435tbtAO0scnAWrOknbexv3eTmZvsk3a9u/X/m396smG/odG2qFv4qadt4G0M2kbzin7t/FsLjoQkZpbwMkHHXCUHCdpwx8MrW28B5dK1zTtS6sDurl8vBXo423CfbxZkaLSNY0sUtqBfpMl7bwFO2t03WeydbQxGkyTY2lH6w5gEEwGDE6uNZysDU07uk63StlsuhGJrr1NdjIe4AjtIH18oKO08xbuTbbMPpOtM07MXY2002mhna4MaOctIO10Ap2yq41nc9GBiNTcLbwSpOQ4kKHq7xFOO7QvPQ7o5vLxHqCP9wr38WZFikrXNLJIGeQo7byJexmj7vd2Jm9jNHjyNvy8g4UTCuke3DZ6gUHzslAFJZRBbbKT3hSOUAXSL6dkTvSIPZmSwcezTKhvMCXUqdoYDZ6KIaFOLTyhku6pM0qoKl3TFBhTt/EEHEp3lkH2egtuDZL2TtPGaPA0DCfiNMCMPq3wgKU1nJYhCKYVfo+WgnRaBvyZArjf0wm/XUC+Mx1Tsu9r6NieDrg/0wtH/GbEoNI1jSSGGYT7OO3xDAyFHNIPqUjo6Tf6lnmyoe0e3o8nzvtB7cyxPueYJLG2Q+LrGc1+zmT6zKYPMX2o6bOYPqvps5k+zPThps9u+hymz2n6XKbPbfo8ps9r+nymz2+6Ml2bnjM9b7pnesH0oukl033TA9MXMH2E6Qs2PmOZMX6ekhybyTI2s2VsiGVsqGVsFsvYrJax2Sxjwyxjwy1js1vG5rCMzWkZm8syNrdlbB7L2LyWsfksY/NbxpRlTFvGcpaxvGXMs4wVLGNFy1jJMuZbxgLL2AKWsRGWsQXbxnx2NzT+umj8VaVrdUknbbKcEZB4+54DzgSaizTODJnr3/Uakn6uXLxeemjaubz/rr2eJd1cKrGPetY0c+XqfELPNvFzqQb/0sMmcq5ibQxf1cMnbi7f4vd69omZy7fGkJ5jwucqNYlHPeeEzlVqGtt6rgmbKzeWPKHnnpC5SmPNOXqe8Z+rMo78pecd37lK48yFer7xm0uNR17V84/PXGq8crRW456rMJ75XutxzeWN99mhc2Ody6tNwDmk82ObqzRBZ5r2ms/lT+D5qAtN5gpqE3zW6qJ9LjUR57Yu2eZSE1UDaH/MufRE1hM6aJwrmujaRC9QP1c+RZ2jRyTmytVS1Ux6QUfvaC8Iq/WiureOF2pjNHihNvRbx5FeCLeBemHAonLe0aY1XBh4R7tvDRcGB0FWb4/igjfK7O3RReIAW7TxzsYibWO+PbpoG//bo7hMovQiwABaFLy5aOejoFkEGIx9uhdx9EQaAfOjIErau1gbo8GLwU+kIFoMeCItLvxEojVcHH4iBdHijp5II2B2BxWLuSwn0hJxgC3ZeCItYTmRlszgRBoBPJGWAAbQkkybi34QjNS8FDCZ9euHPy0XjhMQ+kEwEgWWBiYz2xqqdE3THi/NUMks7WglswAs/4T5pL3LtDEavAy8kgnzywCDf1nhlQyt4bLwSibML8sc/IgEurTwBLoceA37GvrgRfr48sDYy7ICXgBmd5izmMtSAa8QJ+YVGyvgFSwV8IoZVMC4E0jpFYBOuSLT5qIDEal5JeYKWKVrmpLj8gzV28rCq1bal5Ud0M3l4ysDfXwV4T7erEhBFD+ouVYFH9hZ0U4AO2v8WtLe1doYDV4NTjt+bTXgBq4unHZoDVeH045fW1047VCiW7VNdjJeA5yM+xpaM9LH13SUdgKY3X7VYi4L7awVJ+a1G2lnLQvtrJ0B7eBOIKXXAjrl2kybiw5EpOZ1hFeClBzXZKj61xVOO7Qv6zqgm8vH1wX6+HrCfbxZkaLSNY0sUtZ39NmODztr6v/u+AZtjAZvAKednNoAGAQbCqcdWsMN4bSTUxsKpx1KdOu3yU7GGzlCO0gf39hR2vFhdmf3d8c3iRPzpo20s4mFdjbNgHZwJ5DSmwCdclOmzUUHIlJzWXglSMlxY4aqPxROO7QvoQO6uXw8BPp4RbiPNytSVLqmkUVK5CjtlGBnTVRHO9U2RoOrcNqJVBUYBDXhtENrWIPTTqRqwmmHEl3UJjsZb+YI7SB9fHNHaacEs7uSGe1sESfmLRtpZwsL7WyZAe3gTiCltwA65ZZMm4sORKTmrYRXgpQcN2eo+rcWTju0L1s7oJvLx7cG+vg2wn28WZGi0jWNLFK2dZR2irCzplj3mRjbtTEavB2cdop6O2AQbC+cdmgNt4fTTrFOt0rZbLoRiW7bNtnJeAdHaAfp4zs6SjtFmN3FzD5LZac4Me/cSDs7WWhn5wxoB3cCKb0T0Cl3ZtpcdCAiNe8ivBKk5LgjQ9W/q3DaoX3Z1QHdXD6+K9DHdxPu482KFJWuaWSRsrujtFPAPdvxk/bu0cZo8B74Zzv+HsAg2FM47dAa7ol/tuPvKZx2KNHt3iY7Ge/lCO0gfXxvR2mnALM7KlnMZaGdfeLEPLKRdvax0M7IDGgHdwIpvQ/QKUcybS46EJGa9xVeCVJy3Juh6t9POO3QvuzngG4uH98P6OP7C/fxZkWKStc0skg5wFHa8WBnjRck7T2wjdHgA+G04wUHAoPgIOG0Q2t4EJx2vOAg4bRDie6ANtnJ+GBHaAfp44c4SjsezG7Pt5jLQjuHxon5sEbaOdRCO4dlQDu4E0jpQ4FOeRjT5qIDEan5cOGVICXHQxiq/iOE0w7tyxEO6Oby8SOAPn6kcB9vVqSodE0ji5SjHKWdPOysCeveZDu6jdHgo+G0E+qjgUFwjHDaoTU8Bk47YZ1ulbLZdCMS3VFtspPxsY7QDtLHj3OUdvIwu8PM3mQ7Pk7MJzTSzvEW2jkhA9rBnUBKHw90yhOYNhcdiEjNJwqvBCk5HsdQ9Z8knHZoX05yQDeXj58E9PGThft4syJFpWsaWaSc4ijt5HC0U0nae2obo8Gn4mmnciowCE4TTju0hqfhaadymnDaoUR3SpvsZHy6I7SD9PEzHKWdHK4gDi3mstDOmXFiPquRds600M5ZGdAO7gRS+kygU57FtLnoQERqPlt4JUjJ8QyGqv8c4bRD+3KOA7q5fPwcoI+fK9zHmxUpKl3TyCLlPEdpR+PeZAuT9p7fxmjw+fg32cLzgUFwgXDaoTW8AP8mW3iBcNqhRHdem+xkfKEjtIP08YscpR2Ne9mpbDGXhXZGxYn54kbaGWWhnYszoB3cCaT0KKBTXsy0uehARGq+RHglSMnxIoaq/1LhtEP7cqkDurl8/FKgj18m3MebFSkqXdPIIuVyR2lHwc4av+4TqK9oYzT4Cjjt+OoKYBBcKZx2aA2vhNOOr64UTjuU6C5vk52Mr3KEdpA+frWjtKNgdpdqFnNZaOeaODFf20g711ho59oMaAd3Ail9DdApr2XaXHQgIjVfJ7wSpOR4NUPVf71w2qF9ud4B3Vw+fj3Qx28Q7uPNihSVrmlkkXKjo7QzPxPt3NTGaPBNDLRzEzAIbhZOO7SGNzPQzs3CaYcS3Y1tspPxLY7QDtLHb3WUduZ3kHZuixPz7Y20c5uFdm7PgHZwJ5DStwGd8nZHaAep+Q7hlSAlx1sZqv47hdMO7cudDujm8vE7gT5+l3Afb1akqHRNI4uUux2lnflgZ0257jPZ7mljNPgeOO2Ug3uAQXCvcNqhNbwXTjvl4F7htEOJ7u422cn4PkdoB+nj9ztKO/PB7C5n9plsD8SJ+cFG2nnAQjsPZkA7uBNI6QeATvkg0+aiAxGp+SHhlSAlx/sZqv6HhdMO7cvDDujm8vGHgT7+iHAfb1akqHRNI4uURx2lnXlxtOMl7X2sjdHgx/C04z0GDILHhdMOreHjeNrxHhdOO5ToHm2TnYyfcIR2kD7+pKO0My+uIM5bzGWhnafixPx0I+08ZaGdpzOgHdwJpPRTQKd8mmlz0YGI1PyM8EqQkuOTDFX/s8Jph/blWQd0c/n4s0Aff064jzcrUlS6ppFFyvOO0s48sLMmqnu280Ibo8EvwGknCl4ABsGLwmmH1vBFOO1EwYvCaYcS3fNtspPxS47QDtLHX3aUduaB2R1l9mznlTgxv9pIO69YaOfVDGgHdwIp/QrQKV9l2lx0ICI1vya8EqTk+DJD1f+6cNqhfXndAd1cPv460MffEO7jzYoUla5pZJHypqO0MzfsrKlUk/a+1cZo8Ftw2qlU3wIGwdvCaYfW8G047VSqbwunHUp0b7bJTsbvOEI7SB9/11HamRtmdyWymMtCO+/Fifn9Rtp5z0I772dAO7gTSOn3gE75PtPmogMRqfkD4ZUgJcd3Gar+D4XTDu3Lhw7o5vLxD4E+/pFwH29WpKh0TSOLlI8dpZ25YGeNrnu280kbo8GfwGlHB58Ag+BT4bRDa/gpnHZ08Klw2qFE93Gb7GT8mSO0g/Txzx2lnblgduvMnu18ESfmLxtp5wsL7XyZAe3gTiClvwA65ZdMm4sORKTmr4RXgpQcP2eo+r8WTju0L187oJvLx78G+vg3wn28WZGi0jWNLFK+dZR25oSdNWEd7XzXxmjwd3DaCYPvgEHwvXDaoTX8Hk47YfC9cNqhRPdtm+xk/IMjtIP08R8dpZ05YXaHmdHOT3Fi/rmRdn6y0M7PGdAO7gRS+iegU/7MtLnoQERq/kV4JUjJ8UeGqv9X4bRD+/KrA7q5fPxXoI//JtzHmxUpKl3TyCLld0dpZw7YWeP7SXv/aGM0+A847fj+H8Ag+FM47dAa/gmnHd//UzjtUKL7vU12Mv7LEdpB+vjfjtLOHDC7/ZLFXBba+acvMbf3qyebfyy0Q9/ETTu4E0jpf5CJt51nc9GBiNQ8STs2+aADjpLj3wxV/6TtvAeXStc07QvZKF03l48n7Uw7V3/hPt6sSFHpmkYWKS1Av8mSdmaHnTVeHe20tjMaTJNjacfzW4FB0AYMTq41bGtH047ntzEfGohE19IuOxm3g5NxX0NrRvp4B1BzlrQzO4x2vMxoZ7I4MQ9opJ3J2seknQEZ0M7sQNqZDOiUA9p5NhcdiEjNA4VXgpQcOxiq/k7htEP70umAbi4f7wT6eJdwH29WpKh0TSOLlG5HaWc47KwJdNLennZGg3vgtBPoHmAQ9AqnHVrDXjjtBHW6Vcpm041IdN3tspPxIEdoB+njkztKO8NhtBMoi7kstDM4TsxTNNLOYAvtTJEB7QwH0s5goFNO0c6zuehARGqeUnglSMlxcoaqfyrhtEP7MpUDurl8fCqgj08t3MebFSkqXdPIImUaR2lnGOysKamkvdO2Mxo8LZx2SmpaYBBMJ5x2aA2ng9NOSU0nnHYo0U3TLjsZT+8I7SB9fAZHaWcYjHaKNYu5LLQzY5yYZ2qknRkttDNTBrQzDEg7MwKdcqZ2ns1FByJS88zCK0FKjjMwVP1DhNMO7csQB3Rz+fgQoI8PFe7jzYoUla5pZJEyi6O0MxvuUwrqPoF61nZGg2eF005YnRUYBLMJpx1aw9ngtBNWZxNOO5ToZmmXnYyHOUI7SB8f7ijtzIb7RfbMPoF69jgxz9FIO7NbaGeODGhnNiDtzA50yjnaeTYXHYhIzXMKrwQpOQ5nqPrnEk47tC9zOaCby8fnAvr43MJ9vFmRotI1jSxS5nGUdmaFnTW5umc787YzGjwvnHZyal5gEMwnnHZoDeeD005OzSecdijRzdMuOxnP7wjtIH1cOUo7s+I+pDizZzs6Tsy5RtrRFtrJZUA7swJpRwOdMtfOs7noQERqzguvBCk5Koaq3xNOO7QvngO6uXzcA/p4QbiPNytSVLqmkUVK0VHamQV31lSS9pbaGQ0uwWlHVUrAIPCF0w6toQ+nHVXxhdMOJbpiu+xkHDhCO0gfX8BR2pkF91lyocVcFtoZESfmBRtpZ4SFdhbMgHaAJ5AeAXTKBdt5NhcdiEjNCwmvBCk5LsBQ9S8snHZoXxZ2QDeXjy8M9PFFhPt4syJFpWsaWaQs6ijtDIWdNcW6N9kWa2c0eDE47RSriwGDYHHhtENruDicdorVxYXTzn8SXbvsZLyEI7SD9PElHaWdobjf28nsTbal4sS8dCPtLGWhnaUzoJ2hQNpZCuiUS7fzbC46EJGalxFeCVJyXJKh6l9WOO3QvizrgG4uH18W6OPLCffxZkWKStc0skhZ3lHaGQI7a3TdZ7Kt0M5o8Apw2tF6BWAQrCicdmgNV4TTjq7TrVI2m25Eolu+XXYyXskR2kH6+MqO0s4Q3JtsmX0m2ypxYl61kXZWsdDOqhnQzhAg7awCdMpV23k2Fx2ISM2rCa8EKTmuzFD1ry6cdmhfVndAN5ePrw708TWE+3izIkWlaxpZpKzpKO3MDPyDkEl712pnNHitdvy8awsnFNK9dvvoBQbNy0IVlFDWbJed9NZxhCqQfrkuc6JH7Mm6DD6eZUKdiSmhrtfOaPB6DAl1feEJlXSvn1FCVemapsBYv50n4FC6swyyGZF/UTVh5wbtjAZvwHAibgDM6BsKD1haww0ZgmBD4fdoKUg3ZMCfdYD7vZHw2wXkOxsxJfu+ho7tjYD7s7FwxG9GDCpd00hi2ES4j9Meb8JQyCH9kIqEnn6jb5knG9ruI/rzxHk/qJ051ucckyTWdkh8vanZz7LpoekV0yPTq6bXTN/M9M1N38L0LU3fyvStTd/G9G1N38707U3fwfQdTd/J9J1N38X0XU3fzfTdTd/D9D1N38v0vU3fx/SRpu/b+Ixl0/h5SnKsbBkLLWMVy1hkGataxmqWsc0sY5tbxrawjG1pGdvKMra1ZWwby9i2lrHtLGPbW8Z2sIztaBnbyTK2s2VsF8vYrpax3Sxju1vG9rCM7WkZ28sytrdlbB/L2EjL2L7tYz67Gxp/XTT+qtK1uqSTNlluCki8fc8By6C5SGMImevf9aqknysXr5eO0s7l/XftdTXdXCqxj7qWZq5cnU/ozSZ+LtXgX3rziZyrWBvDV/UWEzeXb/F7veXEzOVbY0hvNeFzlZrEo956QucqNY1tvc2EzZUbS57Q207IXKWx5hy93fjPVRlH/tLbj+9cpXHmQr3D+M2lxiOv6h3HZy41Xjla7zTuuQrjme/1zuOayxvvs0PvMta5vNoEnEN617HNVZqgM03v1nwufwLPR717k7mC2gSftXoP+1xqIs5tvadtLjVRNYDea8y59ETWE3rvxrmiia5N9D71c+VT1Dl6ZGKuXC1VzaT3dfSO9r6wWi+qe+t4v3ZGg/drR791HOn9cBuo9wcsKucdbVrD/YF3tPvWcH9wEGT19ui+MLujzN4ePSAOsAMb72wc0D7m26MHtvO/PbovkBoPAAbQgeDNRTsfBc0BwGDs032AoyfSSJgfBVHS3oPaGQ0+CH4iBdFBwBPpYOEnEq3hwfATKYgOdvREGgmzO6hYzGU5kQ6JA+zQxhPpEMuJdGgGJ9JI4Il0CDCADmXaXPSDYKTmw4DJrF8//Gm5f5yA0A+CkShwODCZ2dZQpWua9vhwhkrmcEcrmX1g+SfMJ+09op3R4CPglUyYPwIY/EcKr2RoDY+EVzJh/kjm4Eck0MOFJ9CjwGvY19AHL9LHjwbGXpYV8D4wu8OcxVyWCviYODEf21gBH2OpgI/NoALGnUBKHwN0ymOZNhcdiEjNxzFXwCpd05Qcj2ao3o4XXrXSvhzvgG4uHz8e6OMnCPfxZkUKovhBzXUi+MDOinb2hp01fi1p70ntjAafBKcdv3YScANPFk47tIYnw2nHr50snHYo0Z3YLjsZnwJOxn0NrRnp46c6Sjt7w+z2qxZzWWjntDgxn95IO6dZaOf0DGgHdwIpfRrQKU9n2lx0ICI1nyG8EqTkeCpD1X+mcNqhfTnTAd1cPn4m0MfPEu7jzYoUla5pZJFytqPPdvaCnTX1f3f8nHZGg8+B005OnQMMgnOF0w6t4blw2smpc4XTDiW6s9tlJ+PzHKEdpI+f7yjt7AWzO7u/O35BnJgvbKSdCyy0c2EGtIM7gZS+AOiUFzJtLjoQkZovEl4JUnI8n6HqHyWcdmhfRjmgm8vHRwF9/GLhPt6sSFHpmkYWKZc4Sjt7ws6aqI52Lm1nNPhSOO1E6lJgEFwmnHZoDS+D006kLhNOO5ToLmmXnYwvd4R2kD5+haO0syfM7kpmtHNlnJivaqSdKy20c1UGtIM7gZS+EuiUVzFtLjoQkZqvFl4JUnK8gqHqv0Y47dC+XOOAbi4fvwbo49cK9/FmRYpK1zSySLnOUdrZA3bWFOs+E+P6dkaDr4fTTlFfDwyCG4TTDq3hDXDaKdbpVimbTTci0V3XLjsZ3+gI7SB9/CZHaWcPmN3FzD5L5eY4Md/SSDs3W2jnlgxoB3cCKX0z0ClvYdpcdCAiNd8qvBKk5HgTQ9V/m3DaoX25zQHdXD5+G9DHbxfu482KFJWuaWSRcoejtLM77tmOn7T3znZGg+/EP9vx7wQGwV3CaYfW8C78sx3/LuG0Q4nujnbZyfhuR2gH6eP3OEo7u8PsjkoWc1lo5944Md/XSDv3WmjnvgxoB3cCKX0v0CnvY9pcdCAiNd8vvBKk5HgPQ9X/gHDaoX15wAHdXD7+ANDHHxTu482KFJWuaWSR8pCjtLMb7KzxgqS9D7czGvwwnHa84GFgEDwinHZoDR+B044XPCKcdijRPdQuOxk/6gjtIH38MUdpZzeY3Z5vMZeFdh6PE/MTjbTzuIV2nsiAdnAnkNKPA53yCabNRQciUvOTwitBSo6PMVT9TwmnHdqXpxzQzeXjTwF9/GnhPt6sSFHpmkYWKc84Sju7ws6asO5NtmfbGQ1+Fk47oX4WGATPCacdWsPn4LQT1ulWKZtNNyLRPdMuOxk/7wjtIH38BUdpZ1eY3WFmb7K9GCfmlxpp50UL7byUAe3gTiClXwQ65UtMm4sORKTml4VXgpQcX2Co+l8RTju0L684oJvLx18B+virwn28WZGi0jWNLFJec5R2dsHRTiVp7+vtjAa/jqedyuvAIHhDOO3QGr6Bp53KG8JphxLda+2yk/GbjtAO0sffcpR2dsEVxKHFXBbaeTtOzO800s7bFtp5JwPawZ1ASr8NdMp3mDYXHYhIze8KrwQpOb7FUPW/J5x2aF/ec0A3l4+/B/Tx94X7eLMiRaVrGlmkfOAo7eyMe5MtTNr7YTujwR/i32QLPwQGwUfCaYfW8CP8m2zhR8JphxLdB+2yk/HHjtAO0sc/cZR2dsa97FS2mMtCO5/GifmzRtr51EI7n2VAO7gTSOlPgU75GdPmogMRqflz4ZUgJcdPGKr+L4TTDu3LFw7o5vLxL4A+/qVwH29WpKh0TSOLlK8cpZ2dYGeNX/cJ1F+3Mxr8NZx2fPU1MAi+EU47tIbfwGnHV98Ipx1KdF+1y07G3zpCO0gf/85R2tkJZncps0+g/j5OzD800s73Ftr5IQPawZ1ASn8PdMofmDYXHYhIzT8KrwQpOX7HUPX/JJx2aF9+ckA3l4//BPTxn4X7eLMiRaVrGlmk/OIo7ezIRDu/tjMa/CsD7fwKDILfhNMOreFvDLTzm3DaoUT3S7vsZPy7I7SD9PE/HKWdHR2knT/jxPxXI+38aaGdvzKgHdwJpPSfQKf8yxHaQWr+W3glSMnxD4aq/x/htEP78o8Durl8/B9kQdUh28ebFSkqXdPIImUS3BpmSjs7wM6act1nsk3awWgwTY6lnXIwKTAI+nfIph1aQ7IRSzvloH8H76GBSHSTdMhOxi3gZPzfgARrRvp4K1BzlrSzA6xYKGf2mWxtcWJu7+hXTzZtHWPSDn0TN+3sAKSdNqBTtnfwbC46EJGaO4RXgpQcWzvwB8NkzAeXStc07ctkDujm8vHJgD4+QLiPNytSVLqmkUXKQEdpZ3sc7XhJezs7GA3uxNOO1wkMgi7htENr2IWnHa9LOO1QohvYITsZdztCO0gf73GUdrbH0U7eYi4L7fTGiXlQI+30WmhnUAa0sz2QdnqBTjmog2dz0YGI1Dy58EqQkmMPQ9U/WDjt0L4MdkA3l48PBvr4FMJ9vFmRotI1jSxSpnSUdraDnTVR3bOdqToYDZ4KTjtRMBUwCKYWTju0hlPDaScKphZOO5TopuyQnYyncYR2kD4+raO0sx2MdqLMnu1MFyfm6RtpZzoL7UyfAe1sB6Sd6YBOOX0Hz+aiAxGpeQbhlSAlx2kZqv4ZhdMO7cuMDujm8vEZgT4+k3Afb1akqHRNI4uUmR2lnW1hZ02lmrR3SAejwUPgtFOpDgEGwVDhtENrOBROO5XqUOG0Q4lu5g7ZyXgWR2gH6eOzOko728JopxJZzGWhndnixDyskXZms9DOsAxoZ1sg7cwGdMphHTybiw5EpObhwitBSo6zMlT9swunHdqX2R3QzeXjswN9fA7hPt6sSFHpmkYWKXM6SjvbwM4aXfdsZ64ORoPngtOODuYCBsHcwmmH1nBuOO3oYG7htEOJbs4O2cl4HkdoB+nj8zpKO9vAaEdn9mxnvjgxz99IO/NZaGf+DGhnGyDtzAd0yvk7eDYXHYhIzUp4JUjJcV6Gql8Lpx3aF+2Abi4f10Afzwn38WZFikrXNLJIyTtKO1vDzpqwjna8DkaDPTjthIEHDIKCcNqhNSzAaScMCsJphxJdvkN2Mi46QjtIHy85Sjtbw2gnzIx2/DgxB42041toJ8iAdrYG0o4PdMqgg2dz0YGI1LyA8EqQkmOJoeofIZx2aF9GOKCby8dHAH18QeE+3qxIUemaRhYpCzlKO1vhPoHaT9q7cAejwQvDacf3FwYGwSLCaYfWcBE47fj+IsJphxLdQh2yk/GijtAO0scXc5R2toLRjl+ymMtCO4vHiXmJRtpZ3EI7S2RAO1sBaWdxoFMu0cGzuehARGpeUnglSMlxMYaqfynhtEP7spQDurl8fCmgjy8t3MebFSkqXdPIImUZR2lnS9hZ49XRzrIdjAYvC6cdz18WGATLCacdWsPl4LTj+csJpx1KdMt0yE7GyztCO0gfX8FR2tkSRjteZrSzYpyYV2qknRUttLNSBrSzJZB2VgQ65UodPJuLDkSk5pWFV4KUHFdgqPpXEU47tC+rOKCby8dXAfr4qsJ9vFmRotI1jSxSVnOUdraAnTWBTtq7egejwavDaSfQqwODYA3htENruAacdoI63Spls+lGJLrVOmQn4zUdoR2kj6/lKO1sAaOdQFnMZaGdtePEvE4j7axtoZ11MqCdLYC0szbQKdfp4NlcdCAiNa8rvBKk5LgWQ9W/nnDaoX1ZzwHdXD6+HtDH1xfu482KFJWuaWSRsoGjtLM57KwpqaS9G3YwGrwhnHZKakNgEGwknHZoDTeC005JbSScdijRbdAhOxlv7AjtIH18E0dpZ3MY7RRrFnNZaGfTODGXG2lnUwvtlDOgnc2BtLMp0CnLHTybiw5EpOZQeCVIyXEThqq/Ipx2aF8qDujm8vEK0Mcj4T7erEhR6ZpGFilVR2lnM9ynFNR9AnWtg9HgGpx2wmoNGASbCacdWsPN4LQTVjcTTjuU6KodspPx5o7QDtLHt3CUdjbDfUpBZp9AvWWcmLdqpJ0tLbSzVQa0sxmQdrYEOuVWHTybiw5EpOathVeClBy3YKj6txFOO7Qv2zigm8vHtwH6+LbCfbxZkaLSNY0sUrZzlHZqsLMmV/dsZ/sORoO3h9NOTm0PDIIdhNMOreEOcNrJqR2E0w4luu06ZCfjHR2hHaSP7+Qo7dRwn0Cd2bOdnePEvEsj7exsoZ1dMqCdGpB2dgY65S4dPJuLDkSk5l2FV4KUHHdiqPp3E047tC+7OaCby8d3A/r47sJ9vFmRotI1jSxS9nCUdqq4s6aStHfPDkaD94TTjqrsCQyCvYTTDq3hXnDaUZW9hNMOJbo9OmQn470doR2kj+/jKO1UYbSjQou5LLQzMk7M+zbSzkgL7eybAe0ATyA9EuiU+3bwbC46EJGa9xNeCVJy3Ieh6t9fOO3QvuzvgG4uH98f6OMHCPfxZkWKStc0skg50FHaiWBnTbHuTbaDOhgNPghOO8XqQcAgOFg47dAaHgynnWL1YOG0Q4nuwA7ZyfgQR2gH6eOHOko7Ee73djJ7k+2wODEf3kg7h1lo5/AMaCcC0s5hQKc8vINnc9GBiNR8hPBKkJLjoQxV/5HCaYf25UgHdHP5+JFAHz9KuI83K1JUuqaRRcrRjtJOBXbW6LrPZDumg9HgY+C0o/UxwCA4Vjjt0BoeC6cdXadbpWw23YhEd3SH7GR8nCO0g/Tx4x2lnQruTbbMPpPthDgxn9hIOydYaOfEDGinAqSdE4BOeWIHz+aiAxGp+SThlSAlx+MZqv6ThdMO7cvJDujm8vGTgT5+inAfb1akqHRNI4uUUx2lnRD3Mkbd7+2c1sFo8Gkd+HlPF04opPv0ROUBmpeFKiihnNohO+md4QhVIP3yTOZEj9iTMxl8PMuEWmZKqGd1MBp8FkNCPVt4QiXdZ2eUUFW6pikwzu7gCTiU7iyDbNN23Bok7T2ng9HgcxhOxHOAGf1c4QFLa3guQxCcK/weLQXpuQz4cwZwv88TfruAfOc8pmTf19CxfR5wf84XjvjNiEGlaxpJDBcI93Ha4wsYCjmkH1KR0NpvdEsevhdSfLbEgZRFFXEhcEMnTdh5UZxoRjU+UKD/Yb+GsVHxWLKhHyhcCNzBi8Z/rso45tKjwOVn/372p1z9JnA9x2V3P0anvAi4JskgurjRGS/uGDPKGh0P6SzjsFWPS8zFQCe+pAPmDCq5ppeMRzCntX0UcB2Qa3rpBKzpuH5Wck0vTSTNjsR6JtdUpWv677HPl6vUdL5QLRVUsewVomI+F+VKKvIKNW0MzgWeWZpaxfMjP5ev5Uq5yt9Y+/7jY32Jre8g+bvf6AOEri8zXy83/YqOf0/RrFj88sS+az+fy5Xy5B9+pLQXmSMgl4tCT1VUuZKrBp4Oal7Oy1eiSmh8qaxrqlauBDX/37mS9l7ZwWjwlZZaM63xVwJr7KuEszit4VWWWjPtGl4Frgja+2Xz3svlTI+N+2HXt64iuDpZAKBvWgA3UidPg6TRE2hzZXyc7+qJgNBxLfrVwGC+Blwe9q3rNYnKZUJ9QdM7S1rVVJBTZVWqFEthEOVCv1zL1wr5KD+x6zouZ0eu67VM63ptBng3AT4xzir7WuCaXif8xurE+uU4mkb65fXgNUQXPX1riPSZ6/GFRV0OVinb/yu3GtBnSV+7YWyFhUrX9PVMifqGiS8sxuvQvp7hydUBg/+v3pEe52FCmm9g0H0gWHdfa5kw/WpCkndazTcCC2qg32jkXiTj8cYUBen4FHsc8XiQEL8clw6kX96UvP0T5fNeFIQVXcgVy6Hyo3xZ1bxS3nBBlC9FUd4vFsv5fFT0a35gzm9DCL4qlEqBKubyQQ7oS/ogJr+8KfbLLB9UIe8uJIuWm+NbbLe4cmBz2XczQzK4lalQuXUsiVGla/9Zi1sY1uI2prW4jfGQoLW4lWEtDmEu2tI+lCXdtzHoPnSw7DxweVwUoO8GAPdbI9fw/xWKRefZvna7ixR7+1godhzTjBfN3c6QGA77/5Dm7uiQmWAOY6qa77DcBpdMNXcmqSafN7ERlXQtquULpSAX6mK+WKx5tVLR96JawStHpar2yvlcUC2pmvar1VIhXykVa0FUKdaSSTstIXHtz50Jqml2KEi+/chpJ9cBc5eLB8xdzAfMXQwHzOFMB0wr2E5kArsbOBfydiHysDqcKRnePR6HVdo1vQe4P8lbXZIOK679uef/oVtw98a34O6jvIc2utkDbuTLPWnnAj6YZfnNlL41RL/Gy7WGaee6X/h+UMDcz1AkPMBUMD3AeLv2Pqa1eJBpLR5kvF1L6/AAw1ocJfx2Lel+kEH30Q7crr2f4XYtcL/10f+7XdvYNDrP9rWHOGn6fqaE+BAjTZPNDzEkhmMcuV17P7AoerhDZoI5homwHs7gdi1yfx4B3q49GkjAXPvziGV/JvQgHNcbs8j9eZQpfz4KWIdxvVmMXIfHmNbhMebC+lGGc+RYBwrrxxh0H8d0fjbeoEj7xjzyRgBwr/Vx/yuqG5t+lKmoftzFovpx5qL6cYakcPz/h0X1E0ITzPFMRdsTjhXVTwKL6uOARTXX/jz5f+EdCOTdEE47uQ6Yp1w8YJ5iPmCeYjhgTnDkHQhkAnsaOBfyrg3ysDqBKRk+ncE7EM8Af3Xo6MEyDyuu/XmG8bHicDPH8H74HPSs8N8EIs3PMuTe5wB56N+/51Nj0U32Pceg+3nh+02an2fQ/YJw3WTfCwy6XxSum+x7kUH3S8J1k30vMeh+Wbhusu9lBt2vCNdN9r3CoPtV4brJvlcZdL/mwDn2GoPu14XrJvteZ9D9hgP7/QaD7jeF6yb73mTQ/ZZw3WTfWwy63xaum+x7m0H3Ow7E9zsMut8Vrpvse5dB93vCdZN97zHofl+4brLvfQbdHwjXTfZ9wKD7Qwfy2ocMuj8Srpvs+4hB98fCdZN9HzPo/kS4brLvEwbdnzoQ358y6P5MuG6y7zMG3Z87sN+fM+j+Qrhusu8LBt1fOrDfXzLo/kq4brLvKwbdXwvXTfZ9zaD7G+G6yb5vGHR/60B8f8ug+zvhusm+7xh0f+/Afn/PoPsH4brJvh8YdP/owH7/yKD7J+G6yb6fGHT/LFw32fczg+5fhOsm+35h0P2rA/H9K4Pu34TrJvt+Y9D9u3DdZN/vDLr/cMDP/2DQ/adw3WTfnwy6/3Jgv/9i0P23cN1k398Muv9xYL//YdDdbzLZusk+6mjdkwjXTfZNwqB7UuG6yb5JGXT3F66b7OvPoLtFuG6yr4VBd6tw3ZTPWxl0twnXTfa1MehuF66b7Gtn0N0hXDfZ18GgezIH4nsyBt0DhOsm+wYw6B7owH4PZNDdKVw32dfJoLtLuG6yr4tBd7dw3WRfN4PuHuG6yb4eBt29DuS1Xgbdg4TrJvsGMeie3IH9npxB92Dhusm+wQy6pxCum+ybgkH3lA74+ZQMuqcSrpvsm4pB99TCdZN9UzPonka4brJvGgbd0wrXTfZNy6B7OuG6yb7pGHRPL1w32Tc9g+4ZhOsm+2Zg0D2jcN1k34wMumdyoG6ZiUH3zMJ1k30zM+geIlw32TeEQfdQB/x8KIPuWYTrJvtmYdA9q3DdZN+sDLpnE66b7JuNQfcwB+J7GIPu4cJ1k33DGXTP7sB+z86gew7husm+ORh0zylcN9k3J4PuuRzw87kYdM8tXDfZNzeD7nkc2O95GHTPK1w32Tcvg+75HNjv+Rh0zy9cN9k3P4NuJVw32acYdGvhusk+zaA7J1w32Zdj0J0XrpvsyzPo9hzI5x6D7oJw3WRfgUF3Ubhusq/IoLvkgJ+XGHT7wnWTfT6D7kC4brIvYNC9gHDdZN8CDLpHCNdN9o1g0L2gcN1k34IMuhcSrpvsW4hB98IOnGMLM+heRLhusm8RBt2LCtf9H/sYdC8mXDfZtxiD7sWF6yb7FmfQvYQDeW0JBt1LCtdN9i3JoHsp4brJvqUYdC/tgJ8vzaB7GeG6yb5lGHQv68B+L8ugeznhusm+5Rh0Ly9cN9m3PIPuFRzw8xUYdK8oXDfZtyKD7pUc2O+VGHSvLFw32bcyg+5VhOsm+1Zh0L2qA36+KoPu1YTrJvtWY9C9ugP7vTqD7jWE6yb71mDQvaZw3WTfmgy613LAz9di0L22cN1k39oMutcRrpvsW4dB97rCdZN96zLoXk+4brJvPQbd6wvXTfatz6B7A+G6yb4NGHRvKFw32bchg+6NHDi/N2LQvbFw3WTfxgy6N3Fgvzdh0L2pcN1k36YMusvCdZN9ZQbdoXDdZF/IoLsiXDfZV2HQHQnXTfZFDLqrwnWTfVUG3TXhusm+GoPuzRw4vzdj0L25cN1k3+YMurcQrpvs24JB95YO+PmWDLq3Eq6b7NuKQffWwnWTfVsz6N7GAT/fhkH3tsJ1k33bMujezoH93o5B9/bCdZN92zPo3kG4brJvBwbdOwrXTfbtyKB7J+G6yb6dGHTvLFw32bczg+5dHMjnuzDo3lW4brJvVwbduwnXTfbtxqB7dwf8fHcG3XsI10327cGge08H9ntPBt17CddN9u3FoHtvB/Z7bwbd+wjXTfbtw6B7pHDdZN9IBt37OuDn+zLo3k+4brJvPwbd+wvXTfbtz6D7AOG6yb4DGHQf6EB8H8ig+yDhusm+gxh0HyxcN9l3MIPuQxzw80MYdB8qXDfZdyiD7sOE6yb7DmPQfbhw3WTf4Qy6jxCum+w7gkH3kcJ1k31HMug+Srhusu8oBt1HO3COHc2g+xjhusm+Yxh0H+vAfh/LoPs44brJvuMYdB8vXDfZdzyD7hOE6yb7TmDQfaID8X0ig+6ThOsm+05i0H2yA/t9MoPuU4TrJvtOYdB9qgP7fSqD7tOE6yb7TmPQfboD+306g+4zhOsm+85g0H2mA/t9JoPus4TrJvvOYtB9tnDdZN/ZDLrPccDPz2HQfa5w3WTfuQy6zxOum+w7j0H3+cJ1k33nM+i+QLhusu8CBt0XCtdN9l3IoPsiB/L5RQy6RwnXTfaNYtB9sXDdZN/FDLovEa6b7LuEQfelDsT3pQy6LxOum+y7jEH35cJ1k32XM+i+Qrhusu8KBt1XCtdN9l3JoPsq4brJvqsYdF/tQD6/mkH3NcJ1k33XMOi+1oH9vpZB93XCdZN91zHovt6B/b6eQfcNwnWTfTcw6L7Rgf2+kUH3TcJ1k303Mei+Wbhusu9mBt23CNdN9t3CoPtWB+L7VgbdtwnXTfbdxqD7dgf2+3YG3XcI10323cGg+07husm+Oxl03+WAn9/FoPtu4brJvrsZdN/jwH7fw6D7XuG6yb57GXTf58B+38eg+37husm++xl0PyBcN9n3AIPuB4XrJvseZND9kAPx/RCD7oeF6yb7HmbQ/Yhw3WTfIwy6H3XAzx9l0P2YcN1k32MMuh93YL8fZ9D9hHDdZN8TDLqfdGC/n2TQ/ZRw3WTfUwy6nxaum+x7mkH3M8J1k33PMOh+Vrhusu9ZBt3PSc9rxr7nGHQ/70A+f55B9wvCdZN9LzDoflG4brLvRQbdLwnXTfa9xKD7ZQfi+2UG3a8I1032vcKg+1Xhusm+Vxl0vyZcN9n3GoPu14XrJvteZ9D9hgN57Q0G3W8K1032vcmg+y3husm+txh0v+2An7/NoPsd4brJvncYdL8rXDfZ9y6D7veE6yb73mPQ/b5w3WTf+wy6PxCum+z7gEH3hw7k8w8ZdH8kXDfZ9xGD7o8d2O+PGXR/Ilw32fcJg+5PHdjvTxl0fyZcN9n3GYPuzx3Y788ZdH8hXDfZ9wWD7i8d2O8vGXR/JVw32fcVg+6vhesm+75m0P2NcN1k3zcMur8Vrpvs+5ZB93fCdZN93zHo/t6BfP49g+4fhOsm+35g0P2jA/v9I4Pun4TrJvt+YtD9swP7/TOD7l+E6yb7fmHQ/asD+/0rg+7fhOsm+35j0P27A/v9O4PuP4TrJvv+YND9p3DdZN+fDLr/csDP/2LQ/bdw3WTf3wy6/xGum+z7h0F3vwHy/ZxsROueRLhusm8SBt2TOrDfkzLo7i9cN9nXn0F3i3DdZF8Lg+5W4brJvlYG3W0OxHcbg+524brJvnYG3R3CdZN9HQy6JxOum+ybjEH3AAfiewCD7oHCdZN9Axl0dzqw350MuruE6yb7uhh0dzuw390MunuE6yb7ehh09zqw370MugcJ1032DWLQPbkD+z05g+7BwnWTfYMZdE/hwH5PwaB7SuG6yb4pGXRPJVw32TcVg+6phesm+6Zm0D2NcN1k3zQMuqcVrpvsm5ZB93TCdZN90zHonl64brJvegbdMwjXTfbNwKB7RuG6yb4ZGXTPJFw32TcTg+6Zhesm+2Zm0D1EuG6ybwiD7qHCdZN9Qxl0zyJcN9k3C4PuWYXrJvtmZdA9m3DdZN9sDLqHCddN9g1j0D1cuG6ybziD7tmF6yb7ZmfQPYdw3WTfHAy65xSum+ybk0H3XMJ1k31zMeieW7husm9uBt3zCNdN9s3DoHte4brJvnkZdM8nXDfZNx+D7vkH4OZqMXN0J7QnG3o95gfuV9JeNYDRYDUAP68GbiCXbj1g9AKD5mV7KMnxMDYHTi59bdJG/cWc73l+Lh+WSzld9sJSsRZElXIt54e5qKyqvipGpVw575d9T4eVsq/CqJwrlKKyVy3qHNKX8om5zE+sqKCmygW/XKqaiVRVmYvQr9aKuXJY8VQu0lpXPfP/ctXIC8KoqMOi+emFUJv/zrbXubASFEsl819WotDzdCHIlaNQlzSJ92p+KR/qMG9MzZcKtVy15qnALIaRWTNLkA+rU8Z+OcYaekG5aqYN88V8NTTG1nKFYjkw/1WlWM0XvZDWt5DP1Ype3qxbTuW9cq3iFXwV5PyK500JXENP+KFE9nkM8VIQrpvsKzDoLgrXTfYVGXSXhOsm+0oMun3husk+n0F3IFw32Rcw6F5AuG6ybwEG3SOE6yb7RjDoXlC4brJvQQbdCwnXTfYtxKB7YeG6yb6FGXQvIlw32bcIg+5Fhev+j30MuhcTrpvsW4xB9+LCdZN9izPoXkK4brJvCQbdSwrXTfYtyaB7KeG6yb6lGHQvLVw32bc0g+5lhOsm+5Zh0L2scN1k37IMupcTrpvsW45B9/LCdZN9yzPoXkG4brJvBQbdKwrXTfatyKB7JUcf6q7E9FB35QGMBq/M8FB3FeEPdUn3KgNGLzBoXhZb6eFrniHIVs3ooW7aB51IX1ptAO5BqW2vda1WqZWiUrWWz+UqpVJYylcKhbBSMQ+sw1CbocgPzAKYUVUyPyVXKvp5P1+pqFAXo9p/HpiuYnmoq1WxVCgG5Zr5AWZNckrrfLVWM/rNfJFXLqpCWMiFxXxU9GtGlq6YFYgKpVzNqwY5nfOAa7i68EOJ7FudIV7WEK6b7FuDQfeawnWTfWsy6F5LuG6yby0G3WsL1032rc2gex3husm+dRh0rytcN9m3LoPu9YTrJvvWY9C9vnDdZN/6DLo3EK6b7NuAQfeGwnWTfRsy6N5IuG6ybyMG3RsL1032bcygexPhusm+TRh0bypcN9m3KYPusnDdZF+ZQXcoXDfZFzLorgjXTfZVGHRHwnWTfRGD7qpw3WRflUF3Tbhusq/GoHsz4brJvs0YdG8uXDfZtzmD7i2E6yb7tmDQvaWjDze3ZHq4udUARoO3Yni4ubXwh5uke+sBoxcYNC+LrfQQcjWGINsmo4ebaR/4IX1p2wG4B4bWvS7UVK0WlsrVSrVQzZd1MSx4uYJX9otVL/T9cqSivPmOaljLBdVcrlDS5gcVCvmSX6pUqv7qsV+O8YC4XMp71TDM54p5T1drZR2EKl/UUaDzqhJ5pTBXDEue75sHs1GuWK1WzGDNPLP1S2ZFdHl14BpuJ/xQIvu2Y4iX7YXrJvu2Z9C9g3DdZN8ODLp3FK6b7NuRQfdOwnWTfTsx6N5ZuG6yb2cG3bsI10327cKge1fhusm+XRl07yZcN9m3G4Pu3YXrJvt2Z9C9h3DdZN8eDLr3FK6b7NuTQfdewnWTfXsx6N5buG6yb28G3fsI10327cOge6Rw3WTfSAbd+wrXTfbty6B7P+G6yb79GHTvL1w32bc/g+4DhOsm+w5g0H2gcN1k34EMug8SrpvsO4hB98HCdZN9BzPoPsTRh3yHMD3kO3QAo8GHMjzkO0z4Qz7SfdiA0QsMmpfFVnoYty1DkB2e0UO+tA++kL50xADcgzPbXpsnlV45Vw4L5lu9WqGUN881tfkRqmYeZ5Ix+agQlQPlhfmiF9TCXCmsqHyo6OfVwnJpu9gvx1jDSlArh5WS7xWigjIyC7lqrqzyJV0xC6Jr2itUVRT6uapv5ARFXckVarqaN49MQ1qg7YBreKTwQ4nsO5IhXo4SrpvsO4pB99HCdZN9RzPoPka4brLvGAbdxwrXTfYdy6D7OOG6yb7jGHQfL1w32Xc8g+4ThOsm+05g0H2icN1k34kMuk8SrpvsO4lB98nCdZN9JzPoPkW4brLvFAbdpwrXTfadyqD7NOG6yb7TGHSfLlw32Xc6g+4zhOsm+85g0H2mcN1k35kMus8SrpvsO4tB99nCdZN9ZzPoPke4brLvHAbd5wrXTfady6D7POG6yb7zGHSf7+jDrvOZHnZdMIDR4AsYHnZdKPxhF+m+cMDoBQbNy2IrPZQ6giHILsroYVfaB0BIXxo1APcAybbXuWohX1Cq5hdLlcg8JfPooVnRK1QKhSgs5fKRNs/WcsovFKMwKpW0Xw28UPlmYUq1vHnCd2Tsl2M87MppVasW84Vy6FVKXmSewoWVWkmFlZx5epgPCkVfGatVLhdFQaBr5nFi5BVUsRya8UIQHQlcw4uFH0pk38UM8XKJcN1k3yUMui8Vrpvsu5RB92XCdZN9lzHovly4brLvcgbdVwjXTfZdwaD7SuG6yb4rGXRfJVw32XcVg+6rhesm+65m0H2NcN1k3zUMuq8Vrpvsu5ZB93XCdZN91zHovl64brLvegbdNwjXTfbdwKD7RuG6yb4bGXTfJFw32XcTg+6bhesm+25m0H2LcN1k3y0Mum8Vrpvsu5VB923CdZN9tzHovl24brLvdgbddzj60OcOpoc+dw5gNPhOhoc+dwl/6EO67xoweoFB87LYSg9nRjEE2d1ZPfRJ+SAE6Uv3DMA9SLHttTEi1LVcJVfL+xVjVbVcrpWKtVqtUFZR0SvlKzqoBF7ePFQq+15UCMwP1qV85EXVYhj63sWxXzauoS5HQa7mFc3kfhSUzUKWVaVqdIdV5ed0oVrRZV1TZqGDajUMzaOyYhRVC8VyTgdmHasXA9fwXuGHEtl3L0O83CdcN9l3H4Pu+4XrJvvuZ9D9gHDdZN8DDLofFK6b7HuQQfdDwnWTfQ8x6H5YuG6y72EG3Y8I1032PcKg+1Hhusm+Rxl0PyZcN9n3GIPux4XrJvseZ9D9hHDdZN8TDLqfFK6b7HuSQfdTwnWTfU8x6H5auG6y72kG3c8I1032PcOg+1nhusm+Zxl0PydcN9n3HIPu54XrJvueZ9D9gnDdZN8LDLpfdPThx4tMDz9eGsBo8EsMDz9eFv7wg3S/PGD0AoPmZbGVHlLcwxBkr2T08CPtAwGkL706APdAwbbXOlcqVrxaLp9XhUpeGZ25al6VS7Ww6hfCSFVq+Wo1F6lyrVDTeWOA1kEpUlEtbywpR7V7Y78cYw2jauQHvipXc2EU6bKXyxkLlZk08GsVv1LwawVVKJUq5UK5UKnmw1zFL/l+oVaJVFjI5e8FruFrwg8lsu81hnh5Xbhusu91Bt1vCNdN9r3BoPtN4brJvjcZdL8lXDfZ9xaD7reF6yb73mbQ/Y5w3WTfOwy63xWum+x7l0H3e8J1k33vMeh+X7husu99Bt0fCNdN9n3AoPtD4brJvg8ZdH8kXDfZ9xGD7o+F6yb7PmbQ/Ylw3WTfJwy6PxWum+z7lEH3Z8J1k32fMej+XLhusu9zBt1fCNdN9n3BoPtLRx8CfMn0EOCrAYwGf8XwEOBr4Q8BSPfXA0YvMGheFlvpZv2rDEH2TVYPAVLeGEf60rcDcDfWrXtdLpjnBpGOSrlcpVYpBvTXbcq1SokefBQKQSk0JpqfEkSVSj6sme8NzP9YLQeVipm8HL4W+2XjGuaKOleIylqVVTVSxXyuVFB+OSyrYqTNYubLlaIumuEorEZ5L6gV8kZNVA4K+Xy+5BdKrwHX8DvhhxLZ9x1DvHwvXDfZ9z2D7h+E6yb7fmDQ/aNw3WTfjwy6fxKum+z7iUH3z8J1k30/M+j+Rbhusu8XBt2/CtdN9v3KoPs34brJvt8YdP8uXDfZ9zuD7j+E6yb7/mDQ/adw3WTfnwy6/xKum+z7i0H338J1k31/M+j+R7husu8fBt39BsrWTfZRR+ueRLhusm8SBt2TCtdN9k3KoLv/QDdvhvcH7lfS3paBjAa3DMTP2wrcQC7drQNHLzBoXhZb6ab1twyHSRs4ufS1xhu5aW8QI32pfSDuBrN1r6sqXyx5VXPzvBAVolKxWInCnLn7X66ZxwBeqVaq6kCpYq1YzOWCQrFaqnhBRXt+taKCvFegm7ikd4yb4bmiMrI93/NCc3M+V9B+LsgX8kHRr3qBLpjnDLmC72k/Xyh5pby5ea8js7K1os7XipUw+g54M7xD+KFE9nUwHEqTCddN9k3GoHuAcN1k3wAG3QOF6yb7BjLo7hSum+zrZNDdJVw32dfFoLtbuG6yr5tBd49w3WRfD4PuXuG6yb5eBt2DhOsm+wYx6J5cuG6yb3IG3YOF6yb7BjPonkK4brJvCgbdUwrXTfZNyaB7KuG6yb6pGHRPLVw32Tc1g+5phOsm+6Zh0D2tozeFp2W6KTzdQEaDp2O4KTy98JvCpHt6R24K083bdoYgmyGrm8Ipb5QifWnGgbgbrba91kW/GOhKvlwsewUzUaHiVSvVsFwJK6VaWdWKuUq+UPOCovkfAnOv2dwDD/OFqjEjn8vXcrmO2C8b11AHUWSMrOXLfuQVK7pQUbpUrIVhIQwKVS+qFErK92s1Y5oX6TDyvUoxrJULpagSVcwGdADXcCbhhxLZNxNDvMwsXDfZNzOD7iHCdZN9Qxh0DxWum+wbyqB7FuG6yb5ZGHTPKlw32Tcrg+7ZhOsm+2Zj0D1MuG6ybxiD7uHCdZN9wxl0zy5cN9k3O4PuOYTrJvvmYNA9p3DdZN+cDLrnEq6b7JuLQffcwnWTfXMz6J5HuG6ybx4G3fMK1032zcugez5Hb47Ox3RzdP6BjAbPz3BzVAm/OUq6lSM3R+km5owMQaYzujma9oYh0pdyA3E3HG17rc1EOeWX8kHBfGOuaP7LWuhXa0G5lDM3f8tGkqqFQS2XNzpqfl5XzLcayTldUuWSjmaK/XKMNQxrfi4yi1aKSl6gzIoZ2yoVcyNZVYva3GQu6Fy1Uja3lguFnFbVXKlYNevhV6p+reBXCzMB1zAv/FAi+/IM8eIJ1032eQy6C8J1k30FBt1F4brJviKD7pJw3WRfiUG3L1w32ecz6A6E6yb7AgbdCwjXTfYtwKB7hHDdZN8IBt0LCtdN9i3IoHsh4brJvoUYdC8sXDfZtzCD7kWE6yb7FmHQvahw3f+xj0H3YsJ1k32LMehe3NGbhIsz3SRcYiCjwUsw3CRcUvhNQtK9pCM3CelmXo4hyJbK6iZhyhtnSF9aeiDuxpttr3O1UiEwM/qlci3MVb1CPiz4xZpv7oXWSmGhqnUx9P2cmdT3ajmdL+VKtWJQ07pgvrPihfnYLycdw4eq1TBXCQuBr6uRVyh6QTmshlFV+TqqmBuZxYpfVDqqenmvVC1FkS7m/LCci8rlipcPS3ngGi4j/FAi+5ZhiJdlhesm+5Zl0L2ccN1k33IMupcXrpvsW55B9wrCdZN9KzDoXlG4brJvRQbdKwnXTfatxKB7ZeG6yb6VGXSvIlw32bcKg+5Vhesm+1Zl0L2acN1k32oMulcXrpvsW51B9xrCdZN9azDoXlO4brJvTQbdazl6s2wtpptlaw9kNHhthptl6wi/WUa613HkZhnd1FqaIcjWzehmWdobSEhfWm8g7gaUda/znl/2Vd4vVWuVfOCHxYjeEazoUlDIVfwoV1RBWNVh3i/nI3MDMSiXo6ASFMs6CnRelZaJ/XKMNYx0WC4WjRTP2BZopUvm/2rlYlCt5MJIqVyubP4v8syqlZUKyvR72n4t8qq5YrVSC5cBruH6wg8lsm99hnjZQLhusm8DBt0bCtdN9m3IoHsj4brJvo0YdG8sXDfZtzGD7k2E6yb7NmHQvalw3WTfpgy6y8J1k31lBt2hcN1kX8iguyJcN9lXYdAdCddN9kUMuqvCdZN9VQbdNeG6yb4ag+7NHL1ptBnTTaPNBzIavDnDTaMthN80It1bOHLTiG7urMcQZFtmdNMo7Y0UpC9tNRB3I8a617lKVPNzWucLpTAs+0FgkmS+Vi3ly565ZeaVjMhyUCwpc6eqUqDLfKmWj7Rf9fOBLkXrx3455k2joFgoFnQlioKq52td86oFHfoqiipls7qhZ6yrVnXJy6lyuVosmztbpgzJFXWpUqz6hfWBa7i18EOJ7NuaIV62Ea6b7NuGQfe2wnWTfdsy6N5OuG6ybzsG3dsL1032bc+gewfhusm+HRh07yhcN9m3I4PunYTrJvt2YtC9s3DdZN/ODLp3Ea6b7NuFQfeuwnWTfbsy6N5NuG6ybzcG3bs7evNkd6abJ3sMZDR4D4abJ3sKv3lCuvd05OYJ3eTYiiHI9srq5knKGwpIX9p7IO6GhG2vc7WaV87ngpxfKdV0pRT6+VyhXK0qv1Kt6aouFHSp5hUL1dB8MRJqQT4yd2aKBc+jP4mb2zr2yzHWUBVr5dAzeouBMSVHDyqq5Ypf8sNcsVgKo7wOa/lqzq/mze2eUtErl+mboyAMI/O/1d3wSLuG+wg/lMi+fRjiZaRw3WTfSAbd+wrXTfbty6B7P+G6yb79GHTvL1w32bc/g+4DhOsm+w5g0H2gcN1k34EMug8SrpvsO4hB98HCdZN9BzPoPkS4brLvEAbdhwrXTfYdyqD7MEdvIhzGdBPh8IGMBh/OcBPhCOE3EUj3EY7cRCDY35shyI7M6CZCWrBG+tJRA3FgbtvrXCmfK/lRReXN7YaaLofFUq5U8HK+lysa5flQe7lS1deqHBYiL/JzpaDsq5yu1sIoF1b8fWK/HOMmQpCnP1FYjKq5WqRVzZgaRaqUr5mVClQ5KBVruhhUzBeVN/YFuuKVSoWS0eTlIi9f3ge4hkcLP5TIvqMZ4uUY4brJvmMYdB8rXDfZdyyD7uOE6yb7jmPQfbxw3WTf8Qy6TxCum+w7gUH3icJ1k30nMug+Sbhusu8kBt0nC9dN9p3MoPsU4brJvlMYdJ/qKEyfygTTpw1kNPg0Bpg+XThMk+7THYFpgt6jGILsjKxgOiVgIn3pzIE4QLXtdc7guParVa9UrARhrao8+utUUTWqeGGtXA2LtZKRZEi8kPNKtUqxlI9KQSUol4JiIdK5/4Dq6TaYzpXK+YLvBUHFCM6FoWdGalGpXMgXClFJh35F5yq6VPICr6Yq5UipcsGvGQ1BOVet5o4GruFZwg8lsu8shng5W7husu9sBt3nCNdN9p3DoPtc4brJvnMZdJ8nXDfZdx6D7vOF6yb7zmfQfYFw3WTfBQy6LxSum+y7kEH3RcJ1k30XMege5ShUjmKCyosHMhp8MQNUXiIcKkn3JY5AJcHfmQxBdmlWUJkStJC+dNlAHKjZ9joXGPO9UJe0DmoV+qMmgfYD3/y3taBaLAXVqlFV9UuRqhYDv1rM66pfqIW5fD7SZUOvZ8V+OQZUFg33BsYYpUtlL6eqYVgNK8Zm5ZdKuprP0ydXBhVV9iPzMLkcal0LgkJVm++pFgKdOwu4hpcLP5TIvssZ4uUK4brJvisYdF8pXDfZdyWD7quE6yb7rmLQfbVw3WTf1Qy6rxGum+y7hkH3tcJ1k33XMui+Trhusu86Bt3XOwpX1zPB1Q0DGQ2+gQGubhQOV6T7RkfgiiDoMoYguykruEoJHEhfunkgDlhse53TXrGoC/lq2SuXVCUK/UBpw4nlfLVY0NWSp1Q+rKpiKfKMbToMy2XzFLCWK/u1atnPe5fHfjkGXNW0oVHzELNoxNcKYc0sZK6iqlEUhGa2QtXPq1zZ07VKyTfGFvwgXy7Vytoz4gqlSvVy4BreIvxQIvtuYYiXW4XrJvtuZdB9m3DdZN9tDLpvF66b7LudQfcdwnWTfXcw6L5TuG6y704G3XcJ10323cWg+25HIeNuJsi4ZyCjwfcwQMa9wiGDdN/rCGQQDNzMEGT3ZQUZKQtvpC/dPxBXuNv2OueHeT/QOh/qSFdyXqVUKecKxbCa88zTn3KlUjTqCjVP54p+qVpUpdCrBvTkKCyU6U/U3xL75RiQUQpVpVA00KU931PmiZJfzCmvHNTyxVrNmKtLgZcreMZsVcvlVcUYW9SBLpkfWyqXircA1/AB4YcS2fcAQ7w8KFw32fcgg+6HhOsm+x5i0P2wcN1k38MMuh8Rrpvse4RB96PCdZN9jzLofszRYvsxpmL78YGMBj/OUGw/IbzYJt1POFJsU1F8P0OQPZlVsZ2yAEX60lMDcQWsba91UIq0KhXyhiCCovmHbybzdBAEOd9U6ZEqF/0gV81XcpVSzjNPEopRvmyeZuQLxVy1VPtPofiEpdjWBgjyUS0q0ydpBIGOaoVK1TyOMM8+AqNR6agSFgpFLyzWaIGDwDweMVBQCctBZJZGPwBcw6eFH0pk39MM8fKMcN1k3zMMup8Vrpvse5ZB93PCdZN9zzHofl64brLveQbdLzhadL7AVHS+OJDR4BcZis6XhBedpPslR4pOKg6fYgiylzMqOtMWYkhfemUgrpCz7bWueJW8KalN+RoEqmDuHqt8seypfMkMl4vlqvYjHeW8Qi4yE0emzPYqtbJfjaolVYsq/tOxX46xhp75iZ4XFULlq1qlTLV7FJaKXhAa+419xXKxEua8XLGaz3lhNQoDz9TNBa39msrly08D1/BV4YcS2fcqQ7y8Jlw32fcag+7Xhesm+15n0P2GcN1k3xsMut90tPh6k6n4emsgo8FvMRRfbwsvvkj3244UX1QkvcIQZO9kVXylLEiQvvTuQFxBY9vrXDGo6bBcMfcSi+Z2YimnIz9XKAd5ehe4YO58VnSo87lKrZgzdzNLdJ/R3GL0VOh55WqUz70a++UYj9eDSsH8Z0WjPwzyEb0W7eeUirxSRYW5chBUzCLSH/HJ+9WqubOar1Yjz/wn+TAs6FxUVzClXcP3hB9KZN97DPHyvnDdZN/7DLo/EK6b7PuAQfeHjhYhHzIVIR8NZDT4I4Yi5GPhRQjp/tiRIoSKhXcZguyTrB47pjyYkb706UDcwW7da3MXyehTlXKxUFWmbAnNzy+WVLViqi5zs8uvVgrVSrFUzBXLJa9m7nxVKtWwYv6DmrG4Vnov9ssx1lArP2ee1mpTFoU1r6orxapZJnOrKooKyq8EQTGqmZ9lnolWa2Hgh1oXjD5TPpkFK6rwPeAafib8UCL7PmOIl8+F6yb7PmfQ/YWjh/EXTIfxlwMZDf6S4TD+SvhhTLq/cuQwpkPzU4Yg+zqjwzjtAYX0pW8G4g44614X8ioyP1f7JXPrQNHMXrnkF6vlSBeDXDEqRDSdsbacKxb9YrlW8DzfM0+jvFxZ+7nPYr8c4zAO8/lSZEw0lYtXy+WqFSOwmqsFZoaqebpVyBVzpXyxWPN1SZWVqWV8c1fDK5s6JypU/boDNO0afiv8UCL7vmWIl+8cPZS+YzqUvh/IaPD3DIfSD8IPJdL9gyOHEh0e3zAE2Y9ZHUopEzXSl34aiEv047PXYb7iRaUg8nQ50KWCXwm9oJIv6FLFHGteuZAzJ29N5/JF5dcqQaXybeyXk45jr5Xnh8WqNsIi39NmCSrVcs6rFWuRsTisVnJ5nVNeycxaMs8E8sVvgWv4s6PJ+Wem5PzLQEaDf2FIzr8KT86k+1dHkjMl0Z8YkvNvWSXnhjahCQvpS78PxCU8214j9uR3hr3+I/ns1M/nzKlD3+dHSntRJefnclHoKXM7tZKrBp4Oal7Oy1eiSmjmLOuaqpUrQc3/d64sE+ofTAn1z4GMBv/JkFD/Ep5QSfdfDAmVnK293+ikYmt9PyutY3OsS19Ao9cl6cx/J/wNnjn+wkWgJtv6xzb2Gd0Sb25SkCubkHTKf/rm7zT2c2zC3wxZ5W/mmz8o3eMqKSaw1elOa+MknbLLR3JMshG9N5N2YrNZX2KgefeL50WvxX+Ck2Et+jOtRX/GteAqNVs6ZecU2v9JGXzgpMH/V3VXxmGfJt39GXSfPFh2/iPd5JPoMwS43xq5hlRQUf4Yn4p5XHONy6eSc6L3DX2+9LXWzrFUyypd05MwHQRJoyfQZj3On9NZP3/fvKn//DI4MfS1lgncswkp4NJqbuuUmWCQe5H0y7ZEgTKx+zOuNUfuT3tiLp3Pm9iISroW1fKFUpALdZGexXi1UtH3IvOIqByVqtor53MB/ToD/aGoUiFPf8o3iCrFWjJp6yif96IgrGjzSKccKj/Kl1XNK+VzqhyZR0BR3i8Wy/l8VPRrfmDuSpRreV8VSqVAFXP5IMe1P+2W/ZnQg3Bct02Q+9PBlD87AOswrttLyHWYjGkdJhsLUCAK6w6Gc+Q0BwrryRh0n850fvZvsDPtbVNgzaOBe61P/19R3dh0B1NRPcDFonoAc1E9gCEpnPH/YVE9UGiCOYOpaBvoWFHdCSyqTwcW1Vz70xnvz9gOBcl3Qzjt5Dpgulw8YLqYD5guhgPmTKYDphVsJzKBdQPnQt61QR5WZzIlw+7xOKzSrmlPJ+5QqLtrI+iw4tqfnhSPEMdFfn2P5/tP2H5XxjHvhLzsNM65kI/6eztxa5fco94UezQuep/IPYpMYOiKVjUVGAdWpUqxFAZRLvSN29YK+Sg/IS+kjWsu5B4N6sStXXKPBlnyXP8J3KtxmTMB/jXO+mAQ8EybXPgrLhPr4xPy7lvauZA+PhgIxDRH453wtHcE+/YD6X+DO+F21p0zaef6G/yG9f8Ldxt7mWBwCk4YHMwEg1OMBQYRhclgBhg85//uuz3jPORI8xQMus915C7rYOAhPyXwUAH6jT6XCYymZHwUOogpHs8T4pfj0oH0y6mA8A/0JX0ek19Olbi7PGm/bH7NCvnObrJombrz36/TuHJgc9k3NUMymJapUJk2xd0INR5rMQ3DWkzHtBbTMR4StBbTMqzFBcLflyHd0zHovlD4i+gtTShWpWsauN/6wv+9M9PYNDrP9rXpXaTY6RkfaZLN0zMkhov+P6S5GTplJpiLmKrmGTJ4Zwa5PzMC35m5EPgYkmt/Zvy/8M5MbydP3LtywMzk4gEzE/MBMxPDATPKkXdmkAlsZuBcyNuFyMNqFFMynDmDd2aGAPfnvMEyDyuu/RmSOKyy+qSj5C24tM8ik/YO7WQ0eCjDQ9mhwMp1FmAQcK3hLJYDKe0azuLALVGyEf3CBvKAQ/rOrOAXNvrapOD1awFqno3ZBxG+YvNBla4hC2No/hoG3g/0bUzyPaCNmmJuNoZifzgYfDr6jfZB+vdw0//uu+789xq4zv/5mZMmft5FHaN/3qj4enbzc+cwfc6+4iHx/ci1nAu2lvki2TZ5v9GFNP17rs7R2mZPXM+RuJ68/7/Xff/d3OZ/m8f0eU2fr3P0ONcazI9bg5JtDeafiDVQ5n/TpudMz8drQL2n32hfHduaqHRNz81056Yf1M4c39x69J2c/wBJfO2ZdSmYXjS9ZLpvemD6AqaPMH1B0xcyfWHTF6E1NH0x0xc3fQnTlzR9KdOXNn0Z05c1fTnTlzd9BdNXNH0l01c2fRXTVzV9NdNXN32NztiYPkoiYzoaxgqWsaJlrGQZ8y1jgWVsAcvYCMvYgpaxhSxjC1vGFrGMLWoZW8wytrhlbAnL2JKWsaUsY0tbxpaxjC1rGVvOMra8ZWwFy9iKlrGVLGMrW8ZWsYytahlbzTK2umVsjXgs2YbGXxeNv6p0rS7ppE3qHmCuao2a0gXQXKSxCJnr3/UqpZ8r1/f81k87lzf6WXCQbi6VfK68QJq5cvXPqEdM/Fyq8Xn3ghM5l7kJN8az84Umbi7f9hx+4YmZy7c/019kwucqNXs/YNEJnavU/F2DxSZsrtzY3ltYfELmKo39HYglxn+ucb6js+T4zlUaZy7US43fXGo88qpeenzmUuOVo/Uy456rMJ75Xi87rrm88T479HJjnYv+ptn4z7X82OYqTdCZpldoPpc/geejXrHJXEFtgs9avZJ9LjUR57Ze2TaXmqgaQK8y5lx6IusJvWrjXNFE1yZ6tfq58inqHL16Yq5cLVXNpNcAQl+WT27WgNV6Ud2TmzU7GQ2myVF3j/uMXxO3gXotYDHOtYZrAe8u9q3hWuAg6O2Xzbs2uOCNWO+qJNdi7TjA1mm8s7F2vLHJsXUsBIp+dIDLJEqvDQygdcCbi3Y+Cpq1gcHYp3ttR0+k1WF+FERJe9ftZDR4XfiJFETrAk+k9YSfSLSG68FPpCBaz9ETaXWY3UHFYi7LibR+HGAbNJ5I61tOpA0yOJFWB55I6wMDaAOmzUW/UIHUvCEwmfXrhz8t14oTEPrFACQKbARMZrY1VOmapj3eiKGS2cjRSmY1WP4J80l7N+5kNHhjeCUT5jcGBv8mwisZWsNN4JVMmN+EOfgRCXQj4Ql0U/Aa9jX0wYv08TIw9rKsgFeD2R3mLOayVMBhnJgrjRVwaKmAKxlUwLgTSOkQ6JQVps1FByJSc8RcAat0TVNyLDNUb1XhVSvtS9UB3Vw+XgX6eE24jzcrUhDFD2quzcAHdla0syrsrPFrSXs372Q0eHM47fi1zYEbuIVw2qE13AJOO35tC+G0Q4lus07ZyXhLcDLua2jNSB/fylHaWRVmt1+1mMtCO1vHiXmbRtrZ2kI722RAO7gTSOmtgU65DdPmogMRqXlb4ZUgJcetGKr+7YTTDu3Ldg7o5vLx7YA+vr1wH29WpKh0TSOLlB0cfbazCuysydV97NGOnYwG7winnZzaERgEOwmnHVrDneC0k1M7CacdSnQ7dMpOxjs7QjtIH9/FUdpZBWa3rlnMZaGdXePEvFsj7exqoZ3dMqAd3Amk9K5Ap9yNaXPRgYjUvLvwSpCS4y4MVf8ewmmH9mUPB3Rz+fgeQB/fU7iPNytSVLqmkUXKXo7Szsqwsyaqo529OxkN3htOO5HaGxgE+winHVrDfeC0E6l9hNMOJbq9OmUn45GO0A7Sx/d1lHZWhtldyYx29osT8/6NtLOfhXb2z4B2cCeQ0vsBnXJ/ps1FByJS8wHCK0FKjvsyVP0HCqcd2pcDHdDN5eMHAn38IOE+3qxIUemaRhYpBztKOyvBzppi3WdiHNLJaPAhcNop6kOAQXCocNqhNTwUTjvFOt0qZbPpRiS6gztlJ+PDHKEdpI8f7ijtrASzu5jZZ6kcESfmIxtp5wgL7RyZAe3gTiCljwA65ZFMm4sORKTmo4RXgpQcD2eo+o8WTju0L0c7oJvLx48G+vgxwn28WZGi0jWNLFKOdZR2VsQ92/GT9h7XyWjwcfhnO/5xwCA4Xjjt0Boej3+24x8vnHYo0R3bKTsZn+AI7SB9/ERHaWdFmN1RyWIuC+2cFCfmkxtp5yQL7ZycAe3gTiClTwI65clMm4sORKTmU4RXgpQcT2So+k8VTju0L6c6oJvLx08F+vhpwn28WZGi0jWNLFJOd5R2VoCdNV6QtPeMTkaDz4DTjhecAQyCM4XTDq3hmXDa8YIzhdMOJbrTO2Un47McoR2kj5/tKO2sALPb8y3mstDOOXFiPreRds6x0M65GdAO7gRS+hygU57LtLnoQERqPk94JUjJ8WyGqv984bRD+3K+A7q5fPx8oI9fINzHmxUpKl3TyCLlQkdpZ3nYWRPWvcl2USejwRfBaSfUFwGDYJRw2qE1HAWnnbBOt0rZbLoRie7CTtnJ+GJHaAfp45c4SjvLw+wOM3uT7dI4MV/WSDuXWmjnsgxoB3cCKX0p0CkvY9pcdCAiNV8uvBKk5HgJQ9V/hXDaoX25wgHdXD5+BdDHrxTu482KFJWuaWSRcpWjtLMcjnYqSXuv7mQ0+Go87VSuBgbBNcJph9bwGjztVK4RTjuU6K7qlJ2Mr3WEdpA+fp2jtLMcriAOLeay0M71cWK+oZF2rrfQzg0Z0A7uBFL6eqBT3sC0uehARGq+UXglSMnxOoaq/ybhtEP7cpMDurl8/Cagj98s3MebFSkqXdPIIuUWR2lnWdybbGHS3ls7GQ2+Ff8mW3grMAhuE047tIa34d9kC28TTjuU6G7plJ2Mb3eEdpA+foejtLMs7mWnssVcFtq5M07MdzXSzp0W2rkrA9rBnUBK3wl0yruYNhcdiEjNdwuvBCk53sFQ9d8jnHZoX+5xQDeXj98D9PF7hft4syJFpWsaWaTc5yjtLAM7a/y6T6C+v5PR4PvhtOOr+4FB8IBw2qE1fABOO756QDjtUKK7r1N2Mn7QEdpB+vhDjtLOMjC7S5l9AvXDcWJ+pJF2HrbQziMZ0A7uBFL6YaBTPsK0uehARGp+VHglSMnxIYaq/zHhtEP78pgDurl8/DGgjz8u3MebFSkqXdPIIuUJR2lnaSbaebKT0eAnGWjnSWAQPCWcdmgNn2KgnaeE0w4luic6ZSfjpx2hHaSPP+Mo7SztIO08Gyfm5xpp51kL7TyXAe3gTiClnwU65XOO0A5S8/PCK0FKjs8wVP0vCKcd2pcXHNDN5eMvAH38ReE+3qxIUemaRhYpLzlKO0vBzppy3WeyvdzJaPDLcNopBy8Dg+AV4bRDa/gKnHbKwSvCaYcS3UudspPxq47QDtLHX3OUdpaC2V3O7DPZXo8T8xuNtPO6hXbeyIB2cCeQ0q8DnfINps1FByJS85vCK0FKjq8xVP1vCacd2pe3HNDN5eNvAX38beE+3qxIUemaRhYp7zhKO0viaMdL2vtuJ6PB7+Jpx3sXGATvCacdWsP38LTjvSecdijRvdMpOxm/7wjtIH38A0dpZ0lcQZy3mMtCOx/GifmjRtr50EI7H2VAO7gTSOkPgU75EdPmogMRqflj4ZUgJccPGKr+T4TTDu3LJw7o5vLxT4A+/qlwH29WpKh0TSOLlM8cpZ0lYGdNVPds5/NORoM/h9NOFHwODIIvhNMOreEXcNqJgi+E0w4lus86ZSfjLx2hHaSPf+Uo7SwBszvK7NnO13Fi/qaRdr620M43GdAO7gRS+mugU37DtLnoQERq/lZ4JUjJ8SuGqv874bRD+/KdA7q5fPw7oI9/L9zHmxUpKl3TyCLlB0dpZ3HYWVOpJu39sZPR4B/htFOp/ggMgp+E0w6t4U9w2qlUfxJOO5TofuiUnYx/doR2kD7+i6O0szjM7kpkMZeFdn6NE/NvjbTzq4V2fsuAdnAnkNK/Ap3yN6bNRQciUvPvwitBSo6/MFT9fwinHdqXPxzQzeXjfwB9/E/hPt6sSFHpmkYWKX85SjuLwc4aXfds5+9ORoP/htOODv4GBsE/wmmH1vAfOO3o4B/htEOJ7q9O2cm4X5cbtIP08UmAmrOkncVg/q4ze7Yzade/X/t39asnG/ofGmmHvombdnAnkNKTduGcsn8Xz+aiAxGpuQWcfNABR8lxki78wdDaxXtwqXRN0760OqCby8dbgT7eJtzHmxUpKl3TyCKlHeg3WdLOorCzJqyjnY4uRoNpcizthEEHMAgmAwYn1xpO1oWmnTCYjPnQQCS69i7ZyXiAI7SD9PGBjtLOojDaCTOjnc44MXc10k6nhXa6MqCdRYG00wl0yq4uns1FByJSc7fwSpCS40CGqr9HOO3QvvQ4oJvLx3uAPt4r3MebFSkqXdPIImWQo7SzCOys8f2kvZN3MRo8OZx2fH9yYBAMFk47tIaD4bTj+4OF0w4lukFdspPxFI7QDtLHp3SUdhaB0Y5fspjLQjtTxYl56kbamcpCO1NnQDuLAGlnKqBTTt3Fs7noQERqnkZ4JUjJcUqGqn9a4bRD+zKtA7q5fHxaoI9PJ9zHmxUpKl3TyCJlekdpZ2HYWePV0c4MXYwGzwCnHc+fARgEMwqnHVrDGeG04/kzCqcdSnTTd8lOxjM5QjtIH5/ZUdpZGEY7Xma0MyROzEMbaWeIhXaGZkA7CwNpZwjQKYd28WwuOhCRmmcRXglScpyZoeqfVTjt0L7M6oBuLh+fFejjswn38WZFikrXNLJIGeYo7SwEO2sCnbR3eBejwcPhtBPo4cAgmF047dAazg6nnaBOt0rZbLoRiW5Yl+xkPIcjtIP08TkdpZ2FYLQTKIu5LLQzV5yY526knbkstDN3BrSzEJB25gI65dxdPJuLDkSk5nmEV4KUHOdkqPrnFU47tC/zOqCby8fnBfr4fMJ9vFmRotI1jSxS5neUdhaEnTUllbRXdTEarOC0U1IKGARaOO3QGmo47ZSUFk47lOjm75KdjHOO0A7Sx/OO0s6CMNop1izmstCOFyfmQiPteBbaKWRAOwsCaccDOmWhi2dz0YGI1FwUXglScswzVP0l4bRD+1JyQDeXj5eAPu4L9/FmRYpK1zSySAkcpZ0RuE8pqPsE6gW6GA1eAE47YXUBYBCMEE47tIYj4LQTVkcIpx1KdEGX7GS8oCO0g/TxhRylnRG4TynI7BOoF44T8yKNtLOwhXYWyYB2RgBpZ2GgUy7SxbO56EBEal5UeCVIyXEhhqp/MeG0Q/uymAO6uXx8MaCPLy7cx5sVKSpd08giZQlHaWcB2FmTq3u2s2QXo8FLwmknp5YEBsFSwmmH1nApOO3k1FLCaYcS3RJdspPx0o7QDtLHl3GUdhbAfQJ1Zs92lo0T83KNtLOshXaWy4B2FgDSzrJAp1yui2dz0YGI1Ly88EqQkuMyDFX/CsJph/ZlBQd0c/n4CkAfX1G4jzcrUlS6ppFFykqO0k6AO2sqSXtX7mI0eGU47ajKysAgWEU47dAargKnHVVZRTjtUKJbqUt2Ml7VEdpB+vhqjtJOgPv7UqHFXBbaWT1OzGs00s7qFtpZIwPaAZ5AenWgU67RxbO56EBEal5TeCVIyXE1hqp/LeG0Q/uylgO6uXx8LaCPry3cx5sVKSpd08giZR1HaceHnTXFujfZ1u1iNHhdOO0Uq+sCg2A94bRDa7genHaK1fWE0w4lunW6ZCfj9R2hHaSPb+Ao7fi439vJ7E22DePEvFEj7WxooZ2NMqAdH0g7GwKdcqMuns1FByJS88bCK0FKjhswVP2bCKcd2pdNHNDN5eObAH18U+E+3qxIUemaRhYpZUdppwQ7a3TdZ7KFXYwGh3Da0ToEBkFFOO3QGlbgtKPrdKuUzaYbkejKXbKTceQI7SB9vOoo7ZRwb7Jl9plstTgxb9ZIOzUL7WyWAe2UgLRTAzrlZl08m4sORKTmzYVXgpQcqwxV/xbCaYf2ZQsHdHP5+BZAH99SuI83K1JUuqaRRcpWjtJOEfcyRt3v7WzdxWjw1l34ebcRTiike5uu0QsMmpeFKiihbNUlO+lt6whVIP1yO+ZEj9iT7Rh8PMuEWmBKqNt3MRq8PUNC3UF4QiXdO2SUUFW6pikwdujiCTiU7iyDzOvErUHS3h27GA3ekeFE3BGY0XcSHrC0hjsxBMFOwu/RUpDuxIA/2wL3e2fhtwvId3ZmSvZ9DR3bOwP3ZxfhiN+MGFS6ppHEsKtwH6c93pWhkEP6IRUJPf1G3zJPNrTdqpMnzvtB7cyxPueYJLG2Q+Lr3cx+7m76Hqbvafpepu9t+j6mjzR9X9P3M31/0w8w/UDTDzL9YNMPMf1Q0w8z/XDTjzD9SNOPMv1o048x/VjTjzP9eNNPMP1E008y/WTTT2l8xrJb/DwlOba7ZWwPy9ielrG9LGN7W8b2sYyNtIztaxnbzzK2v2XsAMvYgZaxgyxjB1vGDrGMHWoZO8wydrhl7AjL2JGWsaMsY0dbxo6xjB1rGTvOMna8ZewEy9iJlrGTLGMnW8ZO6Rrz2d3Q+Oui8VeVrtUlnbTJcjdA4u17Drg7aC7SuAdkrn/Xa8/0c+Xi9dJ7pZ3L++/a673TzaUS+6j3STNXrs4n9MiJn0s1+JfedyLnKtbG8FW938TN5Vv8Xu8/MXP51hjSB0z4XKUm8agPnNC5Sk1jWx80YXPlxpIn9METMldprDlHHzL+c1XGkb/0oeM7V2mcuVAfNn5zqfHIq/rw8ZlLjVeO1keMe67CeOZ7feS45vLG++zQR411Lq82AeeQPnpsc5Um6EzTxzSfy5/A81Ef22SuoDbBZ60+zj6XmohzWx9vm0tNVA2gTxhzLj2R9YQ+sXGuaKJrE31S/Vz5FHWOPjkxV66WqmbSpzh6R/sUWK0X1b11fGoXo8GndqHfOo70qbgN1KcBFpXzjjat4WnAO9p9a3gaOAiyensUF7xRZm+Pnh4H2BmNdzZO7xrz7dEzuvjfHsVlEqVPBwbQGeDNRTsfBc3pwGDs0326oyfSyTA/CqKkvWd2MRp8JvxECqIzgSfSWcJPJFrDs+AnUhCd5eiJdDLM7qBiMZflRDo7DrBzGk+ksy0n0jkZnEgnA0+ks4EBdA7T5qIfBCM1nwtMZv364U/L0+IEhH4QjESB84DJzLaGKl3TtMfnMVQy5zlayZwEyz9hPmnv+V2MBp8Pr2TC/PnA4L9AeCVDa3gBvJIJ8xcwBz8igZ4nPIFeCF7DvoY+eJE+fhEw9rKsgE+C2R3mLOayVMCj4sR8cWMFPMpSAV+cQQWMO4GUHgV0youZNhcdiEjNlzBXwCpd05QcL2Ko3i4VXrXSvlzqgG4uH78U6OOXCffxZkUKovhBzXU5+MDOinZOhJ01fi1p7xVdjAZfAacdv3YFcAOvFE47tIZXwmnHr10pnHYo0V3eJTsZXwVOxn0NrRnp41c7Sjsnwuz2qxZzWWjnmjgxX9tIO9dYaOfaDGgHdwIpfQ3QKa9l2lx0ICI1Xye8EqTkeDVD1X+9cNqhfbneAd1cPn490MdvEO7jzYoUla5pZJFyo6PPdk6AnTX1f3f8pi5Gg2+C005O3QQMgpuF0w6t4c1w2smpm4XTDiW6G7tkJ+NbHKEdpI/f6ijtnACzO7u/O35bnJhvb6Sd2yy0c3sGtIM7gZS+DeiUtzNtLjoQkZrvEF4JUnK8laHqv1M47dC+3OmAbi4fvxPo43cJ9/FmRYpK1zSySLnbUdo5HnbWRHW0c08Xo8H3wGknUvcAg+Be4bRDa3gvnHYida9w2qFEd3eX7GR8nyO0g/Tx+x2lneNhdlcyo50H4sT8YCPtPGChnQczoB3cCaT0A0CnfJBpc9GBiNT8kPBKkJLj/QxV/8PCaYf25WEHdHP5+MNAH39EuI83K1JUuqaRRcqjjtLOcbCzplj3mRiPdTEa/Bicdor6MWAQPC6cdmgNH4fTTrFOt0rZbLoRie7RLtnJ+AlHaAfp4086SjvHwewuZvZZKk/FifnpRtp5ykI7T2dAO7gTSOmngE75NNPmogMRqfkZ4ZUgJccnGar+Z4XTDu3Lsw7o5vLxZ4E+/pxwH29WpKh0TSOLlOcdpZ1jcc92/KS9L3QxGvwC/tmO/wIwCF4UTju0hi/in+34LwqnHUp0z3fJTsYvOUI7SB9/2VHaORZmd1SymMtCO6/EifnVRtp5xUI7r2ZAO7gTSOlXgE75KtPmogMRqfk14ZUgJceXGar+14XTDu3L6w7o5vLx14E+/oZwH29WpKh0TSOLlDcdpZ1jYGeNFyTtfauL0eC34LTjBW8Bg+Bt4bRDa/g2nHa84G3htEOJ7s0u2cn4HUdoB+nj7zpKO8fA7PZ8i7kstPNenJjfb6Sd9yy0834GtIM7gZR+D+iU7zNtLjoQkZo/EF4JUnJ8l6Hq/1A47dC+fOiAbi4f/xDo4x8J9/FmRYpK1zSySPnYUdo5GnbWhHVvsn3SxWjwJ3DaCfUnwCD4VDjt0Bp+CqedsE63StlsuhGJ7uMu2cn4M0doB+njnztKO0fD7A4ze5Ptizgxf9lIO19YaOfLDGgHdwIp/QXQKb9k2lx0ICI1fyW8EqTk+DlD1f+1cNqhffnaAd1cPv410Me/Ee7jzYoUla5pZJHyraO0cxSOdipJe7/rYjT4OzztVL4DBsH3wmmH1vB7PO1UvhdOO5Tovu2SnYx/cIR2kD7+o6O0cxSuIA4t5rLQzk9xYv65kXZ+stDOzxnQDu4EUvonoFP+zLS56EBEav5FeCVIyfFHhqr/V+G0Q/vyqwO6uXz8V6CP/ybcx5sVKSpd08gi5XdHaedI3JtsYdLeP7oYDf4D/yZb+AcwCP4UTju0hn/i32QL/xROO5Tofu+SnYz/coR2kD7+t6O0cyTuZaeyxVwW2vmnLzH3nTB9ZPOPhXbom7hpB3cCKf0PMvF282wuOhCRmifpxiYfdMBRcvyboeqftJv34FLpmqZ9IRul6+by8aSdaefqL9zHmxUpKl3TyCKlBeg3WdLOEbCzxq/7BOrWbkaDaXIs7fiqFRgEbcDg5FrDtm407fiqjfnQQCS6lm7ZybgdnIz7Gloz0sc7gJqzpJ0jYLRTyuwTqCeLE/OARtqZrHtM2hmQAe0cAaSdyYBOOaCbZ3PRgYjUPFB4JUjJsYOh6u8UTju0L50O6Oby8U6gj3cJ9/FmRYpK1zSySOl2lHYOZ6Kdnm5Gg3sYaKcHGAS9wmmH1rCXgXZ6hdMOJbrubtnJeJAjtIP08ckdpZ3DHaSdwXFinqKRdgZbaGeKDGjncCDtDAY65RSO0A5S85TCK0FKjpMzVP1TCacd2pepHNDN5eNTAX18auE+3qxIUemaRhYp0zhKO4fBzppy3WeyTdvNaPC0cNopB9MCg2A64bRDazgdnHbKwXTCaYcS3TTdspPx9I7QDtLHZ3CUdg6D0U45s89kmzFOzDM10s6MFtqZKQPaOQxIOzMCnXKmbp7NRQciUvPMwitBSo4zMFT9Q4TTDu3LEAd0c/n4EKCPDxXu482KFJWuaWSRMoujtHMojna8pL2zdjMaPCuedrxZgUEwm3DaoTWcDU873mzCaYcS3SzdspPxMEdoB+njwx2lnUNxtJO3mMtCO7PHiXmORtqZ3UI7c2RAO4cCaWd2oFPO0c2zuehARGqeU3glSMlxOEPVP5dw2qF9mcsB3Vw+PhfQx+cW7uPNihSVrmlkkTKPo7RzCOysieqe7czbzWjwvHDaiYJ5gUEwn3DaoTWcD047UTCfcNqhRDdPt+xkPL8jtIP0ceUo7RwCo50os2c7Ok7MuUba0RbayWVAO4cAaUcDnTLXzbO56EBEas4LrwQpOSqGqt8TTju0L54Durl83AP6eEG4jzcrUlS6ppFFStFR2jkYdtZUqkl7S92MBpfgtFOploBB4AunHVpDH047laovnHYo0RW7ZSfjwBHaQfr4Ao7SzsEw2qlEFnNZaGdEnJgXbKSdERbaWTAD2jkYSDsjgE65YDfP5qIDEal5IeGVICXHBRiq/oWF0w7ty8IO6Oby8YWBPr6IcB9vVqSodE0ji5RFHaWdg2Bnja57trNYN6PBi8FpRweLAYNgceG0Q2u4OJx2dLC4cNr5T6Lrlp2Ml3CEdpA+vqSjtHMQjHZ0Zs92looT89KNtLOUhXaWzoB2DgLSzlJAp1y6m2dz0YGI1LyM8EqQkuOSDFX/ssJph/ZlWQd0c/n4skAfX064jzcrUlS6ppFFyvKO0s6BuL8uWkc7K3QzGrwCnHbCYAVgEKwonHZoDVeE004YrCicdijRLd8tOxmv5AjtIH18ZUdp50DcH6DMjHZWiRPzqo20s4qFdlbNgHYOBNLOKkCnXLWbZ3PRgYjUvJrwSpCS48oMVf/qwmmH9mV1B3Rz+fjqQB9fQ7iPNytSVLqmkUXKmo7SzgG4T6D2k/au1c1o8Fpw2vH9tYBBsLZw2qE1XBtOO76/tnDaoUS3ZrfsZLyOI7SD9PF1HaWdA2C045cs5rLQznpxYl6/kXbWs9DO+hnQzgFA2lkP6JTrd/NsLjoQkZo3EF4JUnJcl6Hq31A47dC+bOiAbi4f3xDo4xsJ9/FmRYpK1zSySNnYUdrZH3bWeHW0s0k3o8GbwGnH8zcBBsGmwmmH1nBTOO14/qbCaYcS3cbdspNx2RHaQfp46Cjt7A+jHS8z2qnEiTlqpJ2KhXaiDGhnfyDtVIBOGXXzbC46EJGaq8IrQUqOIUPVXxNOO7QvNQd0c/l4Dejjmwn38WZFikrXNLJI2dxR2tkPdtYEOmnvFt2MBm8Bp51AbwEMgi2F0w6t4ZZw2gnqdKuUzaYbkeg275adjLdyhHaQPr61o7SzH4x2AmUxl4V2tokT87aNtLONhXa2zYB29gPSzjZAp9y2m2dz0YGI1Lyd8EqQkuPWDFX/9sJph/Zlewd0c/n49kAf30G4jzcrUlS6ppFFyo6O0s6+sLOmpJL27tTNaPBOcNopqZ2AQbCzcNqhNdwZTjsltbNw2qFEt2O37GS8iyO0g/TxXR2lnX1htFOsWcxloZ3d4sS8eyPt7Gahnd0zoJ19gbSzG9Apd+/m2Vx0ICI17yG8EqTkuCtD1b+ncNqhfdnTAd1cPr4n0Mf3Eu7jzYoUla5pZJGyt6O0MxL3KQV1n0C9TzejwfvAaSes7gMMgpHCaYfWcCScdsLqSOG0Q4lu727ZyXhfR2gH6eP7OUo7I3GfUpDZJ1DvHyfmAxppZ38L7RyQAe2MBNLO/kCnPKCbZ3PRgYjUfKDwSpCS434MVf9BwmmH9uUgB3Rz+fhBQB8/WLiPNytSVLqmkUXKIY7Szj6wsyZX92zn0G5Ggw+F005OHQoMgsOE0w6t4WFw2smpw4TTDiW6Q7plJ+PDHaEdpI8f4Sjt7IP7BOrMnu0cGSfmoxpp50gL7RyVAe3sA6SdI4FOeVQ3z+aiAxGp+WjhlSAlxyMYqv5jhNMO7csxDujm8vFjgD5+rHAfb1akqHRNI4uU4xylnb1xZ00lae/x3YwGHw+nHVU5HhgEJwinHVrDE+C0oyonCKcdSnTHdctOxic6QjtIHz/JUdrZG0Y7KrSYy0I7J8eJ+ZRG2jnZQjunZEA7wBNInwx0ylO6eTYXHYhIzacKrwQpOZ7EUPWfJpx2aF9Oc0A3l4+fBvTx04X7eLMiRaVrGlmknOEo7ewFO2uKdW+yndnNaPCZcNopVs8EBsFZwmmH1vAsOO0Uq2cJpx1KdGd0y07GZztCO0gfP8dR2tkL93s7mb3Jdm6cmM9rpJ1zLbRzXga0sxeQds4FOuV53Tybiw5EpObzhVeClBzPYaj6LxBOO7QvFzigm8vHLwD6+IXCfbxZkaLSNY0sUi5ylHb2hJ01uu4z2UZ1Mxo8Ck47Wo8CBsHFwmmH1vBiOO3oOt0qZbPpRiS6i7plJ+NLHKEdpI9f6ijt7Il7ky2zz2S7LE7MlzfSzmUW2rk8A9rZE0g7lwGd8vJuns1FByJS8xXCK0FKjpcyVP1XCqcd2pcrHdDN5eNXAn38KuE+3qxIUemaRhYpVztKO3vgXsao+72da7oZDb6mGz/vtcIJhXRf2z16gUHzslAFJZSru2UnvescoQqkX17PnOgRe3I9g49nmVB3Z0qoN3QzGnwDQ0K9UXhCJd03ZpRQVbqmKTBu7OYJOJTuLINsty7cGiTtvamb0eCbGE7Em4AZ/WbhAUtreDNDENws/B4tBenNDPhzHXC/bxF+u4B85xamZN/X0LF9C3B/bhWO+M2IQaVrGkkMtwn3cdrj2xgKuVvA50JfQ+fJ21H7o/NFsm1y01sSttL8f8fXs3eOvp4jcT15/3+v+/67O8x/c6fpd5l+d/foca41uAe3BiXbGtwzEWtwr/lv7jP9ftMfiNeAek+/0Y9OxrYmKl3TdzDd0u0HtTPH+rxrksTaDomvHzTr8pDpD5v+iOmPmv6Y6Y+b/oTpT5r+lOlPm/6M6c+a/pzpz5v+gukvmv6S6S+b/orpr5r+mumvm/6G6W+a/pbpb5v+junvmv6e6e+b/kHjs7YH4+dqybGHLGMPW8YesYw9ahl7zDL2uGXsCcvYk5axpyxjT1vGnrGMPWsZe84y9rxl7AXL2IuWsZcsYy9bxl6xjL1qGXvNMva6ZewNy9iblrG3LGNvW8besYy9axl7zzL2vmXsg+4xn+EOjb8uGn9V6Vpd0kmb1B8EzNX3PPgh0Fyk8WHIXP+u1yPp58rF66UfTTuX99+114+lm0sl9lE/nmauXJ1P6Ccmfi7V4F/6yYmcq1gbw1f1UxM3l2/xe/30xMzlW2NIPzPhc5WaxKN+dkLnKjWNbf3chM2VG0ue0M9PyFylseYc/cL4z1UZR/7SL47vXKVx5kL90vjNpcYjr+qXx2cuNV45Wr8y7rkK45nv9avjmssb77NDvzbWubzaBJxD+vWxzVWaoDNNv9F8Ln8Cz0f9ZpO5gtoEn7X6LftcaiLObf22bS41UTWAfmfMufRE1hP63ca5oomuTfR79XPlU9Q5+v3EXLlaqppJfwCEviyfbHwAq/WiurfPP+xmNPjDbvTb55H+ELeB+iNgMc61hh91o98+j+p0q5Qty7eIccEbZfYW8cdxgH3SeGfj4+4x3yL+pJv/LWJcJlH6Y2AAfQLeXLTzUdB8DAzGPt0fO3oivQ/zoyBK2vtpN6PBn8JPpCD6FHgifSb8RKI1/Ax+IgXRZ46eSO/D7A4qFnNZTqTP4wD7ovFE+txyIn2RwYn0PvBE+hwYQF8wbS76hQCk5i+ByaxfP/xp+VGcgNAvBCBR4CtgMrOtoUrXNO3xVwyVzFeOVjLvwfJPmE/a+3U3o8FfwyuZMP81MPi/EV7J0Bp+A69kwvw3zMGPSKBfCU+g34LXsK+hD16kj38HjL0sK+D3YHaHOYu5LBXw93Fi/qGxAv7eUgH/kEEFjDuBlP4e6JQ/MG0uOhCRmn9kroBVuqYpOX7HUL39JLxqpX35yQHdXD7+E9DHfxbu482KFETxg5rrF/CBnRXtvAs7a/xa0t5fuxkN/hVOO37tV+AG/iacdmgNf4PTjl/7TTjtUKL7pVt2Mv4dnIz7Gloz0sf/cJR23oXZ7Vct5rLQzp9xYv6rkXb+tNDOXxnQDu4EUvpPoFP+xbS56EBEav5beCVIyfEPhqr/H+G0Q/vyjwO6uXz8H2RB1SPbx5sVKSpd08giZRLcGmb6bOcd2FlT//fnJ+1hNJgmx9JOTk0KDIL+PbJph9aQbMTSTk717+E9NBCJbpIe2cm4BZyM/xuQYM1IH28Fas6Sdt6BFQvZ/f35tjgxt/f0qyebtp4xaYe+iZt23gHSThvQKdt7eDYXHYhIzR3CK0FKjq09+INhMuaDS6VrmvZlMgd0c/n4ZEAfHyDcx5sVKSpd08giZaCjtPM27KyJ6mins4fR4E447USqExgEXcJph9awC047keoSTjuU6Ab2yE7G3Y7QDtLHexylnbdhtFPJjHZ648Q8qJF2ei20MygD2nkbSDu9QKcc1MOzuehARGqeXHglSMmxh6HqHyycdmhfBjugm8vHBwN9fArhPt6sSFHpmkYWKVM6Sjtvwc6aYt1nYkzVw2jwVHDaKeqpgEEwtXDaoTWcGk47xTrdKmWz6UYkuil7ZCfjaRyhHaSPT+so7bwFo51iZp+lMl2cmKdvpJ3pLLQzfQa08xaQdqYDOuX0PTybiw5EpOYZhFeClBynZaj6ZxROO7QvMzqgm8vHZwT6+EzCfbxZkaLSNY0sUmZ2lHbexD3b8ZP2DulhNHgI/tmOPwQYBEOF0w6t4VD8sx1/qHDaoUQ3c4/sZDyLI7SD9PFZHaWdN3EfLliymMtCO7PFiXlYI+3MZqGdYRnQzptA2pkN6JTDeng2Fx2ISM3DhVeClBxnZaj6ZxdOO7Qvszugm8vHZwf6+BzCfbxZkaLSNY0sUuZ0lHbegJ01XpC0d64eRoPngtOOF8wFDIK5hdMOreHccNrxgrmF0w4lujl7ZCfjeRyhHaSPz+so7bwBox3Pt5jLQjvzxYl5/kbamc9CO/NnQDtvAGlnPqBTzt/Ds7noQERqVsIrQUqO8zJU/Vo47dC+aAd0c/m4Bvp4TriPNytSVLqmkUVK3lHaeR33CdR1b7J5PYwGe3DaCbUHDIKCcNqhNSzAaSes061SNptuRKLL98hOxkVHaAfp4yVHaed13IcUZ/Ymmx8n5qCRdnwL7QQZ0M7rQNrxgU4Z9PBsLjoQkZoXEF4JUnIsMVT9I4TTDu3LCAd0c/n4CKCPLyjcx5sVKSpd08giZSFHaec1HO1UkvYu3MNo8MJ42qksDAyCRYTTDq3hInjaqSwinHYo0S3UIzsZL+oI7SB9fDFHaec1HO2EFnNZaGfxODEv0Ug7i1toZ4kMaOc1IO0sDnTKJXp4NhcdiEjNSwqvBCk5LsZQ9S8lnHZoX5ZyQDeXjy8F9PGlhft4syJFpWsaWaQs4yjtvIp7ky1M2rtsD6PBy+LfZAuXBQbBcsJph9ZwOfybbOFywmmHEt0yPbKT8fKO0A7Sx1dwlHZexb3JVraYy0I7K8aJeaVG2lnRQjsrZUA7rwJpZ0WgU67Uw7O56EBEal5ZeCVIyXEFhqp/FeG0Q/uyigO6uXx8FaCPryrcx5sVKSpd08giZTVHaecV3F8XrfsE6tV7GA1eHU47vlodGARrCKcdWsM14LTjqzWE0w4lutV6ZCfjNR2hHaSPr+Uo7bwCo51SZp9AvXacmNdppJ21LbSzTga08wqQdtYGOuU6PTybiw5EpOZ1hVeClBzXYqj61xNOO7Qv6zmgm8vH1wP6+PrCfbxZkaLSNY0sUjZwlHZeZqKdDXsYDd6QgXY2BAbBRsJph9ZwIwba2Ug47VCi26BHdjLe2BHaQfr4Jo7SzssO0s6mcWIuN9LOphbaKWdAOy8DaWdToFOWHaEdpOZQeCVIyXEThqq/Ipx2aF8qDujm8vEK0Mcj4T7erEhR6ZpGFilVR2nnJdhZU677TLZaD6PBNTjtlIMaMAg2E047tIabwWmnHGwmnHYo0VV7ZCfjzR2hHaSPb+Eo7bwEo51yZp/JtmWcmLdqpJ0tLbSzVQa08xKQdrYEOuVWPTybiw5EpOathVeClBy3YKj6txFOO7Qv2zigm8vHtwH6+LbCfbxZkaLSNY0sUrZzlHZexNGOl7R3+x5Gg7fH0463PTAIdhBOO7SGO+Bpx9tBOO1QotuuR3Yy3tER2kH6+E6O0s6LONrJW8xloZ2d48S8SyPt7GyhnV0yoJ0XgbSzM9Apd+nh2Vx0ICI17yq8EqTkuBND1b+bcNqhfdnNAd1cPr4b0Md3F+7jzYoUla5pZJGyh6O08wLur4vWPdvZs4fR4D3htBMFewKDYC/htENruBecdqJgL+G0Q4lujx7ZyXhvR2gH6eP7OEo7L+D+umhmz3ZGxol530baGWmhnX0zoJ0XgLQzEuiU+/bwbC46EJGa9xNeCVJy3Ieh6t9fOO3QvuzvgG4uH98f6OMHCPfxZkWKStc0skg50FHaeR521lSqSXsP6mE0+CA47VSqBwGD4GDhtENreDCcdirVg4XTDiW6A3tkJ+NDHKEdpI8f6ijtPA+jnUpkMZeFdg6LE/PhjbRzmIV2Ds+Adp4H0s5hQKc8vIdnc9GBiNR8hPBKkJLjoQxV/5HCaYf25UgHdHP5+JFAHz9KuI83K1JUuqaRRcrRjtLOc7CzRtc92zmmh9HgY+C0o4NjgEFwrHDaoTU8Fk47OjhWOO1Qoju6R3YyPs4R2kH6+PGO0s5zMNrRmT3bOSFOzCc20s4JFto5MQPaeQ5IOycAnfLEHp7NRQciUvNJwitBSo7HM1T9JwunHdqXkx3QzeXjJwN9/BThPt6sSFHpmkYWKac6SjvP4v66aB3tnNbDaPBpcNoJg9OAQXC6cNqhNTwdTjthcLpw2qFEd2qP7GR8hiO0g/TxMx2lnWdxf100M9o5K07MZzfSzlkW2jk7A9p5Fkg7ZwGd8uwens1FByJS8znCK0FKjmcyVP3nCqcd2pdzHdDN5ePnAn38POE+3qxIUemaRhYp5ztKO8/gPoHaT9p7QQ+jwRfAacf3LwAGwYXCaYfW8EI47fj+hcJphxLd+T2yk/FFjtAO0sdHOUo7z8Boxy9ZzGWhnYvjxHxJI+1cbKGdSzKgnWeAtHMx0Ckv6eHZXHQgIjVfKrwSpOQ4iqHqv0w47dC+XOaAbi4fvwzo45cL9/FmRYpK1zSySLnCUdp5GnbWeHW0c2UPo8FXwmnH868EBsFVwmmH1vAqOO14/lXCaYcS3RU9spPx1Y7QDtLHr3GUdp6G0Y6XGe1cGyfm6xpp51oL7VyXAe08DaSda4FOeV0Pz+aiAxGp+XrhlSAlx2sYqv4bhNMO7csNDujm8vEbgD5+o3Afb1akqHRNI4uUmxylnadgZ02gJ0nYeXMPo8E3w2kn0DcDg+AW4bRDa3gLnHaCOt0qZbPpRiS6m3pkJ+NbHaEdpI/f5ijtPAWjnUBZzGWhndvjxHxHI+3cbqGdOzKgnaeAtHM70Cnv6OHZXHQgIjXfKbwSpOR4G0PVf5dw2qF9ucsB3Vw+fhfQx+8W7uPNihSVrmlkkXKPo7TzJOysKamkvff2MBp8L5x2SupeYBDcJ5x2aA3vg9NOSd0nnHYo0d3TIzsZ3+8I7SB9/AFHaedJGO0UaxZzWWjnwTgxP9RIOw9aaOehDGjnSSDtPAh0yod6eDYXHYhIzQ8LrwQpOT7AUPU/Ipx2aF8ecUA3l48/AvTxR4X7eLMiRaVrGlmkPOYo7TyB+5SCuk+gfryH0eDH4bQTVh8HBsETwmmH1vAJOO2E1SeE0w4lusd6ZCfjJx2hHaSPP+Uo7TyB+5SCzD6B+uk4MT/TSDtPW2jnmQxo5wkg7TwNdMpneng2Fx2ISM3PCq8EKTk+xVD1PyecdmhfnnNAN5ePPwf08eeF+3izIkWlaxpZpLzgKO08DjtrcnXPdl7sYTT4RTjt5NSLwCB4STjt0Bq+BKednHpJOO1QonuhR3YyftkR2kH6+CuO0s7juE+gzuzZzqtxYn6tkXZetdDOaxnQzuNA2nkV6JSv9fBsLjoQkZpfF14JUnJ8haHqf0M47dC+vOGAbi4ffwPo428K9/FmRYpK1zSySHnLUdp5DHfWVJL2vt3DaPDbcNpRlbeBQfCOcNqhNXwHTjuq8o5w2qFE91aP7GT8riO0g/Tx9xylncdgtKNCi7kstPN+nJg/aKSd9y2080EGtAM8gfT7QKf8oIdnc9GBiNT8ofBKkJLjewxV/0fCaYf25SMHdHP5+EdAH/9YuI83K1JUuqaRRconjtLOo7Czplj3JtunPYwGfwqnnWL1U2AQfCacdmgNP4PTTrH6mXDaoUT3SY/sZPy5I7SD9PEvHKWdR3G/t5PZm2xfxon5q0ba+dJCO19lQDuPAmnnS6BTftXDs7noQERq/lp4JUjJ8QuGqv8b4bRD+/KNA7q5fPwboI9/K9zHmxUpKl3TyCLlO0dp5xHYWaPrPpPt+x5Gg7+H047W3wOD4AfhtENr+AOcdnSdbpWy2XQjEt13PbKT8Y+O0A7Sx39ylHYewb3Jltlnsv0cJ+ZfGmnnZwvt/JIB7TwCpJ2fgU75Sw/P5qIDEan5V+GVICXHnxiq/t+E0w7ty28O6Oby8d+APv67cB9vVqSodE0ji5Q/HKWdh3EvY9T93s6fPYwG/9mDn/cv4YRCuv/qGb3AoHlZqIISyh89spPe345QBdIv/2FO9Ig9+YfBx7NMqA8xJdT/IByXwTQ5et5JemUnVNI9SW8/uLNx2EqBMUkvT8ChdGcZZA9249Ygae+kvYwG0+To02HSXpyN/YUHLK1hf4Yg6N8ru5qiIO3fi8efv4GVRUuv7ARKvtPClOz7Gjq2W4Dx2ArMExz704wYVLqmkcTQJtzHaY/bGAo5pB9SkUAFft8t82RD231vN0+c94PamWN9zjFJYm2HxNftZj87TJ/M9AGmDzS90/Qu07tN7zG91/RBpk9u+mDTpzB9StOnMn1q06cxfVrTpzN9etNnMH1G02cyfWbTh5g+1PRZTJ/V9NlMH2b68N5+9c9T/mNMw1iHZWwyy9gAy9hAy1inZazLMtZtGeuxjPVaxgZZxia3jA22jE1hGZvSMjaVZWxqy9g0lrFpLWPTWcamt4zNYBmb0TI2k2VsZsvYEMvYUMvYLJaxWS1js1nGhlnGhveO+exuaPx10firStfqkk7aZNkOSLx9zwE7QHORxskgc/27XgPSz5WL10sPTDuX99+1153p5lKJfdRdaebK1fmE7p74uVSDf+meiZyrWBvDV3XvxM3lW/xeD5qYuXxrDOnJJ3yuUpN41IMndK5S09jWU0zYXLmx5Ak95YTMVRprztFTjf9clXHkLz31+M5VGmcu1NOM31xqPPKqnnZ85lLjlaP1dOOeqzCe+V5PP665vPE+O/QMY53Lq03AOaRnHNtcpQk60/RMzefyJ/B81DM3mSuoTfBZq4fY51ITcW7roba51ETVAHqWMefSE1lP6Fkb54omujbRs9XPlU9R5+hhiblytVQ1kx4OhPQs72gPh9V6Ud1bx7P3Mho8ey/6reNIz47bQD0HYFE572jTGs4BvKPdt4ZzgIOAfGjSftkGgUrVImUxF3ZXJbkWc8YBNlfjnY05e8d8e3SuXv63R3GZROk5gQE0F3hz0c5HQTMnMBj7dM/p6Ik0DOZHQZS0d+5eRoPnhp9IQTQ38ESaR/iJRGs4D/xECqJ5HD2RhsHsDioWc1lOpHnjAJuv8USa13IizZfBiTQMeCLNCwyg+Zg2F/0gGKl5fmAy69cPf1rOEScg9INgJAooYDKzraFK1zTtsWKoZJSjlcxssPwT5pP26l5GgzW8kgnzGhj8OeGVDK1hDl7JhPkcc/AjEqgSnkDz4DXsa+iDF+njHjD2sqyAZ4PZHeYs5rJUwIU4MRcbK+CCpQIuZlAB404gpQtApywybS46EJGaS8wVsErXNCVHj6F684VXrbQvvgO6uXzcB/p4INzHmxUpiOIHNdcC4AM7K9qZFXbW+LWkvSN6GQ0eAacdvzYCuIELCqcdWsMF4bTj1xYUTjuU6BbolZ2MFwIn476G1oz08YUdpZ1ZYXb7VYu5LLSzSJyYF22knUUstLNoBrSDO4GUXgTolIsybS46EJGaFxNeCVJyXJih6l9cOO3QvizugG4uH18c6ONLCPfxZkWKStc0skhZ0tFnO7PAzpr6vzu+VC+jwUvBaSenlgIGwdLCaYfWcGk47eTU0sJphxLdkr2yk/EyjtAO0seXdZR2ZoHZnd3fHV8uTszLN9LOchbaWT4D2sGdQEovB3TK5Zk2Fx2ISM0rCK8EKTkuy1D1ryicdmhfVnRAN5ePrwj08ZWE+3izIkWlaxpZpKzsKO0MhZ01UR3trNLLaPAqcNqJ1CrAIFhVOO3QGq4Kp51IrSqcdijRrdwrOxmv5gjtIH18dUdpZyjM7kpmtLNGnJjXbKSdNSy0s2YGtIM7gZReA+iUazJtLjoQkZrXEl4JUnJcnaHqX1s47dC+rO2Abi4fXxvo4+sI9/FmRYpK1zSySFnXUdoZAjtrinWfibFeL6PB68Fpp6jXAwbB+sJph9ZwfTjtFOt0q5TNphuR6NbtlZ2MN3CEdpA+vqGjtDMEZndRWcxloZ2N4sS8cSPtbGShnY0zoB3cCaT0RkCn3Jhpc9GBiNS8ifBKkJLjhgxV/6bCaYf2ZVMHdHP5+KZAHy8L9/FmRYpK1zSySAkdpZ2Zcc92/KS9lV5Ggyv4Zzt+BRgEkXDaoTWM8M92/Eg47VCiC3tlJ+OqI7SD9PGao7QzM8zuqGQxl4V2NosT8+aNtLOZhXY2z4B2cCeQ0psBnXJzps1FByJS8xbCK0FKjjWGqn9L4bRD+7KlA7q5fHxLoI9vJdzHmxUpKl3TyCJla0dpZybYWeMFSXu36WU0eBs47XjBNsAg2FY47dAabgunHS/YVjjtUKLbuld2Mt7OEdpB+vj2jtLOTDC7Pd9iLgvt7BAn5h0baWcHC+3smAHt4E4gpXcAOuWOTJuLDkSk5p2EV4KUHLdnqPp3Fk47tC87O6Cby8d3Bvr4LsJ9vFmRotI1jSxSdnWUdmaEnTVh3Ztsu/UyGrwbnHZCvRswCHYXTju0hrvDaSes061SNptuRKLbtVd2Mt7DEdpB+viejtLOjDC7Q2Uxl4V29ooT896NtLOXhXb2zoB2cCeQ0nsBnXJvps1FByJS8z7CK0FKjnsyVP0jhdMO7ctIB3Rz+fhIoI/vK9zHmxUpKl3TyCJlP0dpZwYc7VSS9u7fy2jw/njaqewPDIIDhNMOreEBeNqpHCCcdijR7dcrOxkf6AjtIH38IEdpZwZcQRxazGWhnYPjxHxII+0cbKGdQzKgHdwJpPTBQKc8hGlz0YGI1Hyo8EqQkuNBDFX/YcJph/blMAd0c/n4YUAfP1y4jzcrUlS6ppFFyhGO0s70sLPGC5P2HtnLaPCRcNrxwiOBQXCUcNqhNTwKTjteeJRw2qFEd0Sv7GR8tCO0g/TxYxylnelxLzuVLeay0M6xcWI+rpF2jrXQznEZ0A7uBFL6WKBTHse0uehARGo+XnglSMnxGIaq/wThtEP7coIDurl8/ASgj58o3MebFSkqXdPIIuUkR2lnOthZ49d9AvXJvYwGnwynHV+dDAyCU4TTDq3hKXDa8dUpwmmHEt1JvbKT8amO0A7Sx09zlHamg9ldyuwTqE+PE/MZjbRzuoV2zsiAdnAnkNKnA53yDKbNRQciUvOZwitBSo6nMVT9ZwmnHdqXsxzQzeXjZwF9/GzhPt6sSFHpmkYWKec4SjvTMtHOub2MBp/LQDvnAoPgPOG0Q2t4HgPtnCecdijRndMrOxmf7wjtIH38AkdpZ1oHaefCODFf1Eg7F1po56IMaAd3Ail9IdApL3KEdpCaRwmvBCk5XsBQ9V8snHZoXy52QDeXj18M9PFLhPt4syJFpWsaWaRc6ijtTAM7a8p1n8l2WS+jwZfBaaccXAYMgsuF0w6t4eVw2ikHlwunHUp0l/bKTsZXOEI7SB+/0lHamQZmdzmzz2S7Kk7MVzfSzlUW2rk6A9rBnUBKXwV0yquZNhcdiEjN1wivBCk5XslQ9V8rnHZoX651QDeXj18L9PHrhPt4syJFpWsaWaRc7yjtTI2jHS9p7w29jAbfgKcd7wZgENwonHZoDW/E0453o3DaoUR3fa/sZHyTI7SD9PGbHaWdqXEFcd5iLgvt3BIn5lsbaecWC+3cmgHt4E4gpW8BOuWtTJuLDkSk5tuEV4KUHG9mqPpvF047tC+3O6Cby8dvB/r4HcJ9vFmRotI1jSxS7nSUdqaCnTVR3bOdu3oZDb4LTjtRcBcwCO4WTju0hnfDaScK7hZOO5To7uyVnYzvcYR2kD5+r6O0MxXM7iizZzv3xYn5/kbauc9CO/dnQDu4E0jp+4BOeT/T5qIDEan5AeGVICXHexmq/geF0w7ty4MO6Oby8QeBPv6QcB9vVqSodE0ji5SHHaWdKWFnTaWatPeRXkaDH4HTTqX6CDAIHhVOO7SGj8Jpp1J9VDjtUKJ7uFd2Mn7MEdpB+vjjjtLOlDC7K5HFXBbaeSJOzE820s4TFtp5MgPawZ1ASj8BdMonmTYXHYhIzU8JrwQpOT7OUPU/LZx2aF+edkA3l48/DfTxZ4T7eLMiRaVrGlmkPOso7UwBO2t03bOd53oZDX4OTjs6eA4YBM8Lpx1aw+fhtKOD54XTDiW6Z3tlJ+MXHKEdpI+/6CjtTAGzW2f2bOelODG/3Eg7L1lo5+UMaAd3Ain9EtApX2baXHQgIjW/IrwSpOT4IkPV/6pw2qF9edUB3Vw+/irQx18T7uPNihSVrmlkkfK6o7QzGHbWhHW080Yvo8FvwGknDN4ABsGbwmmH1vBNOO2EwZvCaYcS3eu9spPxW47QDtLH33aUdgbD7A4zo5134sT8biPtvGOhnXczoB3cCaT0O0CnfJdpc9GBiNT8nvBKkJLj2wxV//vCaYf25X0HdHP5+PtAH/9AuI83K1JUuqaRRcqHjtLO5LCzxveT9n7Uy2jwR3Da8f2PgEHwsXDaoTX8GE47vv+xcNqhRPdhr+xk/IkjtIP08U8dpZ3JYXb7JYu5LLTzWZyYP2+knc8stPN5BrSDO4GU/gzolJ8zbS46EJGavxBeCVJy/JSh6v9SOO3QvnzpgG4uH/8S6ONfCffxZkWKStc0skj52lHaGQQ7a7w62vmml9Hgb+C04/nfAIPgW+G0Q2v4LZx2PP9b4bRDie7rXtnJ+DtHaAfp4987SjuDYHZ7mdHOD3Fi/rGRdn6w0M6PGdAO7gRS+gegU/7ItLnoQERq/kl4JUjJ8XuGqv9n4bRD+/KzA7q5fPxnoI//ItzHmxUpKl3TyCLlV0dppxd21gQ6ae9vvYwG/wannUD/BgyC34XTDq3h73DaCep0q5TNphuR6H7tlZ2M/3CEdpA+/qejtNMLsztQFnNZaOevODH/3Ug7f1lo5+8MaAd3Ain9F9Ap/2baXHQgIjX/I7wSpOT4J0PV32+QbNqhfSEbpevm8vGknWnnmmSQbB9vVqSodE0ji5RJgX6TJe30wM6akkra238Qo8E0OZZ2Sqo/MAhagMHJtYYtg9C0U1ItzIcGItFNOkh2Mm4FJ+O+htaM9PE2ZOz1y452emDFYbFmMZeFdtrjxNwxqF892bQPGpN26Ju4aacHSDvtQKfsGMSzuehARGqeTHglSMmxjaHqHyCcdmhfBjigm8vHBwB9fKBwH29WpKh0TSOLlE5HaacbdtaEdZ9A3TWI0eAuOO2E1S5gEHQLpx1aw2447YTVbuG0Q4muc5DsZNzjCO0gfbzXUdrphtFOmNknUA+KE/PkjbQzyEI7k2dAO91A2hkEdMrJB/FsLjoQkZoHC68EKTn2MlT9UwinHdqXKRzQzeXjUwB9fErhPt6sSFHpmkYWKVM5SjtdsLMmV/dsZ+pBjAZPDaednJoaGATTCKcdWsNp4LSTU9MIpx1KdFMNkp2Mp3WEdpA+Pp2jtNMFox2d2bOd6ePEPEMj7UxvoZ0ZMqCdLiDtTA90yhkG8WwuOhCRmmcUXglScpyOoeqfSTjt0L7M5IBuLh+fCejjMwv38WZFikrXNLJIGeIo7XTizppK0t6hgxgNHgqnHVUZCgyCWYTTDq3hLHDaUZVZhNMOJbohg2Qn41kdoR2kj8/mKO104n7NIbSYy0I7w+LEPLyRdoZZaGd4BrQDPIH0MKBTDh/Es7noQERqnl14JUjJcTaGqn8O4bRD+zKHA7q5fHwOoI/PKdzHmxUpKl3TyCJlLkdpZyDsrCnWvck29yBGg+eG006xOjcwCOYRTju0hvPAaadYnUc47VCim2uQ7GQ8ryO0g/Tx+RylnYG439vJ7E22+ePErBppZ34L7agMaGcgkHbmBzqlGsSzuehARGrWwitBSo7zMVT9OeG0Q/uSc0A3l4/ngD6eF+7jzYoUla5pZJHiOUo7A2Bnja77TLbCIEaDC3Da0boADIKicNqhNSzCaUfX6VYpm003ItF5g2Qn45IjtIP0cd9R2hmAe5Mts89kC+LEvEAj7QQW2lkgA9oZAKSdAOiUCwzi2Vx0ICI1jxBeCVJy9Bmq/gWF0w7ty4IO6Oby8QWBPr6QcB9vVqSodE0ji5SFHaWdyXAvY9T93s4igxgNXmQQft5FhRPKfzZq0OgFBs3LQhWUUBYeJDvpLeYIVSD9cnHmRI/Yk8UZfDzLhNrBlFCXGMRo8BIMCXVJ4QmVdC+ZUUJV6ZqmwFhyEE/AoXRnGWTtwE/TTdq71CBGg5diOBGXAmb0pYUHLK3h0gxBsLTwe7QUpEsz4M9iwP1eRvjtAvKdZZiSfV9Dx/YywP1ZVjjiNyMGla5pJDEsJ9zHaY+XYyjkkH7YZ9t5/fCx2PG/+f433//m+998/5vvf/P9b77/zfe/+cTPR/Xgzf3/faWCrm9KXN+YuL4hcX194vq6xPW1ietrEtdXJ66vSlxfmbi+InF9eeL6ssT1pYnrSxLXFyeuRyWuL0pcX5i4viBxfX7i+rzE9bmJ63MS12cnrs9KXJ+ZuD4jcX164vq0xPWpievfWkZf/5q4/iVx/XPi+qfE9Y+J6x8S198nrr9LXH+buP4mcf114vqrxPWXiesvEtefJ64/S1x/mrj+JHH9ceL6o8T1h4nrDxLX7yeu30tcv5u4fidx/Xbi+q3E9ZuJ6zcS168nrhdsG309InG9QOI6SFz7ietS4rqYuC4krr3EdT5xnUtc68S1SlzPn7ieL3E9b+J6nsT13InruRLXcyau50hcz564Hp64Hpa4ni1xPWviepbE9dDE9ZDE9cyJ65kS1zMmrvdtH309MnG9T+J678T1XonrPRPXeySud09c75a43jVxvUvieufE9U6J6x0T1zskrrdPXG+XuN42cb1N4nrrxPVWiestE9dbJK43T1xvlriuJa6riesocV1JXIeJ63LietPk+nQl1i1xvUfies/E9V6J670T1/skrkcmrvdNXO+XuN4/cX1A4vrAxPVBieuDE9eHJK69zkTcJa6LietS4tpPXAeJ6wUS1yMS1wsmrhdKXC+cuF4kcb1o4nqxxPXiiesl4utr+/3bljf3eFYwfUXTVzJ9ZdNXMX1V01czfXXT1zB9TdPXMn1t09cxfV3T1zN9fdM3MH1D0zcyfWPTNzF9U9PLpoemV0yPTK+aXjN9M9M3N30L07c0fSvTtzZ9G9O3NX0707c3fQfTdzR9J9N3Nn0X03c1fTfTdzd9D9P3NH0v0/c2fR/TR5q+r+n7mb6/6QeYfqDpB5l+sOmHmH6o6YeZfrjpR5h+pOlHmX606ceYfqzpx5l+vOknmH6i6SeZfrLpp5h+qumnmX666WeYfqbpZ5l+tunnmH6u6eeZfr7pF5h+oekXmT7K9ItNv8T0S02/zPTLTb/C9CtNv8r0q02/xvRrTb/O9OtNv8H0G02/yfSbTb/F9FtNv830202/w/Q7Tb/L9LtNv8f0e02/z/T7TX/A9AdNf8j0h01/xPRHTX/M9MdNf8L0J01/yvSnTX/G9GdNf870501/wfQXTX/J9JdNf8X0V01/zfTXTX/D9DdNf8v0t01/x/R3TX/P9PdN/8D0D03/yPSPTf/E9E9N/8z0z03/wvQvTf/K9K9N/8b0b03/zvTvTf/B9B9N/8n0n03/xfRfTf9t0L8+Ta3v/jG1ReOvKmXrgM4X/rfube8dHY8dievJEtcDEtcDE9edieuuxHV34roncd2buB6UuJ48cT04cT1F4nrKxPVUiesHu0dfP5S4fjhx/Uji+tHE9WOJ68cT108krp9MXD+VuH46cf1M4vrZxPVzievnE9cvxNe98V7+bnznD9P/NP0v0/82/Z9BtDDm+02f1PT+preY3mp6m+ntpneYPhmN9/t3vr42SeLrNPH1APN9A03vNL3L9G7Te0zvNX2Q6ZObPtj0KUyf0vSpTJ/a9GlMn9b06Uyf3vQZTJ/R9JlMn9n0IaYPnTz+YX3vp9MP62gYG2gZ67SMdVnGui1jPZaxXsvYIMvY5JaxwZaxKSxjU1rGprKMTW0Zm8YyNq1lbDrL2PSWsRksYzNaxmayjM1sGRtiGRsaj5GTTdbP7mQzx9ezmO+d1fTZTB9m+nDTZzd9DtPnNH0u0+c2fR7T5zV9PtPnN12Zrk3PmZ433TO9YHrR9JLpvumB6QuYPsL0BU1fyPSFTV/E9EUbHXAWi5BZLWOzWcaGWcaGW8Zmt4zNYRmb0zI2l2VsbsvYPJaxeS1j81nG5reMKcuYtozlLGN5y5hnGStYxoqWsZJlzLeMBZaxBSxjIyxjC1rGFrKMLWwZW8QytugEBMNi5nsXN30J05c0fSnTlzZ9GdOXNX0505c3fQXTVzR9JdNXNn0V01c1fTXTVzd9DdPXNH0t09c2fR3T1zV9PdPXN30D0zc0fSPTNzZ9k8ZgWMwiZHHL2BKWsSUtY0tZxpa2jC1jGVvWMracZWx5y9gKlrEVLWMrWcZWtoytYhlb1TK2mmVsdcvYGpaxNS1ja1nG1raMrWMZW9cytp5lbH3L2AaWsQ0tYxtZxja2jG0yAcGwqfnesumh6RXTI9OrptdM38z0zU3fwvQtTd/K9K1N38b0bU3fzvTtTd/B9B1N38n0nU3fxfRdTd/N9N1N38P0PU3fy/S9Td/H9JGNwbCpRUjZMhZaxiqWscgyVrWM1Sxjm1nGNreMbWEZ29IytpVlbGvL2DaWsW0tY9tZxra3jO1gGdvRMraTZWxny9gulrFdLWO7WcZ2t4ztYRnb0zK2l2Vsb8vYPpaxkRMQDPua793P9P1NP8D0A00/yPSDTT/E9ENNP8z0w00/wvQjTT/K9KNNP8b0Y00/zvTjTT/B9BNNP8n0k00/xfRTTT/N9NNNP8P0M00/y/SzG4NhX4uQ/Sxj+1vGDrCMHWgZO8gydrBl7BDL2KGWscMsY4dbxo6wjB1pGTvKMna0ZewYy9ixlrHjLGPHW8ZOsIydaBk7yTJ2smXsFMvYqZax0yxjp1vGzrCMnWkZO8sydvYEBMM55nvPNf080883/QLTLzT9ItNHmX6x6ZeYfqnpl5l+uelXmH6l6VeZfrXp15h+renXmX696TeYfqPpN5l+s+m3mH6r6beZfrvpd5h+Z2MwnGMRcq5l7DzL2PmWsQssYxdaxi6yjI2yjF1sGbvEMnapZewyy9jllrErLGNXWsausoxdbRm7xjJ2rWXsOsvY9ZaxGyxjN1rGbrKM3WwZu8Uydqtl7DbL2O2WsTssY3dOQDDcZb73btPvMf3/sPcdcHIUx95zEenEoZNEECKdEFkCdm/3EghbMtkgJJIIBnN7CWOiQdjGxnAC2+Rsg3HENraf83sOn/387Oecc8455/T8nJ7trwdt3f3vfzW9s7c1d9to5/fru53p7qrq6qrq6uqenve59H6XPuDSB136kEsfdukjLn3UpY+59HGXPuHSJ136lEufdukzLn3Wpc+59HmXvuDSF136kktfdukrLn3Vpa+59HWXvuHSN1kZ3qM05L+VZ+9Vnr1PefZ+5dkHlGcfVJ59SHn2YeXZR5RnH1WefUx59nHl2SeUZ59Unn1KefZp5dlnlGefVZ59Tnn2eeXZF5RnX1SefUl59mXl2VeUZ19Vnn1NefZ15dk3lGffrEIZvuXKftul77j0XZe+59L3XfqBSz906Ucu/diln7j0U5d+5tLPXfqFS7906Vcu/dql37j0W5d+59LvXfqDS3906X9c+pNL/+vSn136i0t/delvrAzfUhrybeXZd5Rn31WefU959n3l2Q+UZz9Unv1IefZj5dlPlGc/VZ79THn2c+XZL5Rnv1Se/Up59mvl2W+UZ79Vnv1OefZ75dkflGd/VJ79j/LsT8qz/1We/Vl59hfl2V+VZ3+rQhn+7sr+n0v/cOmfLv0rFtJlroxLzS61uNTqUptL7S7t4NIClxa61OHSIpd2dKnTpZ1cWuxSl0tLXFrq0jKXdnZpF5d2dWk3l5a7tPsyIvrvSkP+T3n2D+XZP5Vn/1KexQ3jZ03Ks2blWYvyrFV51qY8a1ee7aA8W6A8W6g861CeLVKe7ag861Se7aQ8W6w861KeLVGeLVWeLVOe7aw820V5tqvybDfl2XLl2e7L0ivDCld2D5f2dGkvl/Z2aR+Xul1a6dK+Lq1yaT+X9nfpAJcOdOkglw526RCXVru0xqVDXTrMpcNdyrmUd6nHpYJLRZd6Xepzqd+lAVaGFUpD9lCe7ak820t5trfybB/lWbfybKXybF/l2Srl2X7Ks/2VZwcozw5Unh2kPDtYeXaI8my18myN8uxQ5dlhyrPDlWc55VleedajPCsoz4rKs17lWZ/yrF95NgDK0BFNXdNODFu27f8Ry6Lpl2jMuvL/XG1XPkYksGp99Spu0KJobo6BO2JZNq9YWtN5QJQBnTGjd2wwehqdloxuAjqPZA20foH0/hbD42vsOiuPJiuG210WvE7ovCw7tCnKRvAy68i1hqb0qIw68qhyR/r4YHEygxXtB0bZCIF1mw2FNX9QIG1uNmzzwYG0ucWwzYfMUZtztV351Yb8W9YShjexJgqDzkMDofOwKAxZP9xQ1ncLRNZzURh05gOhsycQOguB0FkMhM7eQOjsC4TO/kDoHAiEzsFA6DwiEDqPDITOtYHQeVQgdD4mEDofGwid6wKhc30gdD4uEDqPDoTOYwKh89hA6DwuEDqPD4TOEwKh88RA6Hx8IHSeFAidJwdC54ZA6DwlEDo3BkLnpkDoPDUQOk8LhM7TA6HzjEDoPDMQOjcHQudZgdB5diB0nhMInecGQucTAqHzvEDoPD8QOp8YCJ0XBELnUCB0lgKhczgQOkcCoXM0EDrHAqFzPBA6LwyEzicFQudFgdD55EDovDgQOi8JhM5LA6HzskDovDwQOq8IhM6nBELnlYHQeVUgdG4JhM6rA6HzqYHQ+bRA6Hx6IHReEwidzwiEzmcGQue1gdD5rEDovC4QOq8PhM6JQOjcGgidNwRC542B0PnsQOh8TiB0PjcQOm8KhM6bA6HzlkDovDUQOm8LhM7bA6HzjkDovDMQOu8KhM67A6HznkDovDcQOu8LhM7nBULn8wOh8/5A6HwgEDpfEAidDwZC5wsDofNFgdD54kDofEkgdL40EDpfFgidDwVC58sDofMVgdD5ykDofDgQOl8VCJ2vDoTO1wRC578FQudrA6HzdYHQ+fpA6HxDIHS+MRA63xQInW8OhM5/D4TO/wiEzrcEQudbA6HzbYHQ+fZA6Px/gdD5jkDofGcgdP5nIHS+KxA6/ysQOt8dCJ3vCYTO/w6EzvcGQuf7AqHz/YHQ+YGM6Gw2pvODAKvWby3c2xJGmz9k2OblgXxf4sNRGHR+JBA6PxoInR8LhM6PB0LnJwKh85OB0PmpQOj8dCB0fiYQOj8bCJ2fC4TOzwdC5xcCofOLgdD5pUDo/HIgdH4lEDq/GgidXwuEzq8HQuc3AqHzm4HQ+a1A6Px2IHR+JxA6vxsInd8LhM7vB0LnDwKh84eRXYwS6eRYaj19c/1HGfWNdfz4x4b8W7ssDHn8SRQGnT8NhM6fBULnzwOh8xeB0PnLQOj8VSB0/joQOn8TCJ2/DYTO3wVC5+8DofMPgdD5x0Do/J9A6PxTIHT+byB0/jkQOv8SCJ1/DYTOvwVC598DofP/AqHzH4HQ+c9A6PxXIHTGAEOgsykQOpsDobMlEDpbA6GzLRA62wOhc4dA6FwQCJ0LA6GzIxA6FwVC546B0NkZCJ07BULn4kDo7AqEziWB0Lk0EDqXBULnzk3Z7F+wpnOXQPi5ayB07hYIncsDoXP3QOhcEQidewRC556B0LlXIHTuHQid+wRCZ3cgdK4MhM59A6FzVSB07hcInfsHQucBgdB5YCB0HhQInQcHQuchgdC5OhA61wRC56GB0HlYIHQeHgiduUDozAdCZ08gdBYCobMYCJ29gdDZFwid/YHQORAInYOB0HlEIHQeGQidawOh86hA6HxMIHQ+NhA61wVC5/pA6HxcIHQeHQidxwRC57GB0HlcIHQeHwidJwRC54mB0Pn4QOg8KRA6Tw6Ezg2B0HlKIHRuDITOTYHQeWogdJ4WCJ2nB0LnGYHQeWYgdG4OhM6zAqHz7EDoPCcQOs8NhM4nBELneYHQeX4gdD4xEDovCITOoUDoLAVC53AgdI4EQudoIHSOBULneCB0XhgInU8KhM6LAqHzyYHQeXEgdF4SCJ2XBkLnZYHQeXkgdF4RCJ1PCYTOKwOh86pA6NwSCJ1XB0LnUwOh82mB0Pn0QOi8JhA6nxEInc8MhM5rA6HzWYHQeV0gdF4fCJ0TgdC5NRA6bwiEzhsDofPZgdD5nEDofG4gdN4UCJ03B0LnLYHQeWsgdN4WCJ23B0LnHYHQeWcgdN4VCJ13B0LnPYHQeW8gdN4XCJ3PC4TO5wdC5/2B0PlAIHS+IBA6H8yIzmZjOl8IdNZ63u+Ry8Jo84sM2/zaBdm0udu4zS+eLo/5XA3XBxZUyb/+RP7lH7+k6r7oT4J10pJZ9OuADuvkJbOSkQEN1obZwRrsG58J65Qls5bdHMPauKQGPeiZDmvTkpp0KoewTl1So34Wp2CdtqRmXe8RWKfXDqswtg1Y/gwTWOMxtPyZRrActPxmA1hiG89iWKOzhpX/20y68rOF9XetjbnZwfo/nV+52cD6RwLvB8erh/XP5H4cqBbWv3wy0V8drGipT76K49XAalpaQVaL6WE1L60o971pYbUsTaFDuXSwWpem0sdcGlht6WDle/srw2pPC2ugd6QSrB3Swxrt6ffDWlANrIFCjw/WwumwCjXYwnwEV3f5v8DO1XblX9JkR+fZhjb7HEObfa6hzX6Coc0+z9Bmn29os59oaLMvWGJns4eW2Nns0hI7mz28xM5mjyyxs9mjS+xs9tgSO5s9vsTOZl+4xM5mP6la/9UzN73IcG76ZMO56cWGc9NLDOemlxrOTS8znJtebjg3vcJwbvoUw7nplYZz06sM56ZbDOemVxvOTZ+6JIy43UsNfbunGfp2Tzf07a4x9O2eYejbPdPQt7vW0Ld7lqFvd52hb3e9oW83YejbbTX07W4w9O1uNPTtnm3o2z3H0Ld7rqFvd5Ohb3ezoW93i6Fvd6uhb3eboW93u6Fvd4ehb3enoW93l6Fvd7ehb3ePoW93r6Fvd5+hb/c8Q9/u+YH4di8z9O3uN/TtHjD07V5g6Ns9aOjbvdDQt3uRoW/3YkPf7iWGvt1LDX27lxn6dg8Z+nYvN/TtXmHo273S0Ld72NC3e5Whb/dqQ9/uNYa+3b8Z+navNfTtXmfo273e0Ld7g6Fv90ZD3+5Nhr7dmw19u3839O3+w9C3e4uhb/dWQ9/ubYH4dg8Z+nZvN/Tt/p+hb/cOQ9/unYa+3X8a+nbvMvTt/svQt3u3oW/3HkPf7r8Nfbv3Gvp27zP07d5v6Nt9wNC3+6Chb/chQ9/uw4a+3UcMfbuPGvp2HzP07T5u6Nt9wtC3+6Shb/cpQ9/u04a+3WcMfbvPGvp2nzP07T5v6Nt9wdC3+2Igvt3LDX27Lxn6dl829O2+YujbfdXQt/uaoW/3dUPf7huGvt03DX27bxn6dt829O2+Y+jbfdfQt/ueoW/3fUPf7geGvt0PDX27Hxn6dj829O1+Yujb/dTQt/uZoW/3c0Pf7heGvt0vDX27Xxn6dr829O1+Y+jb/dbQt/udoW/3e0Pf7g+B+HavMPTt/mjo2/2PoW/3J0Pf7n8Nfbs/G/p2fzH07f5q6Nt1GL7/tsjw/bcdDd9/6zR8/20nw/ffFhu+/9Zl+P7bEsP335Yavv+2rDpYXt9u52pheXy7XaqHlejb7TobWAm+3W5L7Xy75bOEpfl2u88e1gzfbkUtsMi326M2WNN8uz1rhQW+3V5LLXyobbD2Xmrjj8Ww9llq59t1G8AS327l0jB8u1ca+nb7LrXz7VYttfPt9ltq59vtv9TOtztgqZ1vd+BSO9/uoKV2vt3Bhr7dIYa+3WpD326NoW93qKFvd5ihb3e4oW+XM/Tt8oa+XY+hb1cw9O2Khr5dr6Fv12fo2/Ub+nYDhr7doKFvd4Shb3ekoW+31tC3O8rQt3uMoW/3WEPfbl0gvt3Dhr7dekPf7nGGvt3Rhr7dMYa+3bGGvt1xhr7d8Ya+3QmGvt2Jhr7d4w19u5MMfbuTDX27DYa+3SmGvt1GQ99uk6Fvd6qhb3eaoW93uqFvd4ahb3emoW+32dC3O8vQtzvb0Lc7x9C3O9fQt3uCoW93nqFvd76hb/dEQ9/ugkB8u1cZ+nZDhr5dydC3Gzb07UYMfbtRQ99uzNC3Gzf07S409O2eZOjbXWTo2z3Z0Le72NC3u8TQt7vU0Le7zNC3u9zQt7vC0Ld7iqFvd6Whb3eVoW+3xdC3u9rQt3uqoW/3NEPf7umGvt01hr7dMwx9u2ca+nbXGvp2zzL07a4LxLd7taFvd72hbzdh6NttNfTtbjD07W409O2ebejbPcfQt3uuoW93k6Fvd7Ohb3eLoW93q6Fvd5uhb3e7oW93h6Fvd6ehb3eXoW93t6Fvd4+hb3evoW93n6Fv9zxD3+75hr7d/Ya+3QOGvt0LDH27Bw19uxca+nYvMvTtXmzo270kEN/uNYa+3UsNfbuXGfp2Dxn6di839O1eYejbvdLQt3vY0Ld7laFv92pD3+41hr7dvxn6dq819O1eZ+jbvd7Qt3uDoW/3RkPf7k2Gvt2bDX27fzf07f7D0Ld7i6Fv91ZD3+5thr7d2w19u/9n6Nu9w9C3e6ehb/efhr7duwx9u/8y9O3eHYhv92+Gvt17DH27/zb07d5r6Nu9z9C3e7+hb/cBQ9/ug4a+3YcMfbsPG/p2HzH07T5q6Nt9zNC3+7ihb/cJQ9/uk4a+3acMfbtPG/p2nzH07T5r6Nt9ztC3+7yhb/cFQ9/ui4a+3ZcMfbsvG/p2XzH07b5q6Nt9zdC3+7qhb/cNQ9/um4H4dq819O2+ZejbfdvQt/uOoW/3XUPf7nuGvt33DX27Hxj6dj809O1+ZOjb/djQt/uJoW/3U0Pf7meGvt3PDX27Xxj6dr809O1+Zejb/drQt/uNoW/3W0Pf7neGvt3vDX27Pxj6dn809O3+x9C3+5Ohb/e/hr7dnw19u78Y+nZ/NfTt/haIb/c6Q9/u74a+3f8Z+nb/MPTt/mno2/3L0LeLltn5dk3L7Hy75mV2vl3LMjvfrnVZZObbtS2LzHy79jSwUvp2O6SDlcq3W5AWVgrfbmF6WBV9u45qYFXw7RZVB8vr2+1YLSyPb9dZPaxE326n2cBK8O0WL7Pz7bpmCUvz7ZbMHtYM325pLbDIt1tWG6xpvt3OtcIC326XZRY+1DZYuy6z8cdiWLsts/PtlhvAEt9u92Vh+HavN/TtViyz8+32WGbn2+25zM6322uZnW+39zI7324fQ9+u29C3W2no2+1r6NutMvTt9jP07fY39O0OMPTtDjT07Q4y9O0ONvTtDjH07VYb+nZrDH27Qw19u8MMfbvDDX27nKFvlzf07XoMfbuCoW9XNPTteg19uz5D367f0LcbyMi3ayr/N4Kdf0OTFf/GxpHOZqKzVn5+yLDNb2zKpm+ajfvmTU12/Lu/JQx5fHNTGHT+eyB0/kcgdL4lEDrfGgidbwuEzrcHQuf/C4TOdwRC5zsDofM/A6HzXYHQ+V+B0PnuQOh8TyB0/ncgdL43EDrfFwid7w+Ezg8EQucHA6HzQ4HQ+eFA6PxIIHR+NBA6PxYInR8PhM5PBELnJwOh81OB0PnpQOj8TCB0fjYQOj8XCJ2fD4TOLwRC5xcDofNLgdD55UDo/EogdH41EDq/FgidXw+Ezm8EQuc3A6HzW4HQ+e1A6PxOIHR+NxA6vxcInd8PhM4fBELnDwOh80eB0PnjQOj8SSB0/jQQOn8WCJ0/D4TOXwRC5y8DofNXgdD560Do/E0gdP42EDp/Fwidvw+Ezj8EQucfA6HzfwKh80+B0Pm/gdD550Do/EsgdP41EDr/Fgidfw+Ezv8LhM5/BELnPwOh81+B0Bk1h0FnUyB0NgdCZ0sgdLYGQmdbIHS2B0LnDoHQuSAQOhcGQmdHIHQuCoTOHQOhszMQOncKhM7FgdDZFQidSwKhc2kgdC4LhM6dA6Fzl0Do3DUQOncLhM7lgdC5eyB0rgiEzj0CoXPPQOjcKxA69w6Ezn0CobM7EDpXBkLnvoHQuSoQOvcLhM79A6HzgEDoPDAQOg8KhM6DA6HzkEDoXB0InWsCofPQQOg8LBA6Dw+EzlwgdOYDobMnEDoLgdBZDITO3kDo7AuEzv5A6BwIhM7BQOg8IhA6jwyEzrWB0HlUIHQ+JhA6HxsInesCoXN9IHQ+LhA6jw6EzmMCofPYQOg8LhA6jw+EzhMCofPEQOh8fCB0nhQInScHQueGQOg8JRA6NwZC56ZA6Dw1EDpPC4TO0wOh84xA6DwzEDo3B0LnWYHQeXYgdJ4TCJ3nBkLnEwKh87xA6Dw/EDqfGAidFwRC51AgdJYCoXM4EDpHAqFzNBA6xwKhczwQOi8MhM4nBULnRYHQ+eRA6Lw4EDovCYTOSwOh87JA6Lw8EDqvCITOpwRC55WB0HlVIHRuCYTOqwOh86mB0Pm0QOh8eiB0XhMInc8IhM5nBkLntYHQ+axA6LwuEDqvD4TOiUDo3BoInTcEQueNgdD57EDofE4gdD43EDpvCoTOmwOh85ZA6Lw1EDpvC4TO2wOh845A6LwzEDrvCoTOuwOh855A6Lw3EDrvC4TO5wVC5/MDofP+QOh8IBA6XxAInQ8GQucLA6HzRYHQ+eJA6HxJIHS+NBA6XxYInQ8FQufLA6HzFYHQ+cpA6Hw4EDpfFQidrw6EztcEQue/BULnawOh83WB0Pn6QOh8QyB0vjEQOt8UCJ1vDoTOfw+Ezv8IhM63BELnWwOh822B0Pn2QOj8f4HQ+Y5A6HxnIHT+ZyB0visQOv8rEDrfHQid7wmEzv8OhM73BkLn+wKh8/2B0PmBQOj8YCB0figQOj8cCJ0fCYTOjwZC58cCofPjgdD5iUDo/GQgdH4qEDo/HQidnwmEzs8GQufnAqHz84HQ+YVA6PxiIHR+KRA6vxwInV8JhM6vBkLn1wKh8+uB0PmNQOj8ZiB0fisQOr8dCJ3fCYTO7wZC5/cCofP7gdD5g0Do/GEgdP4oEDp/HAidPwmEzp8GQufPAqHz54HQ+Qugs5DrKxbH+nvG8oV8KdczODzQmyv2DvcN5AfyvQO9oz0DhcLYQHGgf3B4sD83mC8WxvLjvYOF8Tmg85eB8PNXgdD560Do/E1GdDYTnbXK/n6Gbf7tHLU5V9uV/52h7ThqWRj93GrIv98HIttthm3+QyBtbjds8x8DafMOhm3+n0DavMCwzX8KpM0LDdv8v4G0ucOwzX8OpM2LDNv8l0DavKNhm/8aSJs7Ddv8t0DavJNhm/8eSJsXG7b5/wJpc5dhm/8RSJuXGLb5n4G0ealhm/8VSJuXGbY5agmjzTsbtrkpkDbvYtjm5kDavKthm1sCafNuhm1uDaTNyw3b3BZIm3c3bHN7IG1eYdjmHQJp8x6GbV4QSJv3NGzzwkDavJdhmzsCafPehm1eFEib9zFs846BtLnbsM2dgbR5pWGbdwqkzfsatnlxIG1eZdjmLsM2O1CP7IP4RbnBB7p0kEsHu3SIS6tdWuPSoS4d5tLhMU6X8i71xHxxqehSr0t9LvW7NODSoEtHuHSkS2tdOsqlx7j02DIf1rv0OJeOdukYl4516TiXjnfpBJdOdOnxLp3k0skubXDpFJc2urTJpVNdOs2l0106w6UzXdrs0lkune3SOS6d69ITXDrPpfNdeqJLF7g05FLJpWGXRlwadWnMpXGXLnTpSS5d5NKTXbrYpUtcutSly1y63KUrXHqKS1e6dJVLW1y62qWnuvQ0l57u0jUuPcOlZ7p0rUvPcuk6l653acKlrS7d4NKNLj3bpee49FyXbnLpZpducelWl25z6XaX7nDpTpfuculul+5x6V6X7nPpeS4936X7XXrApRe49KBLL3TpRS692KWXuPRSl17m0kMuvdylV7j0SpcedulVLr3apde49G8uvdal17n0epfe4NIbXXqTS2926d9d+g+X3uLSW116m0tvd+n/ufQOl97p0n+69C6X/suld7v0Hpf+26X3uvQ+l97v0gdc+qBLH3Lpwy59xKWPuvQxlz7u0idc+qRLn3Lp0y59xqXPuvQ5lz7v0hdc+qJLX3Lpyy59xaWvuvQ1l77u0jdc+qZL33Lp2y59x6XvuvQ9l77v0g9c+qFLP3Lpxy79xKWfuvQzl37u0i9c+qVLv3Lp1y79xqXfuvQ7l37v0h9c+qNL/+PSn1z6X5f+7NJfXPqrS39z6e8u/Z9L/3Dpny79y6VY4ZpcanapxaVWl9pcandpB5cWuLTQpQ6XFrm0o0udLu3k0mKXulxa4tJSl5a5tLNLu7i0q0u7ubTcpd1dWuHSHi7t6dJeLu3t0j4udbu00qV9XVrl0n4u7e/SAS4d6NJBLh3s0iEurXZpjUuHunSYS4e7lHMp71KPSwWXii71utTnUr9LAy4NunSES0e6tNalo1x6jEuPdWmdS+tdepxLR7t0jEvHunScS8e7dIJLJ7r0eJdOculklza4dIpLG13a5NKpLp3m0ukuneHSmS5tduksl8526RyXznXpCS6d59L5Lj3RpQtcGnKp5NKwSyMujbo05tK4Sxe69CSXLnLpyS5d7NIlLl3q0mUuXe7SFS49xaUrXbrKpS0uXe3SU116mktPd+kal57h0jNdutalZ7l0nUvXuzTh0laXbnDpRpee7dJzXHquSze5dLNLt7h0q0u3uXS7S3e4dKdLd7l0t0v3uHSvS/e59DyXnu/S/S494NILXHrQpRe69CKXXuzSS1x6qUsvc+khl17u0itceqVLD7v0Kpde7dJrXPo3l17r0utcer1Lb3DpjS69yaU3u/TvLv2HS29x6a0uvc2lt7v0/1x6h0vvdOk/XXqXS//l0rtdeo9L/+3Se116n0vvd+kDLn3QpQ+59GGXPuLSR136mEsfd+kTLn3SpU+59GmXPuPSZ136nEufd+kLLn3RpS+59GWXvuLSV136mktfd+kbLn3TpW+59G2XvuPSd136nkvfd+kHLv3QpR+59GOXfuLST136mUs/d+kXLv3SpV+59GuXfuPSb136nUu/d+kPLv3Rpf9x6U8u/a9Lf3bpLy791aW/ufR3l/7PpX+49E+X/uVS7Fw0udTsUotLrS61udTu0g4uLXBpoUsdLi1yaUeXOl3ayaXFLnW5tMSlpS4tc2lnl3ZxaVeXdnNpuUu7u7TCpT1c2tOlvVza26V9XOp2aaVL+7q0yqX9XNrfpQNcOtClg1w62KVDXFrt0hqXDnXpMJcOdynnUt6lHpcKLhVd6nWpz6V+lwZcGnTpCJeOdGmtS0e59BiXHuvSOpfWu/Q4l4526RiXjnXpOJeOd+kEl0506fEuneTSyS5tcOkUlza6tMmlU106zaXTXTrDpTNd2uzSWS6d7dI5Lp3r0hNcOs+l8116oksXuDTkUsmlYZdGXBp1acylcZcudOlJLl3k0pNdutilS1yKv0Eff989/nZ6/F3y+Jvf8fe0429Vx9+Bjr+xHH+/OP42cPzd3fibtvH3YuNvscbfOY2/IRp/nzP+9uWES/E3G+PvIcbfGoy/4xd/Iy/+/lz8bbf4u2nxN8ni733F39KKv1MVfwMq/r5S/O2i+LtA8Td34u/ZxN+Kib/DEn/jJP5+SPxtjvi7F/E3JeLvNcTfQoi/MxCf4R+fjx+fPf+QS/GZ6fF55PFZ3/E52vEZ1fH5z/HZyvG5xfGZwPF5u/FZtvE5sfEZrPH5pvHZofG5nPGZl/F5kvFZjfE5iPEZg/H5ffHZePG5c/GZbvF5afFZZPE5X/EZWvH5VPHZT+9zKT6zKD4PKD5rJz7HJj4jJj5/JT7bJD43JD6TIz7vIj5LIj6nIT4DIT5fIH53P34vPn7nPH6fO35XOn4POX7HN35/Nn43NX7vM36nMn5fMX4XMH7PLn6HLX4/LH736nsuxe8Mxe/jxO+6xO+RxO9oxO8/xO8WxPv24z3xsU8c7+WO90nHe5Dj/b3xftd4L2m8HzLeHxjvl4v3j8X7qeL9RfF+m3j/SbwfI96fEK/Xx+vX8XpuvL4Zr/fF61/xelC8PhKvF8Tx8zieHMdX43hjHH+L41FxfCaOV8Tz93g+G8/v4vlO7P83b3MjoniPZ3wdGE1dZRMTo3kkP94TGe8RjPfMxXvI4j1V8R6jeM9NvAcl3pMR71GI1+zjNex4TTde44zX/OI1sHhNKF4jidcM4hh6HFOOY6xxzDGOwcUxqThGE8csul1a6dK+LsVznniv8f4uHRDNvNbD7xXl/3df+JFP/s8vd/gcltvTk7e2/P+JC172nsd9YdEbMe8oT97jPHnHePKeUP7/249duHrNEWfeinkj5f/ff9unL7vqqs6PYd5F5f+jyws3fHXlf70L8670tO955f/7tB/7ldNWf/CbmBfbvaS8nVuT877Ulpx39Q7b/mttf6on75mevGd58p7jybvJk3e3J+8+T979nrwXePIe8uS9wpP3Gk/eaz15b/TkvdmT9w5P3n968v7Lk/ceT96HPXkf9eR9ypP3GU/e3ouS87o9eQd78lZ78g715B3uyev35A168h7jyVvnyXucJ+8YT94GT94mT97pnrwzPXnne/Iu8OSNevLGPXnPK+ep9rMzOW/54uS8r3Ul57112bb/33ez0qFv7vWE8Sj5Wlf+n6vp6i1kB7uvN0PYYxnCLobJk/6e7GD35DLkSV+GsMcb/J5Bd5bync8Qdn+GPMnQDmaqO4MNnvCV6diQpT3JUC8ztSeB+hDB8jtDO9g3kCHsQP3BTG1VljwZzRB2luNOMUzYWfIk0zEtQ3uSqe5k6Gtmar+zhJ3hnCRTnc9yDpihnPQHGivIVC9HMoSdof+dqR0M1D8JNT4Yqm8fql+VKU8yHNP6M+R3pjzJUi+zjOGNBAq74dvPuDKV70a8aibdGdrv3izjmo01xpmwG2uMM64sZbCxxjjz6g10LaOxxjjz6skwbp/p3DVU2Fn6gxn6PlnyZNs7kO8o72HS9qO+KyFvSfn/ruX/C8v/y1tUH9mT3GJHZ34hwLWGP5ArFhdG0y9j+gsLyzCbsoGfE/gZ8T9X3qIZHTMxBR/bInjj/eaL4HcnyEdW7Zf+y7L9yzxtFtk5eiKavIzw9iwq87G8BfGR/fv7lX9fveWiSy7acs36q64au3LL0ZdfekVpy0XDl4xtvLI0csnY5rErr7ro8ssiuproXmjm54ugXa0T9jztH8jlBGdLGX5bGT5frZCP5Xcp33dQ2+Q9iXWzpHO0NNI73jvaN1wslgo9faNLCX58NQOfxFEN2wb29s6VDcySPwIzA/iqDeS2xFdnNN1WYJ1Yl+X9lvj3XlAnvo4F2E2Ud5yCV/KOn9DpiK8TIK+V8k6EvDbKezzktVPeSZC3A+WdDHkLKG8D5C2kvFMgr4PyNkLeIsrbBHk7Ut6pkNdJeadB3k6UdzrkLaa8MyBP7LLInvhFxuNbr8BfmgF8pzqT4xvSL7hkDBInN+axvL9VHoOOH3MD0GVb3Miz5cTLrtpSumxkTDgj0JrpvoXuW+m+je7b6X4Hul9A9wvpvoPuF9H9jnTfSfc70f1iuuf2CifxebVXU4Z5TfSsKaFuZ5Ts+XRGla0gWuNWymuFvDbKa4O8dsprh7wdKG8HyFtAeQsgbyHl4ejaQXnoYSyivEWQtyPl7Qh5nZTXCXk7Ud5OkLeY8hZDXhfldUGeyF8InpyEP+fbk9u7/Dvw2Wx/w5PzX1aenOhp/Ju9hGo9uSzbjB5Eawbw3dWzLEq29+JBLC/ftyhlURfaoIzWL5HyrClKHqc4+hBBu/OFQt5Ziv78+Oh4obd/sGc431fo6xsvjvf3DRRHx3uLpdH+sXxsQAbH+nPj+YGxsf7ewkh/3/jg6Mi2lQRsa7OnbdWOpci/erfhMpOZbxu+pvy7YcO9VyFjG9uTsb1RbbjP19RsOOtcfIndrmTf0YYL7CzHRScTfRn3WX5ZlGxzxYbvG01dyOe2KNm2tVFZsRWxH7+MeNeWTdv6eO6AlzZ3YJu9QGlXkwJLG6OkTTGMgwAul2N6UHd4nqPJety27vJvLeIeX+vK/3O1XXmNjiaFDm3MQ5mq93FNTtqZ73FN0z1pR3tU2a9I4v9XykfqBB69Hm/MefyX2I8nTkQzZATxauOl1IllUGIaaMuyXd3b1rcZ8r6q1T0pZ4S7IPCPyQb+pN4dmw38HoEv/lCUAWxe3TCCPyrwT1BpHy/2F0b7S30jwwOjw4WRYmmgv1jqL/UO9uXzo6Xc6OBgbrhnJFfqHx/oHegdG88Pj43lRwZL47mB3tJkv56owi6MDffnCr2lvoHh/Hipbzw3XOwfKJTG+/tHS6ODRTfDzI3mR/ryIz358YGBUm+vGy0G8/nxscHe8YE+gf14FfbYwMDI4HD/eG68ND7YU8r15HqGR9xENtfncIyPuWFnvFAczPUWBtwYNNo/kh8cKQz0jI+MDY7nBifpPkmFPdrTWxofGR0dLubGBwv9pf4Bx5vB/mEHYCBf6MuXRgYdz8bzY6WR/pHh0ljO4RrLuxl0frS/MLnCeHI2/Tkp6xtU2quDxQ8ENq5SGX5xeRL+xmzgT/JmUzbwJ3X11Ez6Nj/JH1m1m963A/mS08/R0WJ+YHRktJAbK4w7zRwoFUf78gOxahUGhkddeGfMKXR+oNTf0zvW21cqOR0rjeQneXO6Cnusp79YLAzm+4v5/r7RQt/YaG5gZHxgtJAv5fPD+dHR8XFnF4ad0o739Q/2Ob0aGxnrHxsY7nPKO6lPZ6iwa7sE9pnZ8HySL5szgT819p2l8CY/UOjp6S/Ep+sPjObyxdGRnoGentjwuI4d6RkbLOYHx4s9xcLIqDPQxYFSPjZ4I4PjA7lpvDk7G9on5f2cbOBP7kg7N5u+HRb4T5iYyftcbdeknT9Pgd1TKozk3EhT6nVqODbQ6/TLDaFjwwNj4309peGRYq5nNJ/PjxXdn56x0eLgsFPh4b4xp7LDrscn+/X8bPgyInOtG2BexL6nnf/Um9P8fjv4fWrc3w5+f48WtzGkfzLm1Z4N/Mm5xQ7ZwB8V+AuygT8o8BdmA39M4HdkA79f4C/KBH7PpH7tmI38T8YFOrPhz2RcYKds4E/unF2cDfxJ/nRlw/8+beeVIfxBiYdIfE5wxJfgXgbPDcei0SbCF0XTx4mI8HcQrdbzqybCJ/Qwfzj2uLNCa5eSx2PszgqenRU8GqwWQ1ithrDaDGG112kbdzCEtcAQ1kJDWB2GsBYZwrLkvaUO7VinsDoNYVnKhCXvLeVrJ0NYlrptKROLDWFZ2uguQ1j1Oj6KH7cwgeZ15ftcjZfA3zUb+AXhxS4eXiB+8ZXQt2pK+C+wOA/fiEJYxm3L+9qG9HM/7wL0IA+SYO1SJayFSl4Wfbqzp92IP2sZ9vFO88el/HIP/Vh+cTlvN6i/nNq2ezZt6xFad1VoXQ44Bf+O0ZTdLr+VcszY8NUXnnz5hRFdbPqEfXtCGey25mimqdgtAVZE9wyzBeDhtSPAL5N/3NiWkSedUbrwwrFR14irqMIMCPiaF16d0UwhkTIZG8GetIZL8HdEmSpw3idUmrGJe0UUqdwrJ19eGj26dMVVV18y1kwcxWk3cxWhcuu5x5qAsshTDpet40uWVVui5Es4KvB2gzyNEwJTTEGSDnCvLVXwyrNmpfyuBGtXpZ7Q3uKpjzCwHkuUTyvSSK20I760IUlwpwkfZaN9+eJstS/r8JGvr5Cvwp/dsuFPwacDuyn8kb5cruQJLBmO2hNgSd02Kv+a8v8uKhdf+MJp0vC9XOFfTMMriHbkPcthlnxGfEI3PkP8HVGmo1Le1++7KnxcGM3sd0P+9KTpV6RX+nJ3JU9gyQu67ZHfbWqj8m8r/++icvHFcri7Qu/uCv9iGt5MtCPvWQ6z4XMxn1YOBX9HlKVeTMmh1u+7KXzM1uUu5tL0K9IrfblCyRNYe5Tv2xNgSd02Kv/+8v8uKhdfLIcrFHpXKPyLaXh3+ffCBHrXle9zNV19I1pf2cHvn1w2XZEN/MllwT2y4c+AwN8zG/qHBf5emcAvTIaP9s6G/lHRrX2iqYvtZDc8t9wCk9ZOCv4OojUrO9lN9DB/eNlxpUJrl5LH4ZGVCp6VCh4NVqshrHZDWIsNYbUYwtqxTmEtMIS10BBWhyGsRYawlhvCspT7euXX7oawLGV1hSGsPQxhWfLeso2dhrDqVVb3NIS1lyEs8b1kvO+Gek3l/wuVetZzd8Qn7cBniL+DaLWlZ8pX0vjaHc3kq/Bn32z4M0nPvgo9+yr8kb5cpeQJLDkAsz0BltRto/Jd5Q7ponLxxXPKVQq9qxT+xTQsKsNdrNDL8cFq5R3rM4+wHst7lv2J+KQd+Azxd0RZ6l/OK18aX4U/q7LhTy6N/CC90pf7KXkCa//yfXsCLKnbRuW7Sd73A5pY3vdT6N1P4V9Mwx5N02lH3rMcZsPnYm9aORT8HVGWejElh1q/76vwcWE0s98N+VNM069Ir/Tl/kqewDqgfN+eAEvqtlH5Q0kO9weaWA73V+jdX+FfTMNBZbgLE+hdV77P1XixjgoOxI18M+vH/Hhqeyv4O6Is5WpKzrV+0uyF8OeAbPiTY9lEeg5Q+CN9eaCSJ7DkWIP2BFhSt43KH0lyjjhYNiUP6T1Q4V9MQx/ZW+Q9y2EmfM4VU/u5gr8jylAvQA61ftfsxcJoZp9Yry1V6lekV/ryICVPYB1cvm9PgCV126j8CSSHBwFNbG8PUug9SOFfTMPRZG+R3vhaV/6fq+3Ka31lCD/XqbST9ehgeG4nJ+PjafVI8HdEM+UkCz06mOhJkgPh3SEKrV1KHvYh5iGeQxQ8DVgNWA1YDVgNWA1YDVhhwzqgAetRAWt7kK+GDjX6sWEnGvoYKqyGfDVkdXuU1YY/0eBXo40N3ocKqyGrDZnYHvnVkK9GP26PsBo61JCJ7ZH3Dbva0KEGvxqwKsFqzK0abWzY6IashgqrIV8NuhqwGvo4l21swGrYnMY41Ghjo40Nm9PgV6MfG/IVLqxGrKPRxobNadiJBqyG3Dd0qMH7hg41YNWzrDb8iYZMNHjf4P1cwmqMQw1+NXSoAasSrHqXCTk3GM8c4+85aedzHezBg/WlXKdSr6n8f6FCX4xnXfk+V9OV/twzwd+h8MSOnqlzzw5JyVfh3WqF1i4lj+VktYJntYKnAat2WAfWKaxGGx8d/Noe6GrAenToY8NONGA1ZLVh7+eSrkY/NtrYkK/G2BEqXQ2ZaPCrIV+NfmzAauhQQya2T9437GpDhxr8asCqBKsxt2q0sWGjG7IaKqyGfDXoasBq6ONctrEBq2FzGuNQo42NNjZsToNfjX5syFe4sBqxjkYbGzanYScasBpy39ChBu8bOtSAVc+y2vAnGjLR4H2D93MJqzEONfjV0KEGrEqwGjLRgNWA1YDVgNWA1YDVgPVohyXnnuGZYwcTnmrPV8P6Uk472yxO68r3uZqu3uJCpY2G8McF/ppM4PfnBf6h2cAfkLPTDoumribqm8PheYsZ7kK+ifBFZfj4DPF3EK229EydO3c40cP8EbkW3uUUWruUPJbxnIInp+DRYO1hCKvFENYiQ1iLDWEtN4TVaQhrgSGsHQxhWcrEToawVhvC2tEQ1hpDWK2GsFYYwrLU7T0NYVnaQkt9XGgIy7If9zaEZSkTlry31G3LNlrKRLshrHq1E5Z0bQ8+U2NMmz/eW+pjmyEsyzYeWqd0WfoTlm2UsVabS8dpXfk+V9PV39up0NVEuPPw3HAeP9ZE+IRP+Azxd0S6PV1nQs/UPD5P9CT1m/CuR6G1S8njeXyPgqdHwaPB2sMQVoshrEV12sYFhrAWGsJaYQjLkvd7GsJq9GN1sPY2hGUpEzsZwmo3hGVpv3Y0hGXJe0tZteR9vdovS1m1lK8dDGFZ9qOlfFnqkKV8tRrC6qzTNtarL2fZRkt/ol77sV59uUMNYdWrn2PpYzb8iUeHDlnaCUu6LOVrjSGsww1hWfLe0geQsVbiQGugXlP5f7YxtJ7Ue2E4hrYmE3r8MbQ1Cl8XJvDVhp6eXJp+RnqlLwtKnsAqlu/bE2BJ3TYqf0LZUHYpOFYRDslDegsK/2KQR5fhLlboZZ3W+iWvwO1S6jOPsB7Lezb9mSuklXfB3xFlqX9T8t6Tkq+afPUQzzGP+y+tXPhgcdxa8uNroVLPkF/FtP0n+DuiTOUp7+OrNg4I74oKrV2UF19nTEyV47wW5VnzHMPi/o6vdeX/uequAj/oVPCynPXCc8N+7U0rZ4K/I5rZr1nIWS/Rk9Rnwrs+hdYuyosvlo0+BU+fgicUWCiji6NkGzpbO9mTEk+xRjzFlHhqtftrFDydSr250cd8aj+V9TGjccirjxpfhT992fAnl0Y/kF7py34lT2ANlO/bE2BJ3TYqfyP5qYiD/VTJQ3r7Ff7FIK8jPxXpLRBcrV96FbianyPlHm14OpV6rL/ZyGf68VTwd0SZju95n75ofNX0pY94jnncf2nlPERYIr99HjzVjttYv6+BpyY8nUo91nvsVzM9y4/l0uq94O+IMrVDeZ/ca3wV/gxkwp/RcR5rkZ4BhT/Sl4NKnsA6onzfngBL6rZR+bfQuI04eNyWPKR3UOFfDPKN7dNpR96zHGbC51xuPK0cCv6OKEO9ADnU+l2zvwujmX1iSM9Ymn5FeqUvj1DyBNaR5fv2BFhSt43Kv5fk8AigieeDRyj0HqHwLwb5rjLchQn0rivf52q6imNaX9nBH5t8N/eITOAXJuEfmQn8Uk7gr80Efs+gwD8qE/jDAwL/MdnIT6/Af2w29PctJHi28Acm5Wd9JvB7J/n/uGzgjwr8o7ORz0n6j8kEfqEg8I/NBP7YJP3HZQK/OAn/+EzgD0/ahxMygd8/ad9OzAT+4KR+PT4b/k/Kz0mZwB+ftG8nZ8OfSfo3ZEP/ZP9uBPiWa84C/9RM4G9bA43TpmjqalHaJPjF1zsFyjcl/BdYnCe4OghWVn611jakn+fNm4Ae5EESrE1Vwlqo5GXRpxs97Ub8nR5atXbsZciTnQxhDRjCajWENWgI6whDWEcawlprCOsoQ1jNhrAeYwjrsYaw1tUprPWGsB5nCOtoQ1jHGMI61hDWcYawlhjCOt4Q1gmGsE40hPV4Q1iWY8dJhrBONoS1wRDWqjqEFV/HTGz7n208sDiYbbyuUMo2XlcczTZe11vINp5WzGcbTyv2ZxvvKhazjXcVR2SuIeOm4IgvLVZlNy8qpj4jQvB3EK229EzNT48lepg/vO/gOIXWLiWPbcxxCp7jFDwarIWGsLoMYXUawlpuCGuBIaydDGEtMoS1gyGsFkNYO9YpLEtZ7TCEZcn7Iw1hWcqqpT6uqNM2Wurj4YawLHWoXnm/hyEsSzthOdZa2glL3lvyq17ly9I3sexHS95vD3ZiT0NYaw1hPcYQ1lF1CuuxhrDWGcKy5P3qOqVrvSGsZkNYljIxYAjrcYawLPvRki5LWa1XW3iIISxLWbXsR0u66pVflrJ6tCEsS1m1tF97G8Ky9L/aDGFZxhQsfXLLuYJl7FH8e4ljr4d6TeX/2a4B5Ga9BrA+G3q8awDrFb5q+20N6RlN089Ir/Tl8UqewJK19fYEWFK3jcp/uRzQ6qJy8XXGxHQcxyv0Hq/wL6bhcztMpx15z3KYDZ/zI2nlUPB3RJnqRd7X78cqfNT6Xep2KXnss6ftLw1WqyGsdkNYiw1htRjC2rFOYS0whLXQEFaHIaxFhrBOMIRlqUOW/dhlCKvTENYKQ1iWum0pX5Y6ZGlXtwfe72AIy9JGiy2U8wnQH1pGeKqdG2B9KZft+2S9Pdm+T9bbl+37XsXxbN/HKvaJXyf7OwUH9g3u17TzQQdSn+sk+DuIVlt6pnziDUQP84d94o0KrV1KHu/P0t7X2ajg0WAtNITVZQir0xDWckNYCwxh7WQIa5EhrBMMYbUawrLkfb3K6gpDWC2GsCzly9LmtBvC2h54v0OdtnHHOoVlqdsdhrAseX+kISxLWa1XH8ASVmPcrg5WY9yeP/lqjNvzx/vGuD1/ul2v47Ylv+pVVg83hGXJL0ubY8n7PQxhWeqQ5bhdrza6Xv0JyzZa+r6W/WjJ++3BTuxpCKvZENZxhrAs4+THG8J6rCGsQwxhPcYQ1mpDWAOGsE40hLU98H6tIayjDGGtM4Rlya/HG8KylFVLHapXua/XNm4PttCSrsbY8egYO04yhGXpy1ny62hDWI8zhGU51lrKhCW/6nXs2NsQluWcr80QluWajmUcwDI+Ybk/h99hwr1hTeX/2Z4Jvu0dHcQn7cBniL+DaDWmJ+/j6waFrxmffz3SRPCRnk0Kf6QvT1XyBNZp5fv2BFhSt43KH1xebOuicvF1xsR0HKcq9J6q8C+mYb+F02lH3rMcZsPnntTfXxb8HVGmeuE9713Tb63fpW6XksfxsbT9pcFqNYTVbghrsSGsFkNYO9YprAWGsBYawuowhLXIENYJhrA6DWFZ6uMKQ1iW8mXJr+WGsCzly1KHLO2qpUxY2tV61W1LfbTUoS5DWJb6uD3I1w6GsCx9AH5HDv1tfkfONyfR8GB9Kdep1Gsq/8/2e1GDqd/REvwdCk+y8PlPTclX4d1pCq1dSh7HK09T8Jym4NFgLTSE1WUIq9MQ1nJDWAsMYe1kCGuRIawTDGG1GsKy5H29yuoKQ1gthrAs5cvS5rQbwtoeeL9DnbZxxzqFZanbHYawLHl/pCEsS1mtVx/AEla9jtuWvLf0ASxttKU/Ua+y2hi358+uNnzy6mA1fPL5k6+GXzh/8lWvfqElv+pVVg83hGXJL0ubY8n7PQxhWeqQ5dhRrza6Xsc0yzZa+r6W/WjJ++3BTuxpCKvZENZjDWEdZwjrEENYlutDlvw62hDWakNYA4awTjSEZSkTjzGEZcl7S9221EdLHTreEJalPm4P8rXWENZRhrDWGcKy5NfjDWFZ2kJLG12vcl+vbdwexlpLuhq+yaNj7DjJEJalP2HJL0uf/HGGsCzHWkuZsORXvY4dexvCsowptBnCsly3sowzWca/LPcX8jumuLe1qfx/YaTzZl35Plfblfr7ZIK/g2g1pifv46u2T1v4c3o29Aw3EXyk53SFP9KXZyh5AuvM8n17Aiyp20blX1te1OqicvF1xsR0HGco9J6h8C+m4eGO6bQj71kOs+HzSOr95oK/I8pUL/K+ftf0e2E0s98N+ZNL069Ir9BzZib05AoiK2cpuIXWs8v37Qm0St02Kv9uksfNSp0uyosv1oHNCq/wWfM8wTpLgYV8RPvwljIvNP2L07ryfa6mq9DDdktwIO5sZKm3P63uC/6OKEtdm9L9M6OZ/aTZUE1OpW6XksfxxtnKVvx7RZ3CajGEtYMhrBMMYVnya4EhrIWGsDoMYS2q0za21yldiw1hWeqjZT/uZAjLUod2NIRl2Y+WstplCMtSvloNYS0xhGUp9/VqcyzbuKchrL0MYe1tCMuSX5a+iaV81atfaCn39erLdRrCWm4Ia3vw5epV7i19k8aYVh2sevXl6tUWWvpylrbQsh8t+VWv/tcRhrDq1f9qM4RlqduWOmTJL8txyFKH6pX3lvbLMi5Xr7EhS/my9H3r1ces17HjdENYMnZ0EmzJj69s16vyqc/l5vWqjPYoeNerTlf4Wu16VTP8rid7aqmH9Rprt7SBlrAa61XVwbKM7VnqkGU/Wq4nWPpK9RrHsZQvS7rqdV2oXmMclv1oudfB0t7z2bfoW/HZt5ofcqYHD9aXcp1Kvaby/4WRLmfryve5mq6B3ibCJ+3AZ4i/Q+FJFv7d5pR81fbmbSaeYx6/R+Hbn4Z4NFgLDWF1GcLqNIS13BDWAkNYOxnCWmQI6wRDWK2GsCx5X6+yusIQVoshLEv5sqTLsh8t6bK0q5YyYdmPOxjCsuT9jnUKy9JOdBjCsuT9kYawLGW1Xv0JS1gNH6A6WA0fYP7kq+EDzJ9MNHyA+YO1PfgAlvyqV1k93BCWJb/q1U7sYQjLUofqdeyoV9+3XuXL0o+27EdL3m8PdmJPQ1jNhrCOM4RlGb8/3hDWYw1hHWII6zGGsFbXKV2W/WhJ14AhLEuZsOzHtYawjjKEtc4QliW/Hm8I60RDWPUqqw19nL821qt8NcahhtwzrJMMYVn6mJb9eLQhrMcZwrIcty1lwpJf9aqPexvCspyLthnCsly3soxPWMZNLPczSaxD9g42Q7115f+5mq7CsOy7OwRgNxFetKMtZrhzxSbCJzzCZ4i/g2g1pmdyz+Ig0cP8kX4Q3h2p0Nql5HEs5kgFz5EKni4l74wJe1gLE+hcV77P1XT19mryZAe/b7hTaRvLMs5z7WQnP5BWlgV/RzRTPrKQ5bVET5JcCO+OUmjtUvJYRo5S8Byl4NFgLTSENVindLUbwtrdEJZlGxcZwtrBENaOhrA6DGFZ8muFIawlhrBOMITVYgjLkvcLDGHtVKdt3NMQ1l6GsGTeJO/44LjUQ3iaFTzNHjxYv9mDp1gjnqKCp1Op11T+n60v05P6fH32ZZozocfvy2h8rdaX4ZhTvYzzhxvCshzn69VGdRnC6jSEtdwQ1vYw1tSr321J12JDWJZ+kaWvbCkTbYawLGWi1RCWJb8s7Ve9zlMs+9GSrnodOyz70ZL3lrq9Pc156o1f9TpuW+p2FmOtzFdwftNU/r8wgYZ15ftcTVf6uZ7g7yBabemZmutpfF2r8FV4t06htUvJexz8xjzEs07Bo8FaYAhrR0NYiw1htRvC6jKE1WIIq7VO6drJENYiQ1h7GsLayxDW3oawLPm10BCWpT6uMIRlKfeWttCyH9sMYVnaHEuZ2MEQliXvO+uUrhMMYVnKhKVvYjluW/ZjvdovS/my1Md6tdGWsCzlq8MQlvBe1g9xPreB8FQ7p8T6R80xHm1+im3P1XT19fD8TnAg7qPhud1ctK/QRPiET/gM8XdEer/b0DM1Nz6a6EmSQ+HdcQqtXUoe740+TsFznIJHg3WoIawTDGG1GMJabAhrRZ22cSdDWIsMYVnKRKchLEuZGDSEtT3IxEJDWO2GsOpVty15b8mvtjpt43JDWJb9aCn3HYawLOV+D0NYljKxpyEsS5lo+F+PDhttOdauNoS1PdjCvQ1hWdqcowxhHW4Iy1KHLPllOaa1G8KqV35Zjmn1Orey5L2lDlnyy9JGN8aOR8fYYTm3ajeE1WoIqxFTmD8dsuS9ZRuXGMKq1/mQJe8XGMKq13ihpZ/TsBPVwbL0Jxp2Yv54X692QvwvPnMkvtaV/+dqu/KyvvoYgN1EeI+G54ZrwX1NhE94hM8QfwfRakyPd20a+TPbtWmrtbD4OmNi+4El+0BQDtdH0/FofXa0Bw/Wl3KdSj3WBbZn68r3uZquwnBaXRD8HVGmupn39Z/GV+Hd8QqtXUoev69+vILneAWPBqvTENYCQ1jLDWG1GMLayRDWIkNYKwxhtRvCsmzj4jpt4w6GsE4whHW4ISxL+bLUR0v5srSFlnQtNIRlKffbg0zsYQjLUr52rNM2WvK+zRCWpdy3GsJq2IlHh52wbOMSQ1iW/kS98n5PQ1gNHaoO1uo6beP2oEOWvLecu1vOkfl8R2wzn++4WsGz2oMH66/24CnWiKeYEk8W7Vmo1FtX/p+r7urlBxzDFdyIl2V/lrhn0NJE+IRH+AzxdxCtxvTkfbKuxWyFdycqtHZRXnxxbPhEBc+JCp5QYFXSjfXRdDzV6sb6lHhCtikLI31cWFe+z9V09Zc0nbaD3zPKOiE4sG2b4bmd/hZTn4Mk+DuimfKbhT3ZTPQk6ZPw7iyF1i4lz/LbNe2GsCy/ydpiCGuRIax6/Q50vX6z3LKNlnRZfuPKUlZbDWFZ6rYl7xfWaRsb9uvRYb8s22jJ+8WGsCzl/nBDWJa6Xa/6aGmj63WstexHy+/qbQ/j0PbQRku6LO1qvY7bx9cpXZb8OtQQluX3Si19k3od0xr6OH9trNdxe3uYp1nKxFGGsOpV7k8whFWvsY4uQ1hZ2GhtTYLP/6t2TQLr18May3E14jmuztoT8jr0fLZnQ414NqTE05CD+mmP4b4HugpFWWs7FGA3EV5cXzNcFxxrInzCI3yG+DuIVmN6JtcpB4ge5g+vU25WaO1S8niNRVsP3azg6VLyeK9CA1YDVgPW7GAFuH9tlB+ILULbxXY8m/0m6fev8X6TjMYV734T5A/b8bMUWnneEV8sg7Odw9QrrIYv9cjVMzKeL/SO9ffm+krF3tG+Qs9oT39utNg7ns8P5HsGiwOFwvhIcWB0oKcw3tPfM8L+gOBGvDwXTsBd7VVMq4OCvyPK1CbkfTKo2Wfh3dkKrV1KHp+hcLaC52wFjwZrtSGsA8u/G3OqkO3AeLG/MNpf6hsZHhgdLowUSwP9xVJ/qXewL58fLeVGBwdzwz0juVL/+EDvQO/YeH54bCw/Mlgazw30lorZ6npvv8A/OxP4+YLAPycb+D0C/9xM4Bcn+f+EbODnBf55WcDP53IC//xIk82agE/S/sRseDNJ+wXZyM64wB/KBP74mMAvZdK345P8Gc6G/lGBPxJpslMYG+7PFXpLfQPD+fFS33huuNg/UCiN9/ePlkYHi7GvM5of6cuP9OTHBwZKvb2lkd7BfH58bLB3fGDS7oxmQntuROCPZQN/WOCPA/xmO/gDAv/CTOAX+gT+k7KBP9m/F2XC/55J2X9yNv07yf+Ls4CfH520PZdEU5fA7imO9g2Xcv3j/aXSwHiuONwz6v71Oc0a7+0pDRZGSk7TRofHSs6dGOwZGe0ZLYwN5HoLY4XBvrGx4qTeXqrAztVywXhyWTZ8n7SZl1vT7oRSYF9hD3vST3iKCntsYGBkcLh/PDdeGh/sKTn57RkeGR13s0HXk+NjI73j44XioOvCgdHSyGj/SH5wpDDQMz4yNjieG5yEfWU2PO8V+FeptI/29JbGR0ZHh4u58cFCf6l/wMneYP+wI3AgX+jLl0YGnX87nh8rjfSPDJfGcq4tY/nSaH9+tH/KzmzJhPb8JG+uzoY3k/Q/NRv4k3byadnAHxT4T88G/uS7b9dEmuzUdE3ayGcosPOFgrNGTsjGR8cLvf2DPcP5vkJf33hxvL9voOhUq+gkcCxfLBV6Bsf6c+P5gTHnkRRG+vvGB0dH+iZhP9Oc7kJvvF/i4vJGB5mDXgv83wV+x+lZ5fu2aGoOujOUuRbysfxD+237H+O7vIxPYh9LoV0Ss5E2L4Pnhro42ET4okiPGwn+DqLVWDYn40bLiB7mD8eNdlFo7VLy+HyNXRQ8uyh4NFh7G8JaZAjrBENYLYawFhrC2skQ1oI6bWOHIax6la9OQ1ithrBWGMKylC9Lfi03hGUpX5Y61G4Iy1ImLO2q7MfvVOrJGC5+xK5Ew7ryfa62q6eJ8Ek78Bni70jgyTobeib9iF2jdHyNeSj+xdVbLrrkoi3XnHx5afTo0hVXXX3JWDNxFL0x5ipC5dYjdzCvhZ5xuRMnpt+fPDGzXqTAbgF4+0CexgmBKd4vtmmfhHrIi0h51qyU35Vg7arUE9pbPPXjK2OpnoyWd2cDv+DrG2yT4O+MZvK8KeG/wOI8wdUR6TxfZ8Q7X9uQfrZs+wA9yIMkWPtUCWuhkpdFn+7qaTfi7/TQqrWDZ6LayKHNlKR8t4cuLL9YwS11hYcrIc96NEniYTfgFPw7RlNvIJWt9zFjw1dfePLlF0Z0JQ28y6mcmMPmyG8OEVZE98vpWQvAw8sXAEij1kJnfHURrPj3zoSn4SA0HITtw0HQDC9L1GLlOb9mUa17vkHBp+E5tUY8pyp4Fir11pX/u1WyfKlYGhgdLeYHRkdGC7mxwvhIrjRQcutX+YF4NbgwMDzqorNjo/2l/ECpv6d3rLevVHLLwqWRfE88nfoWhUmxf5ZSe0QuMEyq9Wcblf/1qm3/Y3zfK+OLNXC3cn5ZAx939SUXnza25cqLxp465mw9LoZMsjAikvA6bWL6/ekTM+tpl88PY/bPlyEV/HPl52miq/kV1RlSFijkKkLl1s/WkIoEyDUbQ+ozQAhTMwi7JtRDXkTKs+Yo2dBpRpLj9z5DGV8N12GmxGfjOrDEb8+uQxqJT+s6JEl8kuvA9WSI0jSkjcr+ozxkZawZOWwTt6ExRk1ejTFquxijWpR6LFG1RtCkHfHVFSW3f2E0kx/ryv9zubGe/mKxMJjvL+b7+0YLfWOjuYGR8YHRQr6Uzw/nR0fHx4ul/uHiWP94X/9gX29hYGxkrH9sYLivJz9ezFZ7e/uytVq9j+y1WFL+qIEWZeLJc3f5PmmvBU4ysPxuZRwxvl3Kv2PN3r+cX9bszaVLLhotbRk79rKnXD129djoKZdvGbtq/WWjxz517LItVU8pHj8x/f6kiZn1tGsRwDsE4GthTlFOKS8vMbQDHizDDJLye5SZEi9Q3rx2229NqIWeTqov+fElQrOGaF9Xvs/VdqUeUgR/B9Ga1ZCyhuhh/sxuSEF1YK4iVG79fA4ph0GexgkeUrBNhyXUY8nnZ81K+TUEa41Sj4cUrT7CwHosUayFaKYOUXCzFq4BLbxtbTLeQ6KZfGBNXKrgE609jMrGl2htjtq0rnyfq+nq7U+rtYK/g2jNSmtzRA/zZ3Zai5KGWDYTVCmDZfHaDJRFCeW03t9FqccXO0I5yosvkYo81VlXvs/VdOVT23LB3xFlKaVTUpEnepg/zcSfQjb8maSnoNBTUPgjfdmr5AmsvvJ9ewIsqdtG5deXrVMXlYsvfuG8V6G3V+FfTMNacgCR3t2Idq1f8grcLqW+lNPw5GrEk0uJJ4v2SD+JzXkCOLsnE2/XeNqsjXZrUrZ5TZSMZ7ca8eym4BE574a8AylvpSdvX8jLUd4qyOP10v2ATpF5ydtfabPkHeSBebACM+675qVTdeJ0DJTTRir2qtYCTqyL921K2UHKk7JPArkaWjK9DdjfzGtNzyQP7Q7zRbMvktcH9ZjX/R6YRyow4/b8ldrD/IovsfXHwnPLyXbasVDwdxCtWY2FxxI9zB8eC0/Ohj+9TQQf6TlZ4Y/05QYlT2CdUr5vT4Aldduo/NU0Fm4Amngs3KDQu0HhX0zDFSSHyPumhP8Cl5+xHcW2S/8JHtT/nYGeZyyZ3ha0Gy1K3V0hH8t/A1Zxn0VjEtbnvtP0cLbtP0Zpo4/P2cpzvpBW3wV/R5Sl/ZnSd02/jlX4KvzZkA1/etLoD9IrfXmKkiewNpbv2xNgSd02Kn8n6fspQBPr+ykKvaco/ItpuIX0HXlfq7z7bCLOqlHf7yN9l3qo71j3HMjH8h8Efb+f9B3ll/suq/az35EzxIN+MAajk2QB2y/8E95osij1NkIe6xzLGZZHGBp8gVFJNh5eorctSTaSxs5/A9l4TQrZWBwl9+fiaGYfoJ1Psh9Y/pxIb1d7Qvmkdr0Jond3rp0OMwd1tL7gcVPK/wfAvGetTie2ay084+2+mjycorRL4+nGqDJu5DOvS8zW7r5T4ak2nkv9ToUWHs9Z7teV73M1XcXUsSzB3xFlOX5OjeeV+orH843Z8Cfvk8ONCn+kLzcpeQLr1PJ9ewIsqdtG5T9C4/kmoInH800KvZsU/sU0vJ/Gc+R9reOMpquVbPYnyWaj7dJs9hMgH8vfAzb7M2SzNT3Ouv08599oiAflh8fzUwkWt1/4J7xB2T2V6p0OeVgOx3Pc1Xu6gluDn3Y8/9YSvW1JspGkS08F2fguyQbWP4V4g3zbSHnY1zyeVxrHnkDlN0GbfX5SG5X/iWc813wflBsez6X8zz3juWZnfOO5JoublHZpPOXd5msVWMhnHs81nmL711L7pfzvUo7nUl+LLx5AeRhf5HkOxhd5roFrJDw/wPjiYZSH8UW2w0dCHvqRHF/s9rRnJeRxvBvj1rzmswryCpS3H+T1Uh7GrfsoD+PW/ZR3MOQdCW2VuDVvwmkrP894f4i6FZL5iOsNUk7oymjFObV/KPg7suXTpD+m7dbQ1mOqWwHvht/MVYTKrUfuYJ5vBTy+LPataHsB1igwtdEtl1APeREpz5qV8rwH5jClntDe4qmPMLAeS1QTPU/at9IN+Vh+l7JYxFb9eTSqabi6gT4eWYT2pB1s3USDlN8daLh5rQ6zNaFdaxJgrlk6RcueS3WYkQJTa1eO2sU0HEY0SPluaNedtCcop9SPEp7F92gZefWXd1SwzBxC5fMV2tNN7ZHyB3j6qVuhAXWSeco0cJlcAg2HKDQo1u3oy6+4pmzdIrpa4bdQg/fMed6f063ASbqEG3ErRSKFO+inrFHq8TiHEiB145bLvGDylelLxraMJbSdLXdTAs7mSL/SjMHoY83HGCz452oM7id6ksZgzc+Uul1KHsoH3lfCE8uE7Psty8TpWy6/Mkkk0g7OTQpZXD+qAEvu2VXHvHoVo75s6PGKEfLHZjMjchWhcuuTeq6StFi8h4YbPTROsCuHbToyoV4lI9uslO8nWP1KPaG9xVMfYWA9lijWsCRXjl0eKX8CDI23rdXbKfcj8Ju3GM+9Vm7bLIn4hGf47NGjlfxiAA4DCFXKYFm8uoCyKKGcJvmnTsysx5dwlEMnkhdfIhVHUp115ftcbddIWqkQ/B1RpmNH3mehkD+8LLM2G3qGmwg+0rNW4Q9vzeG+i5OE4doTYPH2Qyl/Xln8OSQYX7wso22H1LalxTScRSEp0Z2LYIL3xPJv7T20fmpftadPYX22lN2Qx1sncdrAWyAP8+TlPHl5pV2z3Y4Z8+0tS6eXQ7luSvgfX76lGF8f+0ZxTcZYJpNgnU2wsD5vGzy5AqzNBEvb1sDuOtbzbYfJdttVbjStvRT8HURrVvZS28aB/GF7mc0y/7bxBOEjPb4l2qTtO3Ga7RLV9WQvccmG7aVv2R3598i2T9JpbTtFtTqtHYjESzJoc3Gp8tkUfJN66N1i3VHIx/IXrJqCeRPZe23bb9btZ/vbb4hH2wbvkwVsv/BPWzrcSPWStmfgjEbbkoEwNPgCo5JsPH+p3rYk2UjaanQMyMYLPL4Ab5NCvvVTnjar9NkzLD9K5bVtadpSJC85v0wJIDdRfW1bWnyJj99G5V8BMNNsS9NmOz5Z9G1LwzbztjQtvOXblqbxFPUTZ9FY/rUKT33htzTLvvgyMS9/4wIQb93HwD0vf6Ovx35n2qVx4Tf6ery0+3Za2s3oRFV1aVdwabqKy+WYF0Xp/PZ9U+LZv0Y8+yt4Mj5xOJ9xjLTg00lsE4+ByKemhP8Ci/MEV0eUqRzmfW3z9TNGmrrhdxKsviphLVTysujT7ii53Zrd02jV2oEHJ8T3K8v368trEY9saSTftBtoaSI+rMyED4XUr+oJ/o4oW11uInxCD/OHl5H2VWjVbN9J8BvzEM++Ch4NVrshrMMNYS00hLWTIaxFddpGy360bONiQ1iWbdzBENYJhrCWG8JqMYS1whDWAkNYljJhqY+WOmQpE5b86jCEtaMhLEvetxnCsuR9qyEsS35Z2sJOQ1iW/KpXW2jJL0ubsz34TJYyYTluW/J+d0NYlnJvyfs9DGFZ8t6yjZZ2wtIHsOTXnoaw+HuyKxVY3QosKb+fUl6LS0kscxXUl7oSQ8HYpGHMosfHJ3xdSfDX8GUnYV8vleMvO2EXrEqAFdF9Lz1rAXh44VHH87dJrhD81tVqd0A/Hn5jHuI5UsGjwWo3hLWDIawTDGEtN4TVYghrhSGsBYawLGVioSGsRYawLGXCkl8dhrAs+dVmCMuSX4cbwrKU1Z0MYW0P/dhqCMuSX5bjUKchLEt+1es4ZMkvS3tvKV+WNsdSHy1lwtJnsuT97oawLOXekvd7GMKy5L1lGy3tRL36X3sawpJQjLb9MOkVLMTT78Hje8Uk7XxYymuvSvhCPtqrEtmecD0V8tH6Q3vdooaQj7AvT+U45INdvTYBVkT3eXqWFPLhXUxvK+9iqrddkvyBiGp3L+ZT4tm3Rjz7Knh8uwYz/jZ96jdlBP9c7UpcGaXja8a7BSfflPHtbER6tQO2sO9QX9sTYOGOdiz/0bLu8dsR8cVvyqQ14zENH1g2nXbkfVPCf4HLz1jese1p5H22eLQ3K0R/kbdJH5IRPElDlGYnkg6mwDcR8A2IApWX/mhNgHkgwMPyXyr3V+yCPlA2+NrufHzD5CvLKtPardDK79YfsGoK5tfLMDU+S79rctBHefsoeDWYbHur7bt9FRp8sLC/VlF5fKNAK89vXUj5H0Lf8ZssyHNNfvoSaED5QRqS5Oens5Cfny+rTCvWXUW4pfwCkJ9fkfwgj33ys4rytF3bc/WGg4ZnVY14VqXEc1qNeE5T8GRtm08jPCsN8aCM8BiAenEG/MY8wcPPGA/WL3jw7F8jnv0VPJqtOQhgZHwSRUHgZ/TBnsm3M7STHLBN/AbZbN86RVxzdWqG1jbfFFs7wcIHa22VsDI+nWOyT4/0tBvxd3po1dpRMORJkyGswwiWpv9nKLCkvBYO0eRkOwmHCPs2Uzk5cKKWcMhmepYUDtHM/KoEOgVvJTOP9ed6ONHw9NSIpyclnmKNeIoKHr7nk0jjS6bKWjR0HdFUbTQU63M0VFORVfAszXFuPrOEsPggGE0nfGYGYfFBMJqZ6VRgie5kbIJ6mwiftAOfIf56++YgH5SDdbuUPJYr37cEEY8G60hDWGsNYcnQqenCYwhPtTqK9X2HXRxdI56jU+LpqRFPT0o8xRrxFOusPcfViOe4OmvPXPXPiTXiOTElnmNqxHNMSjxzZQ8acj279jza7E4W7UlzuGhG0/PUS4D1GibJ2L+cXALU/LljFf5o/hz7RnJAU3sCLDwcDstPlOOa7DPFFy8BpvW/YhqeWYar+fisV9WGRLC+lNPwFGvEU0yJ59HWnkNrxHNoSjxzxbeBGvEM1Fl75koONteIZ3NKPA17UD/tqbRs+4addZxJy7YHQT6Wf9puUzDfTGMF1ucQtuRFCj6tjVhfyml4fMuiKylvpQKzifKQvpUe+roVPC0KHlw+Ff8EvzVn6S8J/EI28CeXb3IKr7BN/L0+XJZsSvgvsDhPcHUQLGve+dqG9LMc5IAe5EESrFyVsBYqeVn06cGediP+Tg+tWjtWEk80PM0KT6R8v4cuLK+tK0jdjJfCe3z9rcXua1j6EvatpnK8Exi7oJAAK6J7/qxXpaUvFI9ugnUQtaGSGmH9g+YYD8PCD+tpuwnbqPyDu277Hw+JXy4X4s+KCoz4ylalC4XZmtashqU0w0Z88TJIQaG1S8l7HPzGPMTjWz5EWAsMYe1oCGuxIax2Q1hdhrBaDGG11ildOxnCWmQIa09DWHsZwtrbEJYlvxYawrLUxxWGsCzl3tIWWvZjmyEsy360tF+W/DrBEFanISxLflnqkKU/Ycmv5YawGnZ1/uyqJe93N4RlKfeWvN/DEJYl7y3baGknOgxh1au/eoQhLH7BPgd53YSn2vAg1pdyGYd8e7J+i0R40e/hOeLXvgnZlPBfYHEeHwaYUWjVexigr58xZIg8SILVXyWsufpWTsHTbsTf6aFVa8dKQ56sJlgrFVhajKravq2H8PRqD58Qv8HZpD1UTnahN0cz2V5IgBXRfQ89qxSeRjHJJ9ApePkZiwzWX+nBs6pGPKtS4tm3Rjz7psSzf4149k+Jp7tGPN0p8ayvEc96BY+26osvkfMqaPwbV+Yv2WU6TWJucGUe6+4D+Vj+lbtMwbx8l+m4u4Ee0ZeMDxRJfTav4K+3z0rV9gF75CpC5dYjdzCvhZ5xuRMnpt/LAmBLlHwJRwXevpCncYLfQ9IsENdDXkTKs+YoWWN9+yeE9hZPfYSB9boJRhM9R007RMHNH4i8vqxd8ST3eXR0g4YL+cEf7RTaZf8nl2EapPyNQMPNa3WYrQnt6k6AeT9YkOfuosOMFJhau/aldjENK4kGKX8rtEuOxWihMkyP9iy+H4HfPGLivSYzh1D5VRXaw/0k5e/29NM+Cg2ok8xTpoHL7JtAw/MUGhTrdvTlV1xTtm4RXa3wW6jBe+b8GrrfR4GTdAk34laKRPq0Okp4xhIgdeOWy/g76d5eMrZlLKHtbLmbEnA2R/rVGINnPwZX+2lHHoX3SYknloll5d9lmTh9y+VXJolE2sFZU3SuH1WAJff4yQUZkHEaxVMcbbaHz3xTHCmn4VlVI55VKfHsWyOefVPi2b9GPPunxNNdI55uBQ/DSpoyPBHysfzbYWDgL5+vBjoYZnzJy+BSXov2dCvtkfKVztliXmLkiM+/0nAjL3kg7a+S1krnlRSIVqTvyCppPXuOaV2t0JrmJbQso1WIT9qBzxD/XL2E5uNrfM1u2sjxXeQqQuXWI3cwr9LI9PiJ6fezmTZWeh2Pp41Jx7AkSWakPGtWyh9JsI5U6gntvngnwtDiswJDqxffP0WpU+tpVPHFTtBaQ1hzfzxHfrs7noP11eIYDAtYOSNY8TXbV00bsBqwGrAasOoFlrY2fAzVw/GXj8JCm7oqmk5ftfs8sL6U0/CsrxHPegVPrfsrNDwazdIeHNuZb9pxZMd48GB9Po4M323BxbeuXXWcOJPGuqOQj+VvhXeAlu2a3Ebk8yPtmphJs+yBbIU8Q79nLJ7tv5BOe0YfqG1iOk80/cLyx5fLa77Gymh6HsrCsdF0GpL6aC/qI4Gh9RHSw0f+XQV91E19hLj5iA5NrzR8LEPtkS5DSD+W379MEy59aPT1Rzo+5AfyeUsCvoMB3z0gD4+0c2KqPr6KGl+tkGc5P9DkEvWd5TKt355GjpFnmhxzxEl7jRXlhCNOUr890vsIF/2xfFGRiTR6oPW7lO9P2e9zY4/0fkdecr9rkUNtnPPJCfYnv76MMpEUaUVYKAtp+v1gBT73++M8/a5tEEE6ud+l/LEp+x33lsZXK+Rl3e/IyzT97tubp/kP2O/Cs65o5ji9H8HSxgBfhFnrd+wjHgOk/CZPv2tRfp+dl/KnB2DnkZdp+l1bKUnb72znsd97Kc+3V3SuxoALFJngOQnblST6NL7tGJktfsa/j0wgY2elfuSBhXV8TcKwMbNcmpv0cRZmuZQfV1iuqTHSM3+v/KdfNBH8ob/yX+2wnIGox5espjQpZHH9qAKsJsrzHcgSXyLq2vZSqYvbS7UIQpoDwLWZi5Q/GfBo5XFmguWf7hnlKs022dpvUMqj5y70aO3fQHm+w7U3QFt4tqGNvlL++pSjr+Cej9EXecij7ymQ16KU5/7YqJQ/BcpwVG0j5LHKYx9sIDyVTAvrhybHWnRBmy2sipLbW2lWyfKHMnMy5WmzUU1WpNx8RIqwvSwrPl2ML+adT7aQd11RZTlCveZVOJ9diy+frGA0R6KFCwE24llXvs/VdPX0Cx3a6r/gxu+i2vV5X+rTgwR/B9FqLIOTrsRSoof5w67EMoXWLiXvsfAb8xDPMgWPBmuRIawTDGF1GsJqNYS1whDWAkNYlvxabgjLUr4WGsJqN4RlKRMthrCaDGHtaAjLUiYWG8KylIkdDGFZ2lVL3baU1Xq1q5YyYWm/LHXIUiYs+dVhCMuSXzsZwrKUVUu6GuP2/PHL0l+1tNGWPsDhhrAs7Ve9yoSlnajXcchyDmPZxiWGsBp29dFhvyz78ShDWJb8qlebU69+YZshLEt9tBxrLfuxXv3V4+uULku7uochLEs7Ua822pIuS97Xq52w9Mm3h3mt5bjdVad0Wc5rLfvRUh8t5zCWcV9LWJYywTrUVL5HWTkQfh9Q/t1G5eUjbwsVGg3XmouyVsvHCyHutoxwNxG+iNoZEf5OhR6huyMhb90saR0YHM6PFAaHiyNjoyODY4NNBF9o5We8v6JdKa+tmQuvd8iG1z3aHpZ24Gt8tUJeG+W1QZ7QGPtJb147nf72jOhPw3/E36WUP2Niqlw1fbk0mmnvRU61fUOroul4fB8rRjxdSv1jPXj2rxHP/goehpX0cUo+z0bKT5TtlnaejbZPa3+FPilfaV9hd/m3xpsNKerFl7b/ju0f7nmyk+lcavsn+DuIVmN6Jvf5pN1vKLzbqNDKewvj67iJqXKc16I8a06AFf/mnfa1wOI9gCgr/EHaat907kmJp1gjnqKCR9sv2JTwX/DwM8aj8UbwnGKIB3WuSHg2GuJBOdiZ8GwyxLMJyhxIeNYqNMTj2Ct3m3oep1PLeWiTtTfi26j8a/edgvnqMkyRQbQlSCPWx3Fvg9IOxvd68l1PhzqG9iqH+y8jwlWJt28k3mp7y328lfK3A2//nXiL7WbdPxPyTqG8syBvI+WdDXkIA/MiaAM+Y5nE+lKuU6nH4+G58NywP1OfTiT4OxSeZDEenhvN5OuZCl+FP+dlQ09R6DlfoUfr53idb6doZp8hfQIL53/nTGz7r9l8kWnNTp9NeWhbz6I8tDUHwG+EmdQ+Pt0M6ZO6oqeF8v0n4KPpHyn/1mwE22b0e2T+IHmnKnkx/FP3mE4f8oHnBtX6LVifbQPiWVcjnnUKHoaFh1vjG6JsK6X8L2hcQBkwnCtO7t0/HWhiG3ZmRrjT2jDB36nQI3R3KHm1xDRyxZH+UmEkP1zqK40Xe3NN0Uxb5rNvUv4spfw6pbzwOhv7rMc0zgK+xlcr5J1JeW2QJzRqMY2zMqI/Df8124l5l8PvavqyS8nj82RnCwvtgQWs3CxhSdwG/TCxOZrNPIbwVGszsb6Us5yzLI5m2s3HEM2bFJo3eWjG+psob6OCh+d68W/0q/+0m04P+tU4vouv0UblnwF+9V92S26/bwzkuXu1/dmTEs9xNeI5TsGT9VyX5+6nG+JBfTuO8JxpiAdtBM/dzzLEg/af/cMkPehcPvUcxxdND+LfV0I+lt8D9KCrDFPTA6QR6+PcXYtBML5dyjgynuupc3fBVYm3uxFvK9kY9kel/D9XTsFcQbxF3Kz7yMfTKU+bny9WeMmxFm2Oic988STmG9YT/mY8N009dxf8HVGm8jU5dz8vmslXbTwU/pyfDT2Tc/cLFHq0fsa5uzZfR1i+ubsvNo92+lzK02JDmj3kufvGCu3jubumZ3zPZ1fEl8y3eY7505Xb/sc6nS/rtDaWHj0xPQ/1Cc/UKJJdQL6wv1itj4v1k+aDkq/9Fzz8jP1F7C/2F7W53FkemrG+b17C/iLKGtryxy7X6UFbjr4J+4tS/svQ749bntx+tslIM/uL1fZnT0o8x9WI5zgFT9b+FfuLZxviwTGT/cVzDfHgWMP+4nmGeNBes7+YpAdnkR6Indf0IP7N/qKUf+rKKZjnevQAacT66C9qfi/ju4D8xQugTtb+ouCqxNtSlTaG/UUpfw7wdrQKG4Nj9tmUh/w6l/KGIA9hYF4EbcBnLJNYX8p1KvWEvwvLv0vwfD78RcHfofAkC3+xFM3k6/kKX4U/w9nQM+kvjiv0DCn0oL+IfYb0CSyfv+iLO6KdHqI8tK0XUB7aGvYXz6rQPvYXNfoYVis803w+1utnlXU51utnks+INkVwP3LW2u7Ty83Demnq/UP1sF6qrU/y2It1Ndm5An5jHuI5T8GjwWoyhFUPPmWxRjxFBc9c+5RZ+Xq8fygrX499yvMN8eD4zT7lWQoNsY16Mfk9YpfR70H7y36PlP9b9xTMl5Hfg7aEfRSOT3B59iml/MPkUw5Bnax9SsFVibevThHf9fFWyn+7ewrmaz28Zd1P6zeeR3klyEMYmBdBG/AZyyTWl3KdSj0eDzPymVL7lIK/Q+FJFuPhcDSTrxcofBX+jGdDz6RPeaFCj9bP6FNqfiTCSutTciwR7XSJ8tC2DlEe2hr2Kc+u0D6fT3l2Aqy0PqWUf38draM0fNPsfdPL4TfmIZ60/uQmQ1gN33QKDz9r+KY2eGbjm37PyDe9rnsK5g/nwDf9WQC+6S+MfNNS9xTMX1cR70Q+sm+KPiP7pkOQx+Ow5EVRuninFqtqxDsnL2+8UxsPt8d4J9rpIcpD28rxTp9vahHvTBubZJxJPuyxE9v+c1x0we5TMNsp3qntV47L3dmIi/K13cZFeW8Uyiv7nqcreE734OlJiadYI56igifrPZMN3zM9ntn4ngeSfZyt79ncPQXzkDLMLH3Pw8s46tn3zBNvZ+t7/nifKZhFD29Z9xtx0RlXIy7qv+YtLoo2vx7johp9DCutTynlTyYbNp9xUe3dimzfWUvvmwr+DqI1K13UZEN7Z4V9kkqyy3HRave5W+6ZR1g8biBs9k2rfaeqR6FZw1OsEU9RwZP12RVz9d4Q+6ZZ7Tdl3zQrXzutb3ox+U9i69P6T1L+ueA/XUb+E+JGGrF+2n2gUv4qsusZvUeh2nXBpZ1HhLy9OiEugrxFm5e0D/Qi4O3TibeIm3Uf+cj2B8d03iOKvOQ9b9pZENp+Re3dDeabNi9bWP6d0b7e1L6p4O+IMpWvyfFQe09Hey8i47nYpG9aUujR+hl9U+yzIfgtsHy+qfaOrWanz6c8tK3nUR7aGvZNN1VoH/ummp5psUkpp8UmtTEy4zOLxtLKO58BsSkbeiblXYuLab5HfG70/uXf5c83Hz+2ZdPVw5dcNHLS2DVXrb9sdFPpyi0XlS5ZPzp65dhVV2GjEFGn0mhkilZGfh+pPEcYZ1VojG+ik/QibRKsswkW1udJ07kVYG0mWNpCGt/zBCu+5OW45hRwUFGT6DqH6Eo6TChpQELhlRdXtIEvKVCWBOtqgqW9HMn3/AJLfDG/fHCSjDHS9VSiawjySgRruAKsJxMsrD9MsMYrwHoawdKCF3zfFs2kk/nlgxOnCyvQ9XSiSwukCKwnVYA1RrCw/pMI1kUVYI0SLKyPdfG+LZpJJ/PLBydOF3voiq/jJ6bTdRHUv5hoxvb0E55qJ5xYf64mnP2E52JDPBdDmZ2hXnx/CeShbU2zsHkpPJ+P4JHgn6uFzUuJHuYPB48uU2jtUvJwXMY8xHOZgkeDdZYhrEuoPUkTzk/ThFPak3bCKeVPgwnn52jCiTy6mNqo+UHai45N1K52pTzCa6PyXy7TFB+edefabb81HTsrgRYej32HuCyMZurnfOiY4O+IZspXFjp2CdHD/GEdu1ShtUvJ4wCQpsuXKng0WOcZwuLF9iQd+5GRjh0JOvbTOtSxXxnoGPpwaXQsy81eiE/oxWeIf650TPPFfTp2iUJrl5I3BL+TdPkSBY8Gq2QIK62O/d1Ix/YDHftnhjo2BLSn0TEp37Ji2/9adAz9/jQ6NgTP50PHBP9c6dgQ0VNJx0oKrV1KHs4ZMQ/xlBQ8GqwLDWGl1bGlK6bjnK2OdYKO7VKGWU86tqJKHdNoz2LuqcXvDoXfSTzyHZZ0qNIebY57KLUnSUb2W6HTo8lI/HsU8rH83/eegnmgR0Z8i9dztUg+UCOeAQXPXC+SZ3UY5QDhGTLEMwRleJG8ZIgHbSUvkifpwVrSA/G9kmylxMs4lvli0IPHevQAacT6uEh+utIOxndMGUfGG9rURXLBVYm3xxmNQ9cDb0+swsbgnIPHAOTXEOXhmM1xcS3+jM9YJrG+lOtU6gl/pT8xrjsfi+SCv0PhSRa+nBaLH1b4Kvy5OBt6JhfJtbmQ1s+4SI59hvQJrLSL5PxhDLTTF1LeEOSNU14J8niR/PQK7eN1TY2+NB9HyGgOkHpOIvg7opn2Igs5ruT78pxkSKFV69tr4DfmIZ4hBY8Ga5MhLFkvamx+nPmsHvw63vw4ZIhnCMrUm193bZV+HfseUr4bfI/r58Cve3YAft1zjfy6FuDtLQ2/rpbrUePXXZQNPZN+nbYfohq/Ttsf8Wjz61oU+rBc0kHCOIZFCowkfIyjWan7jGg63Zi3mXBUG1vbrNA7j/H2QlpdFvyhx9t5b0ZJwVNS8Giw0vhvGW/MTT03qYeNuZsVvs6FfCf1s29jfEZryJMfT/PteUR64rGhPZopQ0PwG2VS29OI8pBks2a7z3ioAizfPuMhglWqAIv3GWN9qcvrNp8t+3oxD9+7YnoZ2SP7QSjz/vJv1mnkwyN7pKgc77eNr4wP50mt+4K/g2jNSve1ftRekI5le4fIL2ND8Dtp//b5SlvTyDzSlEbmq5UJ7WWPuNznPeXOVcoxLpFffJ+APzojZb8E65bvWju9jYiX9/zjnEqbZ/leTpRyGp65+rhdsUY8RQWP7wXsNLqo4dF4M9cvqWYVD5qvl1Q3KTTE+vRLiiVoL6lq4w2/NPrwXlMwf0OxBO2dFcaX9gAVKf9HitPM50uqSbz9E/FWO0DFx1spfxPw9i8e3rLu+w5w0l5E9R3s10R5UeQfx7qU+vyRF59/MATP5yNOI/jnyj8YimbyVTucay78pzhp+yeT/JWdopl9hvRxLDa+fB+340Mo0E7zAX3aS9CaPUwTp/H5Pkif1I1foCyHUOEFypPGrtlcuuSi0dKWiy6/7LSxp1w9dtUWbLk2ivFow2+kSEsQDl9NdN9MeRspH99k0q40R6tk9AnK1F48f4Iy66NVtLcrfUernK/Q2qXkPRN+Yx7i8R0FgLDONITFx241jpxOxtM4cnp2eHzH/iV5Vmv2mHqO9jStZyXlDwLP6vAyTC0yz28zS/20n2SW8sUyjox3Z6heK8/Yk1YX+4i3m6AtaVYXpfwi4O0g8RZxs+4jH9n+oCfAx/4lrZZgXhSlW5HA+tWsSGT0dmZqr5WPGst6RaLSiQrstWbkRU96rUMKPVo/o9eKfaYds5L2yGk+WgXtNO8s0mZmmj1Mc7QKtq+ao1XWKngkbwPknUJ5pyptjnX8VI+OH03tqDbydLSCs43acRHZ1mx8wcLo/K1sFUbT2oGkHYJIt7Yjr7UGWsf784Virmd0vKeUG88PDvNYKbTys2bAjzqF5Y9Wymc7hhZKcmJNy8QUfPQf46sV8vg0nDbImzyG3aU3r51O/5kZ0Z+G/4hfm20Pwu9q+lKDlZslrKXRzDGZo89roR7rYkZzwtRzVMHfEc20u1mMyZptXavwtdPDV80PugJ+J41Fvl2e7JNZwZKxqrGyMvNZNSsrWe205TlqVis4PEfNam7Pc9RTFBpif+hmmkdpb/idAjiTjqh8w55TMG8jHwtxc9wHPxUSKeV5jirl7yY/KqM5jTpHFVyaj4q8vZd4ewq0RbN5zFspfxfw9vke3rLua3NNbUWGV120OUET5UXQBt8RyNrRr754U8Yx29RzVI7ZZnRsuDdm69vllNFK4uQcVVtB0/oZ56hJOzv48xPx5VtZEZnW7DR/lsZ3pD3aGp6jbqzQPp6janqWZu0ho916qf06nkdlvfag+Ui+tQdtzqf17eXwG/MQT1of/2RDWCIXmpywX3eKgucUD56elHiKNeIpKng6lXpNCf8FDz9jPBpvGn5dZTw+vy7J9/hYCr/O53tI+Rz4Hp9MER9nfOjXbVTawfg+F4Bf9wXiLcb60vBWyi8D3n6ZeIu4Wfe1eKnm87Ffp+3CaaK8CNqgnajo2wkxj5/gS+3X1cMn+LTxcC72KsRJW2fX+hn9ukq7d31+Hdp8kWnNTvt20/C6hM+vO6VC+9iv0/SM79uUssdSnpT9VVmPY53u2jMZV/nQpMm8YyFvZUKb0L5g+Scm0PL7Mi1xPPc9a3WYzQrM+BKbpcWXpR0Ly/9bIc9OZkfyMd0vXDtFB+tO28T0NqX1PaW87wh65FEaH3KtAgvlSeRO46fQOB/8PBloZH5quoTlmZ+bPDyopP8bCNYGBRby2MdPoXE++Ik0puGnFvNmvwLLIz+FR9qYfCrBOlmBhfp+MtEqsNsj3eYIvDYq31m2edppa/tAfZaFlQpstKE+PetW2tFJeVg3hvuGskOn+VTsb1nE0dg/1naw4/iAu7Cx/ArwGQ8l3mhjuxZDkvJajAfjNmupPdouaR8sn+0dUspf4MGNdGFdxs104i74R3BNTOUJb7K1E7lezU5gvI/thNaP2i5rHy+1fuyi8sg7zV/zrbPxPtG0cTh8S4rlt9KaIOv2WoVWbX6W9lODTUQjlkc9Z9nUYtyafWC7on1qsNq3ItiuaJ/61fYu8puUR5b7Yj4/9cvy3xrp8s/zaSl/KtjGxyTYxrYqYa6H8ewe0OH4Qlsi/ZyxLSlqtgTtBdsSn42Pr2rtMuv9EOTxWpG2nxF5zj6H8LBdKY/wZnzi1eNzoD3jNy/Sriv45p8HAs2Xl+ngOEj8G+NHp5Ns4peVtDkry6aUvxLkfTPNNS3sDu951fbc+8Ys3/59rN/4LOCMy/tZQG0d7tH2WcB6s7HI8zQ2VltL7FL4wbYF7RXbJG2vP9srDR/aK9FvtFc+e53W/zoL4H6MYtmo62yL0N6wLULdYh8Iecg+0FD5XrOn7Atg+WvAnt5OvNHk3ueTDyvlS1CGP7k6BHnDKWCd68E9rpQf9uBGuvhrasN0PwS/pZ6mq8Kb+ZhbDQHNrKtaP2L5NLzU+rGLyiPvqtXtIcrzff4UZV90QpNf35wmvli3tbfh0XeZq/1HVnGT+0G3X1vncZNTPLiHlPKNuElyP85V3CTt/iWLuAnLb6W4sm/cPgXg3psibuKLV1eKm/jiqr64CduVeoqbvONREDf5NNjGdxnFTd7TiJvUfdzkY564CdqzrOMmv0wZN/msUdzkNyDvX/DETWZrdxpxk+nPEH8jbtKIm6Tto2riJmivso6b/DJF3CRp7wfmYV18F0ezN2yL6ilu8iewpwv2mg5Tk/tG3GTb1YibpIubpNXtIcqbTdyE5dcqbvJZ8jOQbvYXTldgaHOm8yhP01W2tUlf7mMfUcovhfNR9ifeDEVTVwvRHl8sEz4Z0mwc2qpSClibPLgr2RXGPQR5rMslutfGaU23hTfzods41rJuD0UzeaOdoufj5RCU4X0jaENLlId6yO//4PjH8RZtfiN5KPs4N2L5rbRflHVb23evnUV0VgW4zE8tzuKLnWoxI80+sF3RbJOma2xXhiCP7Yr0J8ZNsDzHTaR8odwXGZ/arsZN2E8YgjZo8s/zSCl/ItjGvgTb2FYlzMEynEpxkzmKwRaz9hMq2WXWe+w7/iJE2tMyWU/bIz1mw6d2S/ljoI84boL2bIhoR3vG/o8Wt9TsGcZNLizTwWd+xb8xbnISyaZ2wi/arKQTfp8M8n5K+bel3Tmf8oYgj085l7wo8stZl1JfymnyLHYi4xNsU8dNBH+HwpMs4ialaCZftfeDMrbbk3ETbR4xpNCDcRPsM6RPYKWNm8ynjUWep7Gx2pykS+EH2xa0V2yT0F4NUd55Hnzau/9or3z2epMCt9LXG9ZQ3AR1nW0R2hu2RUOQxz4Q8pB9IJExzZ6yL4DlnwL29NnEG03ufT659mU6nFPz6emoFxemgHW2B7f29bYLPbiRLqzLuJP0V9NV4c18zK3Qh2Fd9cWU4isNL7V+7KLyyLtqdZvjLeiLDFGe9sUWTX59c5r4Yt0+S6EVfZc06zNp1359XxLg9Zmh8r12Zi/CZT/+TtDtl2ccE+X54RDkpYmJ+nS7UkyUcSNdjZjo9PKVYqIc/0gbE/W9Oz1EeWm/RIDj9stT6HbacRt1m788kvbd9CaiEcujnvvWaC+gPKzni0OyXRmCPLYr2LdsV6Q/MW6C5ZO+/PtmipvMx5d/Wf4xbjIUTV08j5TyHwbb+JYE29hWJcy3p4ybSD/Ph08vtD5C/8T0dvtsfHxVa5eHyr81W3IewTpPgTUEzzhuIjxsj/T4L+7RxPLv88RN0J6ViPa0X1bhPTbal6Zimn9IcRPUfYybfJRkU1tDQZvFsinlfwLy/gnyZyzsDs9j0I7wflOUKZ+caWvuOEZzPbETGccFUsdNBH+HwpMs4iaa/mrztYzt9mTcRJvDaf2McRNtroWw0sZN5tPG+ta5KvURxzGQH2xb0F6xTUJ7xbbsLA8+Ld6C9spnr9P6X9P2sdBX2lDXfeuhbItQt3xxBvaBRMY0e8q+AJb/NdhT+bSVT+6H4Fm1sQuOSWuxCx8sX8zmIqX8kzy4kS6sy7iT9FfT1aHys/mYW6EPw7rqi2fFVxpeav3YReWRd9Xq9jjloS9Sojwt3qLJb6V9x6zbSbHWj5KfoZ2zqemoL1Y3RHkXKu1lXUjab4K6j+U79p5qw17EG62PfbG0i5Xy2O9s41D3Lk4By7fX5RKl/MUe3EgX1mXcTKfU03RbeDMfuo32iHXbZ/fiKw0vtX7sovLIO22/GK+FoP6yTRiCPNb7EuSJTmjyq613pN1vgusdz6W4iTYX9MlmpbUClk1trUCzD2xXfGsAKMNDlId9WyLapT8xboLlOW4i5VeX+0L8b5SRrOMml1AbLoI2aPLP80gpvx5s42EJtrGtSpj5MpxKcRPp5/nw6dFesC3x2fj4qtYus95j36WJpSPPOW4iPGyPdH8P1xGx/FroI46boD27iGhHe8ZrQ0MKXs2eYdzkgjId7L/FvzFucnSCT46yiTaLZVPKD4O8H1f+bWl3SpSHdoTXRLUxS5OzLqU+jtFcT+yE2CWUxfmImwj+DoUnWcRNNP29UOFrxnZ7Mm5yqUKP1s8YN8E+Q/oEVtq4yXzaWOR5GhuL5TmOgfxg24L2im0S2iu2ZUMefCWoJ/qN9spnr9P6Xzhnu5biJqjrbIvQ3rAtQt0aojzkIbYPZUyzp+wLYPmLwJ5eS7zR5N7nk1+mlL8UyoxTe1AvLksB60IP7quU8pd5cCNdWJdxJ+mvpqvCm/mYW6EPw7qq9SOWT8NLrR+7qDzyrlrdvoTyhiCP9b4EeaITmvxWihexbmvxMfRdQoubPBd0+0HijWa/fXGTamMXaOMuSQHLNzf1ya+GG+nCuoyb6ZR6IcVNtH702WiNl1o/dkUz9Z51dC7jJg9mFDc57lEeN0njM2DcBMtz3ETKv4biJigjWcdNLqU2YOwnTYxDyr8HbOPrEmxj2riJlH9jAHETtBdsS3w2Pr6qtcus99h38xU3eWfKuAnHiK3jJt9MGTd5r1Hc5Dsg7x+Yg7gJ2hGOm2hjliZnWtwEx2iuJ3Yi47hA6riJ4O9QeJJF3ETTX1/cJCO7PRk30eZwWj9j3ESbayGs0OMmlfqI4xharLnauRXbsiEPvhLUw7jJNzOKm6w1ipugbg1RHvIQ24cylhQ3QV8Ay/8Y7OlfiDea3Pt8covYhQ+WL25yrVL+Kg9upAvrMu4k/a23uAn6MKyrvnhWfKXhpdaPXVQeeVetbl9KeUOQx3pfgjzRCU1+reIm7LtUOgOBfbySUt43F6v0Tkya8zy0/WubEvAkvSt9/MRUPpZv2Wfb/0rzA8GdsT6MZf3eWtr3DzU/b4jysA8Epza24Pv7+9HYgnE73sszFM2kVYsZsGy2J5QXePxOwlKQAZl/+OTdd+ZwtfKObahV3oegzGg0va1Sfvf6kvfR+Zb3ofJvTd45fqbJe1M00wbWEvtaWof6cfB2pB+5wPVDm8v49KNSvGio/FuLF82Hfvx9922/0+jHJR6cmn5cCni08riei+XXefRD469PPyqt1/r04zLKw3qbEvCgfmC/s35I+eNT6ofgng/9QB6yfvjmdfFV7VyM119w/uDTD15bt9KPH1WhHz7fX9MPnJ9o5flsQil/lkc/NB31vUtc7bojtuFSysN6mxLwJJ0Vwvoh5Z+YUj8E93zoh+X8ulKchOcTqDs+/eA1JSv9+DTph+/8vrTnVPDZftWeU4G0Jp1TccU+U224cZ/pMEvR1NVCtMdXFnNyHyzf+Obz3zXcSBfWZdxMp9Tbns+p4H0DvnMqUPdYZ33nVGhn2VY6p4LlN20MqlJs4erdp8M9vwJc5melcyo4vp32nAq2K2nfF/edY211TsU95b4I+ZyK14BtfF6Cbaz2nIoHUo7jjXMq5u+cilcofqVmz0pEu++cirMVvJXOqfhwmY5K51S8lmRztudUfAzk/Q3l35Z2p3FOxfRniL9xToW/nxvnVExd1ZxTgfaqmnMqfOeJJp1T8WGyQ5q9TnsGIJ5TcTHNrVDX2RYNQZ7vnAr2gZCHVudUfBbs6Q+IN41zKpL1t3FORbpzKtLqNu9FQF+kRHlJ51T8IMHHwHbM5pyK15Kf4fsubD2d3fsr0O1/EW80n7dxdu+2q3F2b7qze33fhbU+u5fl1+rs3jzFTYYUuD7ZLCnlh6CM7xzfEuVhPZ9fwHZF8600XWC7wr4ol+e4yeTY173tv/jfKCNZx03YTxiHNmjyz/NIKb+qe9v/WAa6unWYbVXCXFaGUyluMlR+Nh8+vaWfUMkus95j36X5xjjynOMmQ+Xn7ZEes8H4Apbfu3vbfy1u4vNH0J6VKE+LhWr2DOMm67u3/ebYePwb4yb7d09vdwnaVU1M75juKZgHlX9b2h2fb48wWKZ8cqbtE8UxmuuJnRC7hLI4H3ETwd+h8CSLuEnaOEXGdnsybqLNI7R+xrgJ9pl2hljauMkQtPWRehPZtLXa2HSlPuI4BvKjmtgI2iu2ZWm/i4Jzq/Xd09uh2eu0/hfOrQ6kuAnqOtsiLf6h2Rv2gbS5K49hSXvl0BfA8id1T7Xhid3TYVqfAThE7an2DMCSB3el9+iHCHfjDMCpKw0vtX5McwZgWt3meAv6Iqz3KPv4XgTLb0lpxxA8Y90eUmhF30WLm9TzN4+e1D3Vhmd2T4fZiJvMpLMRN6nfbx6x/FrFTX6xfDrcIQXufMRN2K6gfZjvuMkt3dv+hxw3eVn3tv+xDNzercOsNm5yVxlOI26i6309xE1e2L3tvxY3QXuWddzkPd3bfleKm7y8O5rW7hK0q5q4yfu6p2A+XP5taXcacZPpzxB/I27SiJuk7aNq4iZor9gmWcdNxF757PVs4ibfK/tfmr1hW1RPcZOPdk+14Rvd02E24ibJ+tuIm6SLm6TVbYu4CctvSWnHEDxLGzd5efe236HFTX7UPdWGP3dPh9mIm8yksxE3qd+4CcuvVdzk1Y24SdVxk7aV2/6HHDfZo9yGWAYWrNRhVhs3WVSG04ib6HpfD3GTXaGP5jNuMlimo1LcZC+SzRK0q5q4yVqQ9+7y70bcZFZXI27ivxpxE6AxjY3F8vUaNxkkO2QVN3lxoHGTo8GebibeNOImyfrbiJvUX9yE5bektGMInqWNm4jvop1vwrpd7RkmvpgKtwN1W3vfmn2lIdDtq4g3qMctRHt8sUz45udIj++MER8s3/kmlWI2vv18HCdhPwvplHrz+L5sb9ZnEmi81PpRG7dZD1G3Od6S9j079gW0mIomv9r5JnieEev26QqtMdwSxU0q+QPMzyGlvO9MgPOV9mn2ge3KEOSlOcPEF1NhPcS4CZbnuImU31rui4znJ2rchGOww9AGTf55HinlHwDb+OwE29hWJcybynAqxU3mKAZbnO9zYFnvff6rdq4Q8pzjJuh7c3mEx+d83At95IubcMwH7dkQ5Z2r4NXsGcZN3l6mg89EiH9j3ORBks0haBfbm/hi2ZTy7wR5f3H5t6Xd4bkK2hGEwTLlkzPtrHcco7me2ImMz+9IHTcR/B0KT7KIm2j6OxTN5GvGdnsybqLFVbV+xrgJ9pkWQ0kbN5lPGzsENKaxsVie4xjauodmr4YoD+0V27JzPfjQXpXKv9Fe+ex1Wv8Lz6Y6i+ImQ1DOF8NNc4aJL6bCY5hmT9kXwPLvBXv6BeKNJvcleMbjaKUzRvgcPO2MER+sIQ/uSjEbxq3FbJiWKErW33k891udW/m+YeRbF4qvNLzU+rGLyiPvqtVtXstOu14tOqHJ71A0sx3aGUya7zIEcNl3STtna4pm2ikpfww8Y/5rZy4hP3gupp1Lt1ipd2YCnqR9LFdCPpb/dpkfleYHgjtjfejT9AF5yPqg2Xzfmbhpz/7UzrHjfRjYB4Kz0tz+sTS2NEG5E4nWpmgmrU1K27oS6muwcF59IPw+oPy7jcr/sywf4p8hP+36vTjaCTAjwIG4WzPC3UT4okj3nQV/ZwI98dWh5LXWQOtIoTAwkisOl3rGhwuF3GgTwRda+RnLfZtS/kSlvPC6PcqE18OabWkDvsZX68R03mEe6r/QGNuMN6+dTn9bRvSn4T/i71LKnzExVa6avlwaTZc11EexJ5sgbyPl+c7y0sYW7fxjHFPQduK4cwqUORfyp5Xfd9v/uA+X7zsdpmajffvEhpTyaLdPofZo8U4frE0e3CWl/JAHt7ZHjWmJFDqlnqY/wpv58FVx/OWxudKZdGl4qfWjtndliPLw7PBNlKfN+7Qx/VzKSzoPk+V3k9KOU+AZ+6qnKLTGcHejdQDN9/TJZiXfk2Uzre/JdiXt9xN8+7nZrgyV79GmYnleB5DyB5T7QsYBlJGs1wFK1IYLoA2a/Ced+7wWbOPBCbax2rOk15Th1ImfX/UZvEOQp83/qrXLrPfYd2cTLG0/tHa2Jutpe6TPMQReG5Xvhz7idQC0Z76zcfi8Yd8+ctQ5XAc4t0xHZzRT93Ed4DEkm9ocFG0Wy6aUPx/kfX35t6Xd8e0T59ibNmZpcubbn6rJs9gJsUtD8Hw+1gEEf4fCkyzWAYaimXzV5ukZ2+3JdQBtvUfrZ1wHGAKakD5c75XLtw4wnzbWF0sZimbyxLefcQh4wLYF7RXbJN93Gc704EN7hfH6c8kOafY6rf+F7690UqwGdZ1tEdob3znJvrVM9oFExjR7yr4Alh8Fe/o04o31HivfNyTS7LHyxeoqreX79pU09lhNL19pjxXPdXx7rNLqdony0BdhvdfeudTk1zeniS/W7XMVWjXfJe2crSmaaafSrANo6wzID56LafHjxUq9jQl40GZgTIjXAaT8DSnnB4J7PtYBkIesD5XeWeT+0ObS6PdzzEBbs9H0QXBWmtv/abdtv6VPN0C5k6PpeadCnk9OeEw6U8Htk5O1ShtZTu6DseXVKcbdU+FZtX2wltqDNuLcFLA2eHBXio0wbi02wrRECp1ST9Ml4c18jC2WuqTxUutHbc7E487JkLeB8lCXeJ0OddD3vVHRCU1+NyjtWAvPeGxZq9Aaw33jbtPhat809cmmNragnrNsnqq0T7MPbFd84w/KsG8dge2K9CfG7bA8x+2k/NsobocyknXcjmMAZ0MbNPnnOIaU/wTYxnck2Ma2KmG+K+W4LP08H3NKtBdsS3w2Pr6qtcus99h3pxKsUxVY2nt0rKftkb6HQuC1UfkPe+J2aM94joz27EzK26jg1ewZxu1+RnE71H2M232KZPNMaBfbm/hi2ZTyvwR5/yzF7SzszibK086G8Y1Zmpz54qKaPIudELuEsjgfcTvB36HwJIu4naa/Zyp8zdhuT8bttP0+Wj9j3E6bAyKstHG7+bSxyPM0NtYXR0N+sG1Be8U2SYuTsb3S8KG9wr1QPyM7pNnrtP7XqQD3lTS3Ql1nW4T2xrceyj4Q8pB9IG0dRPt+FK+D/AHsaduq6TA1uff55JX2uXGMUlvH8ME604N7SClf7ftnTEsUJeuvpqvCm/mYW1nuVxxSymv9qMXkOcaWVrc5poe+COs9yj6ue7L8+uY08eXbm49ztk+Rn1GAciuj6Xn9kLdPNJ2eIxV6sHw3lV8LNGjlBV4bld+pzAf0DRdHM+3Xvgn4kD58xv4M1l+bAAvtUTfAOnNCp31noF3mHgLzGIW+fRX6pPyxSvljoEx3+bfGm2MjHTe250goMxpNb4+UX6G0R7MdIlMZ245RzXYgX9l2+HgYX8zzk5XyyEvhmWYfOGazEvKOoTzUrX6ioaDQ0A3PWO+7ob7UjXXu58u2/Rb56INy9aj3a1LqfT4BH9Ln03usX43ex7/HEmjvqVLv8wp99aT3Ayn1XmSqofe1632fQkM3PPPpvdSNde4ry6bDFV8EZQDpYBmQ8sd7ZFpb+0MeMn+1eQr6QULPYqIB62r7tTdQHsazmL+nK3zA8qzbUn4j8OE9Hl0QujLWhRFNF9AvZF2o5EdWu+7K818t7s2yh7BQFjieiOt9Wh+hLGP5c5WxQ+jDdUL2/furpH0fhfbOaKZObYR2PL8cQBcZRdtxJOE8xYOT6zIerbzAY90eVfjFtlB7PyG+Tp2YDlPKX+ixFxov0d6xDGr2ZaPSLo2nHAPFeZrIgqa/Um4+xjLkD+uvjxfxNVtb2xXN1K+TKQ91h/VDGzPT6ofUfeTclqU6/Sh/h0HdJ0A+lr/GI3/W64lCT7XriSy31e5LwfJPhHwsvzXleDU3sdlifr73pXDcRovl+nRHiwuzXLVH/rGSfYrbPeNV2jX7NLQfptDeGc3UKYwFf2vJtt/aPptjCOdGD06umzS+Y/mk8f1+z3i1AepoY8WuBFPKP1ilf6vNKdPaXI6FI1/Yv9XGOU1/pVzG+tuj6S/yh/XXx4v4Yt5pthllW+RD2y/p2+/CawzaXpW0+oF7VT65ZDpc9LE0mT4H8rH866v0l3BOW62/xOOVxidN/njtB3maIxq0cRvp4piplH9ryvFqbuQ9r8o7yjTLu09+46ta34L3UWpr/yx7CAt5zuOVNl/YpMDn+cJ/e8Yr9L15bpirkva0+ngKtONhGq8wbsPjlc8GcF3G4xvfWLc/5hmvjoU67Itq45WU/6THXmi89I1Xmn3R5kkaT31jmciCpr9SLmP9LWj6i/xh/fXxIr5ma2u19b5jKQ91h/VDi2Gm1Q+pG8vtfTRecTwaYaHcNBGNKK+oV7tAPpb/jkdeK43FzHNNvjW/VIsH8JwLaRc+afIq5bKV11513z7yh+XVx4v4qlbXOX6tjf9d0Uw7wL69ts6Rdi+K1I3l9RlLppfDNdKm8n/ZO7UKnhvGaHqaCJ+0CZ8h/g6i1Zieyb1lq6KZPNbWkHeMtp19El9Xb7nokou2XHPy5aXRo0tXXHX1JWPNxNGV8Ju5ilC59cgdzGuhZ1zuxInp9yIZLVHyJRwVePtBnsYJgSlaj23aL6Ee8iJSnjUr5VcRrFVKPaG9xVMfYWA9lqgmeo5WeVcFdxuV/wdY5dvWJuPdNZrJB9bEEQVfp9Iu1tr9qE3ryve5mq58Pq3WCv6OKFMrkvfJKvLHRmsFSxdBlTJYFq8uoCxKKMe9H1+yDpBGa9uI5o4ysbG936H8W4sTy15tXvOMLzkT6pF3EwmGNmakkY744vFzfyrPvceWBqVb6vKeo/jaTPX2h3obUtCwv0KzFreXcp1KvdnypstDs+BB+cS99LvtF01r20HlPLRkWJfXp6X8LSBDK8q/NWsvNGp85hhqtXw+VcGTNZ9PJTwHGeI5CMrsDL/jdAjBYj5LPwmfD4a8Q6jeasjDcjhKHgLPVyu4NfgCo5IMrt5Pb1uSDB4M+Vj+MpDBw0gGsT7vVaw06o9S+f2Bdq38KqJPyhfKNGlxiJVKm5EuXueV8n0A854EmFHkt5W+dmkeFLfrCKVd2r5Oqa+NLQdQXjfk7Qd0ydjSRjDWl58vjGb2h6EXob5/x+1Cvku5hQo/5mOOJPg7suXTpLe1L9HD/Jmdt8W7IpGrCJVbj9zBvEpzpNMmpt/PZo7kszIIUyyWb16DvbaPgleeNUfJ1k+b/+xDtPvmQAgD67FEafXi+12UOmk0KKP5QSGtBnGUIWsNqiQ3zcS7/RRau5Q81gttXrSfgkeD1U2wulPSHGt9eYOkaP3pWy6/cqys9hFdaSdFTEazUj/ywMI6viZpG2x48E3aDCbweEB/ojKY+urHlzYhY7XJSExTDzyCvyOaKTJZqM1Koof5w2qjOSqaE8NDzz4p8RiKenzJiNSkkMX1owqw2BJoTcIIFIt6d/l5e6RHvwReG5W/xOM3LlXqP7Ifpms67kpzBZ6vSvmnePxmbX6jRYik/BqlPM6phJ7FRAPWXazU47nyGsg7iGg4TOEDluf91FL+GuCDb71f6JqP/dS4FtU2Mb3dOchLs3aVV8rjurjwTHs/5RCCpc3BURZYT4SH7ZHeRyjLWP7ZHj3BWASvdR5UJe0rFdq1ufsh0I7VNM9GnDwcH+zBqck04qkmDnCnZ56txbeQLp5nS/l7PPbCF4uJL5ZBzb4corRL4+lqysO4C8a8HoE9MRPmfOynRv6w/vp4EV+ztbVdUbLN1HSH9eMgBU9a/ZC6Wnz1OVBO4F6rwJXyzwVYLUoZqdtG5R8Geb2ZbAbOvISeTqov+fElLuRNRPu68n2utiu1Cyn4O4hWY3omXcibiB7mz+xiF9fCb+YqQuXWI3cwr5KneMLE9PvZxC5uhjyNExy7wDbdnFCPJZ+fNSvlbyJYNyn1hPYWT32EgfVYolgLcdR4joKbtfDtoIW8vot4nxPN5ANr4moFX6fSLtbam6lN68r3uZqu3oG0Wiv4O6JMrUjeJ6vIHxutFSxnEVQpg2XxOgsoixLKab2v1eNLONpGNH8G1kXeS/4atmtXoge1UxurOCKE9aWchme3GvHspuARTXgW5PF69XVKWyXvesjbmfImgBZZ55a8rUq7JO8GD8wbPTCfreTFfXf6/tPLoaQ3JfyPrxblGfP0ZoVW6btbIA/n5ZgnePgZ48H6Uq5TqVdrezSaBc+1Sltj/n6dfLVby3lo9bEun4Mk5S9eOwXzW6Rvt0J9oVHjM+titXzeVcGTNZ9Zp24zxHMblOG18DsIFvOZv2t7O+TdQfXuhDwshx7FHfD8TgW3Bl9gVJLBX++nty1JBm+HfCy/CWTwd7OUwdsoD/sA7QXSgXzA8vxNmjugzVr5pHb92RMLuVmpr9HOcYnbPLTHl++sIimXtczvS3iS5EcmtdwvSfLD37eT8oMgPy1lmJp3n0X7fXqNnhzPOjS9Y15q9VBH909Bwx0KzVpMQcp1KvVqlQ2N5kqysYRkQ2xXkmzwu91Sfl+QjZ1JNtB+Co0an9kHrJbPuyl4suYz+3d3GeK5C8rw+HYPwWI+Sz8Jn++GvHuo3r2Qh+VwfLsHnt+r4Nbgpx3f9t9fb1uSDN4N+Vh+B5DBg0gGsb5PBu+iPOQp2l7ua18fNBHd7Qnl76J2SfnDy23RYteavqLcsC2X8j0Ak2PXghfbpc2WfbJ4t9Iujaf3RJVxI585Fir12yO9/UmyMujhKfaD1h7mqZRf6+GpxiMfTzUdu0dp12KlzfcSLC3ChXxOw1Ns/03Ufil/tMJTzW+5iWjXIoNNVA9px/L8zQxNxzTfhHXsRA/tNyv1tdgC71fE2MKtlIexBZ6LTUDe7ZS3FfI4zoGxBR7/boS8Oynv2ZAncoSxhTZq6+by84zXANR9lSw7yH/ehiF5UTQlC/iMx1us/ywPnutqxHOdgodhoe3Bsf96yMfyF4D8vo9sj6b/18Ez9n2RJqmbbeQ4lxf4t2YDvyC80GIm2CbWUy2Kzv8FFucJrrmKcmtt08YYLU7Ddrfa2JIGa6GSl0Wf+qL7mn3VaNXakaSbiGcfhSdS/lYPXVhei7NIXeEhjp/W66xJPERdFPw7lumNr/IKyTFjw1dfePLl+DW+STDIDmHfHlROzE9zNFMUb0mAFdH9HvSsBeDhNVfmfD7xdNeIp1vB06nUq8Ycang0mitNFW+kqSK6otoyER9pI+X/dOQUzOfSVDHN8NwE+K4HfOxK3wS0a1s1eDiX8rfBcH4zDefXU5uxnRrNArM1mok3/n1gAg13k5uX0dCvunmCa7FCL+sR8l/rE58eXZ8AK8n9ehbxSsrfb+h+IU2+qRLzQcPjG/6vS4lnZY14Vip4anWvNDwazZXsySvJnojcJdkT3goo5X8I9uTVHnuCNPK9ZpvZntwMtGv2hOVTyr/eY094yoHt1GgWmGhPtCV2puHfyZ5k5Baq9oSXtJBefgGm2vFyP4UPWY+X+xGe+Vj2Z/tT7ZQB67OLnqSv/72/jjMpVMyhKin/etDX96cY/zW54TEqa9vcpLQpzRgl5T+ecYiAYbVGM3Uq/r0K2pwEK1KeSXkcH6+nsjdT2Zs8ZZPsWvz7/PLvrPVrsPxb06+DiL5q9Qvrp9Wvr1WpX0OQj+XvB/36JukXTiuZrxyGwLKDVPY2aHdauG1UN75kO1VEcFiG4usJE9PhCNzjDphq7w9oS1ZWy/8sO7jUfTD8xjzBw88YD9bnELQ2PsTt/kWKbQZYdwjysXweePnr/ZPbmMU2A3l+BzxnvLdT2TupLC4ncjgxq2XoOwnuXR76byU4tyn1OiO9rdr/tPTertDbGen0a//T4kFY501Mx5Mku/8i2dWWANGmnDsxlY/l20F2m8u/Fyu4WXbRpvIWVS1cGcN/8gHTaeal+/g6f2JmXSnPy/QII7547nEv4NbmHrzUKuUXlenEuYe2XUJgxfA7E9qWtMx9D+GW8quhP7qoP5BfvK0NecM6cC/hwrKDCTxYDnTsckAyLtYLrY2PHKd0QHK5QaUcw2hWeCAwNLsg9bTlZtbduwnHXR4cdyr1NBxsjyttR7mvQv69Stsi5VmzUv7uhPZGCu57KsDVtipo9v0eyrtdyWPbhe1F28WvqaFdwOXff9HYi7KSpBOaXN3toZ23KqTd/qHJPS79d5KOaX6D3KcZ65uUe6FvGJ6xjb0TaNJ8IKnL23P6FZvJMNEWIl1DCTCPAJj3JGx5iQAmvgLLS1u+fkJ6tC0/d1M9zS+IlGc+XyZSaEBbqMlskh/H/NBouEOBo9nNO4kezQ9Pq5tSF33t7W2OccoBOs5q5xhbYX56agpbUc9zDI6p18Mc4yaC05hjRNEIye5s5xibQXbHZznH4K1qleYYkif8bVbqYawI8d0Fvu+lBI9fksVYi8RlhF8ii61K/fg3rztI+afAuPfB8rinbQvORdPxVfsKYk6hK6md2hjGfLu9TPfCaKYu2q2XFPM+/RDcd2WEO43+aTZDm390KHmtNdDaNzbe35cvFPryub7+0sgg663Qys/S+Eo5pbzw+p5MeF0Y7RQaJqbg3w18ja9WyLuL8togT2iMderNa6fTf3dG9KfhP+LvUsofNzFVrpq+7FLwoO2rFdZNs4S1NJquA2gntPGIY0taHDy202+kcQXt5GFEa7V2EutXYyd5LU/Kvo7sZDZbSAtFn38luO/MCHdaO5nk8yDdHUpeTXZyYHykmO/PjfT09owW8pN6qr0Gi8/YTmoyrx3blbGdyWl2km1hK+TdSXloJ4VGzU5mM6YWcmn4j/g1n5btZNq+1OJ6bCdrgXXTLGGJnfStzaCdZP/4NqU9aCdn7HUhmzQfr0hku29vYESbv0XEN7SVZ01Mz0t6tY6vFrrHNsV69RFYU+ByTA/2A8+/kU+8Lw2ftSp0xL+T9l28F+Y/76b5D+59iC+c8/jmb1Lvkf0rBySXu00pt2M0dSxDeQv38WNbTn9S6cqx0dPHRq4c29JCrWdu8Oo679LWLmlhKz17Nt3zLg32EA5U4FTCqXkxa+D3bLyYNQqN84knXyOevIKnM9L7QPsvePgZ49Fo1na+9kTT21PtLl+sf70HT7FGPMWUeB5t7VlTI541Ch7tpUqMoH33AB0nRtBwx+XZE1P5WP7GwSmYPzgguY0+fStE02mpVt8KDTyZ4umtEU+vgidre9hL7UFvhflW7Y5SrH/THOOppNf/OEDHmVavpXwf6LU4Cj699rVRe6tHk7OkXaRJsM4mWNrL71o0/9oUePCZT858eNK0x4dnPtsjsLSdstgH/GE37Y1DgXVrBVjnECztJU5NBpnmasdPrO8bp2+pEc8tKfHMVXuyePtLw1OoEU9BwdOp1Kt1/NBormRvDzgwmtY27VBDtLf81pOU3w/s7cFkbzEK+2jnc9aHGlbqz17qT21XhK8/pfyO0J8DKfpT403S7mLE6+trtLccIdYOg7nFU77SbhspP3+R/fSfxOVVzmxWg6cOk9Ci8drha3E0SWSxHE1aP3ZVvmfgGBdKuuaKLUlR/q5oOq/vJLhSPqJ7rhfT1kplrldwxBfL321UjuVGnjP8NDRVKlspX7OVdyS0M4rS2UqsX+2bz7jrEMs/vmwntLfKNJ8OZcj35vPNVO/mBNpblDZ0JNR7cqTTh2++4o52brOUP9XT5lsqtJn9/6TTLvCey7UobVgQzZQBhKHxuC+aTnu18oT152rs7SM8SWPi+TQmam+yYd2LIR/L/3VgCuYQjYmaL5l1+9n/vU5p18VQJmlu1JoAk3dRSfmLyhkZH9SkrmjxSp32Fm7cPxcfWJk3vj6X8r+EPr8sRZ/79AffouWxLe2BTU3EByyvxbB8fqn0H+9kX1e+z9Vy5cdyaWQc8XcQrcbyNOnP3KHwTjvQuVp/RuB+t2k6r28nuFI+onuu5/NnuGySbrOPcSs9r+TPaDQlla3Wn9FWJ5uimbKcJkaL9aWcyPd1RP+68n2upqsnx33SEulvMiSdANAc6eP0dQm8aEqAz3E6qd+q8A7HRrZ1N4Av8wnP7tj+BPqiKF1fYf25iqf3E57rDPFgf/EpGdivp8BvzBM8/IzxYH1fHOW2GvHcpuBJK+sXlX9X8smeR+OzL86PeDnO/yIYnx9IEefX5Pk6yvON6yg3vnG9Gn+tkp5q6wPHEKxq12awvu/UDo32pFPC/h/5hdnsNurN8ZsKggNx35oR7jQ2AvF3KvTwYaCYV8vuy7HB3GBhZKQ0NjxcGBweGW8i+EIrP0sTWztGKZ+p/5grqrvUcSdUfLVC3q2U1wZ5QqO2+zIbf7M4mob/iL9LycO3Fqvpyy4lj9/iTwtLdkxqMYj5splJsSneNS7l3+2J01S75qudyMQ2l9vINjG+1pX/V5Kk8QqX4JP+2UGhhU+9kbIfBL58eu30ttystEVsVIsHR6Q8a4qSecc4tF2Yl0TTabslBW1aPA1hXJdAZwxDW8Nlua72FCZfLA7xrK8Rz3oFj2/MTDOmaXg0miv5fV+ucr3x+ImpfCx/C/h9XyO/D3EnrXk3RfpchW0k7vDW4sJsb6T8t0Gv+K39a6nN2E6fnKV921HK/6AO4nTc5tZo6jQ4tI+nTOhtrnT4vZTXfBbt9ExtDfO2BFhJawE8F5G2/emQbf9jWfn5gdW1f+OEDvP3B0/B/FWVMDclwNzhoCmYvyXdQbk6MtLxxVeaeT7W55gMn568rnyfq+2a/HjA9dnAL/A4hrzQ5qu1xjUQV0c0s4+yiI9qbfP1s++U7Gp9Pw1WtnG8qT59lqfdiL/TQ6vWDvaBNDxHKjyR8hMeurC8FveQusLDrZBnyMMeX39PAE7Bb/DxgN2onJjo5mhmF1yfACui+93oWQvAwys2nR9eve23Ni04neBWqwZY3xeeWlYjnmUKHh+s0xVYUv5Gpfwypby04waoL3UzPmB+Uky3KrTeCDgFfw1iKuzbE8qgF9MczdTIGxJgRXTPMJPEtEXBwe8farMhZM9iBQZb+a0enNLW+OpS6m/14DmzRjxnKnj43Ndc2RvK1kIO9POnuQQH4r4xI9xNhE/4h88Qv/apMKG7Q8mrJWrZUxoe6x8t9RSGewp9A8VxnznBZ2x+tCjOmUr5jN+FLWpRS3z7Ib5aIe9GymuDPNzRw1HLbN4jHiim4T/i71LyOGqZti+7lDyekaeFJVFLHGZEt+fTpmWBxwdLi2RKeeFNe6SvRLPNlPJHlG1mLJd3UtRQ43ekPGuOZtrDDRPb/s+frcz1VmsrO5R2ZzEr0+Qe+cM7fm5SaOU3c+KLz9aqdiWx3mGhzPGnMyVf+y94+Bnz+UZDWDcZwrrZAJYWnT4EfmOewOJn3C9Y/xbK26rg0caXGygP+SY2Tnub6EBqF+os2+UblHbd4GnXsxT6tHMYpu1MPUjHmfSNBY48SvlbIUo4dFByG9PsAMXySZHlMfKZ53MHaBJvL6yCt/ElbwIyby8F3j7Zw1uRXU1nbqQ85Be/gaudL9NEeVHk37mordCkOb802xX99GPrXO8I1d4O0mxYtucv5iZ9b+0sI62fl7i0UzSzz7SzWvGUFHlTVbO7bFvR7vJOBRxj+W0v7Qwln23F9vFqjUbfXNlwDc+GGvFsUPD4fN40eqPh0WiuZDdvIbsp/Z80Jo1CPpZ/AtjN28luanxuUu7TzGFuBNrTrNZJ+XtgDlPpu5rYTo1mgZn2u5pS/n4aR+fjbDCfH5sxXT1pxwPBr8WeshgPtLmGFmOIw8PC23J4+OTLS6NHl6646upLxpqJo7xmjVxFqNx65A7mtdAzLnfSxPR70YqWKPlCrUMrHkU6J9hSa/uBtOjR9QpeedaslPfts+K1Xl+0CmFgPZYorV58f5VSJ4uZoMXsbf72yeYLaTVb8HcQrVlptrbn8RYP725TaNX2ybO+VuupI6zrjGDFF0dRGrAasBqwGrDmApY2g+SIH45z/D685b4irO/bULG+RjzrFTxZv3O2ntqDYyjzrdporbaXttIM8vsH6TjTziCl/Mkwg/zRQdNp1maQyAOcoWE/PAJjYmbdheX/rZBn6H+MxbPMF66dzj/ke9vEdJ5V8lOOL5fX3hnx7UVL24e/pT7kL8NjXaSnjcr3Qh/+gaIAvnPbfHvxEB/raXukyxifyCzl/6ysZGr03Rjp+JLeVzwnAd/fAd89IA+PtHNiqj7ul42vVsiz9NM1uUQ7xXKpRbqqPddAi9hpEeutBEvbf6zt8W6i+u2R3ke8d3+yfFlmUSbS6IHW75N7WAGmr9+Fl/PR78hL7vetkKfxnvtdkxPsT+GZFqmcIFiV9iNzv0v9JFuAuovld/b0O7+zwXaV+13K75ay33Gvc3y1Ql7W/Y685H6fgDyN99zvmpxMQBnhmbby8GzKQ5vLZ4Rq4wPKSRqZ0PxLlolVikxoKxzPSkGfxrc4giibZMsRxNO3XH7lWDmEGNHlC/nFv29KIGOpUj/ywMI6PvPrC8zjhwm0kBubXyl/iMJyn/mOL99rFhm/PpA6iF2vr3HwMVWammJeHYh6fEl0u0khi+tHFWDJvbatXzthKg2LNVZp++18I9PkfjvPyKSNtNqMTsprMwscffmkDGwDn2KM9W5MwJN2xJTy61OOmHMzc9NHTOQhj5ha5MR32oK290CLBndReewbbcTkNzArqamY70rfmOGZoSZPPs/Qxx9N/rQ9LNo+Gt8sX8rNxywf28uy4uv7+GLeaSeXoTywV437QDjyhrrIKxnarC2trOAb099P2EtQCa6U104FQhgcdZDyFyg2RGBqK5o+edV4geOA0KOtgPJb/lgP9308AntiKk/KZSyvo9ZRqdnqurYKxu8X4Fjji2JJf+Belrnar8f+gXb6NtLK3/uV8lsganbTwdNhajbA1wfaXjK0C2xvte9m+2Dd4MF9l1L+Tg9upAvrMm6mE79z+giuiak84U3GutSr6RLad9Ylny2PrzS81Pqxi8oj76rd73c75aXd74ffmmP51fzVtGML+s8Xkm5nverBPvldMMa8L8EnTxstl/L3esYtrQ2+cctnqzXdQ9vIfr4WldVsI9tNzZ5rdobtpsg17qfD8ryfTsq/pMw/mfJnc1K/vp+ObeXt0AbNt+P95lL+rWD7HzpYh9lWJcxXppxTzZGtLGZtKyuNebyPGfvuBoKVdq8y62l7pM/n0DZg+Td5Io1boT7bZG3Op9lrtvPaezExzZ8v08H+YPwbVwjfTrKpzffRZrFsSvkvgby/s/zb0u7wSXVoR3iOrM3HNDnTVl2lnCbPYicyfn8g9fsV/P3vjN738J64rcVEMrbbk+9XaL6U1s/4foX2TgXC0t6vqDcb64tbVeojfq8O+cG2ZSvksU1K419q+JL8y89n5F+eT/4l6jrbIrQ3bIu0k7q1+Q77QPjFEc1/Q18Ay38T7OlviDea3PviTXcr5XFewfEN1Iu7U8DyxUXvUcrf7cGNdGFdxp2kv77TZudj7og+DOuqb14dX2l4qfVjF5VH3lWr2zznRF+E9R5lX3RCk99K8SfW7VsUWtF30XYAboym46x2ByDWr6ejmzYqsHw203d0E8oArsOwDFgvs8ZpQqFVW4cyOLppFZSJn/PRTROQtzUBVkT3DLMl0o9umqtNsAwLD72UDblxPn9wYALqbyJYEwpdEx66sP4E0IF07X7Itv8LFfx2YjZY8B0RIbhvyAh3E+ET/uEzxN+p0CN0a8eS1HJM03CpNNCbz42OFkZ6CgNTxwRppsMXEtaWgDYp5bM9pmkwpw33NwJf46sV8ni5Bodk3zFN2ZjDwVwa/iN+bRmFj2lK25ddSh7aimpgyTFNW4GWMqg5s4Ecitm7bGswtDvXtIjruUqhxWdntY+ja7RLXc2ec7s0PBMp2+XDc2qNeE5V8HQq9ZoS/gsefsZ4JhSaK22gzx0STWvb1nJe0lLgGORj+R/AodKF8m9ta85ENB0f3vPuu/hifd0KtPvGf6ZvAOQzzWv0Yx6aBWba1+il/FHkG2QzPuthfx6LhSYslzFdqXcgCv6OaKbNzSLs59sEHl+4M3D2r9EjVxEqtx65g3kt9IzLnTgx/X42r9FrXs9WBaZvYx3XY43mZ81K+RsI1g1KPaG9xVMfYWgHBgoMrV58P6LUqffD2bRX8kWzs3ltPf0nwQV/B9GalWb7NkVpvNMOtcry1ff4962GsG4yghVfjdeJG7AasOr3dfWt0RTsm6kejieyoD2fr6tvqBHPBgVP1q+rb6D2oG1lvlV76CvW5wOukmZqzz5Ex5l2piblvwgztZsOmU6zNlNDHkxAvm8ju5Sbj43ByPc2wIt6gm3GfpVX/H2vzmmykrYP76U+rPSaLh85IOXfDX34fJpt+14Hr/TpmFEqP9vX1V8Is23f6+pbE/AlfWbt1Akd30sBXx28rp6v9nX1Ccjz2UOfvZmAMiyrKOP8+ir2Afu11b7KLjSkfZVdyr9OkZc0r9dq9Gl8M3599YYEMrqU+pEHFtbxNSmL11f/Q2G5r8viq/H66pSOs8lC/j2KXl+VqFKTQhbXjyrAkvtKr6/yqFXt66sTgEcrn3SwwvsVlfBZaM3D83kaE1DG9/oqbwXFelsT8Givr8YXj5hS/mMpR0zBPR8jJvKQR8y0kR0pX+k1A1ZF30FF2AfVHgiU9vVV9hStXwdk+Uv7OqDP62+8DjjzdUDtUKumaKb9qFZWpK42M9xaAW7SGjjaEIRx/MRUPpb/iWJDBOaNCg0+efUd4Iv0+D4XoW37mij/1uRVymUsryOavCJ/WF59vIiv2eq6dnjVDZQ3AXk8DleSK5+8Sl1cc9YiRccSzmojRVi/nrY1HqvAkvLalnbftkbtldKMX0no8cmm9sqBwbbGPaBM/Jy3NaKI354AK6J7htkSpd/WuDWBTsFbSWSwvk805yooe3KNeE5W8PC2oH3Kbn62s8OBQprFz9szwt1E+IR/+Azxdyr0CN3am061bIccG8uN9/aO9PaNjBdLfaVSE8EXWvlZGhN1slI+WzM0oG6H5LfqWyHvdsrDoVZo1LZDZvPm20AuDf8Rv3aaDm+HrPZtQMzjaFJaWLIdUpsazNd2yP3KtmY+tkM+2ha9Ki1kHL46mtY2LQzhW8iQ8k8bmILZ4wkJJblYTVG6KOnNQHuLUub6BPr6Qaaq/foO0yww024blPJraQzNZhOPvm2QQwG+CCXyX+sTnx5d78FzWo14TlPwdCr1atUjjWafXzJbPGhzRSe1N9HPgN+YJ3j4GePB+rd48GytEc9WBY8WorsBYGTr0+UKGU+nCsKrSielCX7tlLZq5AhxzdXXCrW2+Ta7oM+FPEiCdUeVsDI+1WCyTyudlIj+ahKtvpPxLHjSZAiLNzBq+n+GAkvKp/2KpPY2utSVvr0L8rIIf2h9q72lXUP4Q9i3mcrJPq7maKaK3JEAK6L7zfSsUvgj68Oq5mo44XveExVfvFdP62pt74N2uEIa8+V7AyrpI6lJ6oKweL+fpi7ay/siAxmrUurDXwR/RxRlORRPDldpDysQ3t2t0Nql5PGhpdoBE3creDRYtxvCusMQFh/Ehm3mA8eq3QOL9aVcpenpc1frOJOmp7gChuV/smYK5i00Pd0K9XlIkzxs41ZPG7G+lNPw+KZJvAp2gwKzifKQvhs89GH9NO/mxJfYkYw+yprPeDo86c5V2jPKh7zeCOWbEv4LLM7jMPCNGfHO1zZtpVGbevK7Jhqsm6uEle3b9FN96vtwLuLv9NCqteMG4ommZ80KT6T8LR66sLy2MwMP7GIbnIUrrPEQdVHw1+AKC/tWUzlxvZqjmaJ4cwKsiO5X07NKrnDW5lTDs7ZGPGtT4pmr9txYI54bFTw+WGsVWA1VmwSD7KhXVUv6NIngrSQy2gcY59NDwoWbSl7s+8mL1d6OwLq8iCHl/7p6CuaH4LfswRU6cBYpfVOv27qflQ093m3d2v616s4E4PcXkKsIlVvPmtIElEWecidMTL+fzZkA2nKLLw6Cbbo+oR7yIlKeNSvlryNY1yn1hPYWT32EkbSLHNuvvaP1HAU3v2DxZVg6fB4tHWq4fB8Y4fewuAzTIOW/7lm+lDKtCe1KerfrV2BBvpVgoSIFptau66ldTAMv9Uv570G7+OUV7QWLKOEZjk5cl+81mXkOlZ+o0J6k959+4umnaxUafEvdTAOXuT6Bhl8oNCjW7ejLr7gm4V2SVvgt1OA9c/65dH+tAifpEm7ErRSJ9Gl1lPCMJUDqxi2XsXjSlbpkbEvSezRsuZsScDZH+tUYg2c/Blf7alWatwiTxnrDV6tkcNYUnetHFWDJfawOF5dfKZQB+UYow+70jUQvP/O501JOw7O1RjxbFTwMK8kNfiLkY/nmcjDX97pCc6QPyLKoIuW1YNdWpT1SvtIWfealFmD04UZe8oBwW5W0Vlq/5kCzdtp3WlrPnmNab1Ro9e2tyHifSWrTK/jnau9G2i/+VTf94ZflkKsIlVuP3MG8Shb28RPT72cz/am0i4WnP0nL8kmSGSnPmpXytxOspO8StSTg03pU+1aBwNDqxfdPUerUujspvngwv8MQ1twvc+e3u2Vu1leL5WQLWDcZwYov3iLSgNWA1YDVgBUaLMnTtulIHo6/vKUs66PQNDzra8SzXsGjHRnWlPBf8PAzxqPRrH13iPmmbeu704MH6/O2PgwU4YLS+Wt0nEnfvue3dqT8V2Fb1NCa5DYinx9p18RMmjN++V791jn6QG0T03mi6ReWP75cXvM1boim56Es4PebfH30ZOoj7Zi/6xR6eEvr+6CPLqU+Qty8DVDTKw0fy1B7pMsQ0o/lr4RozJ2et/V4+6Qms8jnLQn4nqpEfzS5FNwZH3iT+be0fHKMPNPkmCNOWiBW+wZeE9Vvj/Q+SnqDc6siE2n0QOt3Kf/slP0+N/ZI73ffkZVa5NB38JQmJ76DjlAmbiRYWtQWZSFNv1+nwOd+v8vT79qmB6ST+13K35uy33HrYXy1Ql7W/e47ElLrd9+RkJr/gP0uPNO2VU8QLN/2yPhK0+/YRzwGSPmXePpdi/L77LyUfygAO4+8TNPv2kpJ2n5nO4/9zkeBat8Hnesx4A2KTPCchO1KEn0a34yPAr09gYydlfqRBxbW8TUJw8bMcmlue6SHeJnlUv6tCss1Ndb2rmkHEWS88z/1oong74hmikwWodVKrjOHVtPuKq92WM5A1ONLVlOaFLK4flQBVhPl+TZnxZfvaDHcHPV+ekkHRTDNi3TazEXK3w14tPI4M8HyH/aMcpVmm2ztK31tmM8jwTbcQ3lY77YEPDj64sjBo6+U/1TK0Vdwz8foizzk0fdeyGtRynN/3KeUvxfKcFTtPshjlcc+uIfwVDItrB+aHGvRBW224DumsdKskuVP+9K29iVsX6RIys1HpAjby7Li08X4Yt75ZAt51xVVliPU67sJj8+uxZdPVjCacz5FjdB+cvSy2vMDsL6U0/BsrRHPVgUPw0q7j0jK/9azj0jTp60KfWn1iY/pxTbcnaJefGmyLOOvuGooh4Y6VWwifEIvPkP8HdFMmc7CVUuru8K7exVaWU/j67iJqXJJOn+vgkfTeXb7aoElsqHZ3h7Co8nwXR48PSnxFGvEU1TwaBH9poT/goefMR6NN5rvUCse1Lki4bnXEA/Kwc6E5z5DPOjbHEh4blNoiMeYpYdOPY/T88p5aJNxV5GsRLZR+eVwjtwuZZian4s0Yn08k+1upR2Mb0UZh9jP50MdQ3ulnskmuCrxdk/i7d3QljS8lfJ/75+CuQ/xFtvNun8/5PHc4wHIu5fyXgB5CAPzImgDPmOZxPpSrlOpx+Phg/DcsD9T7woT/B0KT7IYDx+MZvL1foWvwp8XZkNPUeh5kUKP1s9LXNopmtlnSJ/AwtdKzpnY9l+z+SLTmp1+AeWhbX2A8tDWHAC/EWZS+3hXKdKHc/P4XiKng2XdjPW0t/xbsxFsm7UdIpL3PCUvhv++3HT6kA88N6jWb8H6bBsQz7oa8axT8DAsfDkO51BsK6X8OTQuoAzY6Ulfv/TP84EmtmH3Z4Q7rQ0T/J0KPUJ3h5JXy3nXueJIf6kwkh8u9ZXGi72T5y3fT7Qm2Tcp/4BSfp1SXnidjX3u69HiIQ8AX+OrFfLup7w2yBMatfOuH8iI/jT812wn5l0Ov6vpyy4lj9/jmS0stAcWsG6aJSw5hxv9MLE5ms3kw7iqtZlYX8pZzlkWRzPt5mOIZi3mep+HZqx/H+Xdq+DhuV78G/3q0UN1etCvxvFdfI02Kv9z8KsvPDS5/b4xkOfu1fZnT0o8x9WI5zgFT9ZzXZ67P98QD+rbcYTnfkM8aCN47v6AIR60/+wfJunBtaQHMr5oehD/vhLysfytoAfXe/QAacT6OHfXYhCM79nko2U011Pn7oKrEm+fW6WNYX9Uyl8KvL2FeIu4WfeRj8+nPG1+vljhJcdatDkmPvPFk5hvWE/4m/HcNPXcXfB3RJnK1+Tc/YXRTL5q46Hw50XZ0DM5d3+xQo/Wzzh31+brCMs3d/fF5tFOP0h5WmxIs4c8d7+3Qvt47q7pGd+L3mIcW+bbPMfcDDr9EM3zEf7RE9PzUJ8ETwzjlWQXkC/sL1br42L9pPmg5Gv/BQ8/Y38R+4v9RW0u94CHZqzvm5ewv4iyhrb8TYfq9KAtR9+E/UUpfwz0+38cmtx+tslIM/uL1fZnT0o8x9WI5zgFT9b+FfuLLzDEg2Mm+4sPGuLBsYb9xRca4kF7zf5ikh58hPRA7LymB/Fv9hel/I/7pmB+3KMHSCPWR39R83sZ32fIX3wx1MnaXxRclXj7uSptDPuLUv5jwNsvVmFjcMx+AeUhvx6kvJdAHsLAvAjagM9YJrG+lOtU6gl/pT9fCs/nw18U/B0KT7LwF18azeTrixS+Cn9elg09k/7iQwo9Wj+jv4h9hvQJLJ+/6Is7op1+CeWhbX0x5aGtYX/xgQrtY39Ro49htcIzzedjvf4VrA39gnxGtCmCOy535WHTy83Demnq/UP1sF6qrU/y2It1Ndm5An5jHuJ5oYJHg9VkCKsefMpijXiKCp659imz8vV4/1BWvh77lC8yxIPjN/uUDyg0xDZq0WFTz9Euo9+D9pf9Hil/Efg9O5VhavEu9lE4PsHl2aeU8svKOMR+ZjTmqz4l+0ZJvN2FeKvFd328lfInA2+Xe3jLup/Wb3wh5aFvgDAwL4I24DOWSawv5TqVejweZuQzpfYpBX+HwpMsxsOXRTP5+mKFr8Kfh7KhZ9KnfLlCj9bP6FNqfiTCSutTciwR7fRLKQ9tK/ubaGvYp3xBhfb5fMoXJMBK61NK+RzZsPlcR2n4ptn7prwPoxZ/8j5DWA3fdAoPP2v4pjZ4ZuObbjTyTX/dOwXztDnwTc8KwDc9x8g3/Rzw9jzirS/eiXxk3xR9RvZNkZc8Dlcb79RiVY145+TljXdq4+H2GO9EO83+J9pWjnf6fFOLeGfa2CTjTPJhj53Y9p/jok87bArm1RTv1PYrx+X+0YiL8rXdxkV5bxTKK/uez1fwPN+DpyclnmKNeIoKnqz3TDZ8z/R4ZuN73m/kez4F/KMH58D3fGkAvudDRr7nGcDbV3p4y7rfiIvOuBpxUf81b3FRtPn1GBfV6GNYaX1KKf9fdRQX1d6tyPadtfS+qeDvIFqz0kVNNrR3VtgnqSS7HBetdp+75Z55hMXjBsJm37Tad6p6FJo1PMUa8RQVPFmfXTFX7w2xb5rVflP2TbPytdP6pt8g/0lsfVr/Scr/qTgF89ue2B3SiPXT7gOV8j8gu57RexSqXRdcbNeZtz9KiIsgb9HmJe0D/Rrw9qfEW8TNuo98ZPuDYzrvEUVe8p437SwIbb+i9u4G802bl2W8rze1byr4O6JM5WtyPNTe09Hei8h4Ljbpm6bdl4q+KfYZ0iewfL6p9o6tZqdfRHloW19IeWhr2De9r0L72DfV9EyLTUo5LTapjZEZn1k0llbe+QyIbM7KmJJ3LS6m+R7xsbn7l3+Xj809fmzLpquHL7lo5KSxa65af9noptKVWy4qXbJ+dPTKsauuwkYhok6l0cgUrYz8vl15jjAeqNAY30Qn6UXaJFhnEyysz5OmByvA4k8JaQtpfM8TrPiSl+OaU8BBRU2i6xyiK+kwoaQBCYVXXlzRBr6kQFkSrKsJlvZyJN/zCyzxxfzywUkyxkjXU4kuzfgKrJdVgPVkgpW02BWnhyrAehrB0oIXfN8WzaST+eWDE6eXV6Dr6UTXQ5D3coL1igqwxggW1n8FwXplBVijBAvrY128b4tm0sn88sGJ08MeuuLr+InpdL0S6j9MNGN7NhCeaiecWH+uJpwbCM/DhngehjL4TYL4/lWQh7Y1zcLmq+H5fASPBP9cLWy+muhh/nDw6DUKrV1KHo7LmId4XqPg0WA9YAjrVdSepAnn2sOn45T2pJ1wSvn3w4TzsWWYmu/yMLVR84O0Fx2bqF3tSnmE10bljynTpH2W5GGlvgYbx2MOkkiZ+FoYzdTP+dAxwd8RzZSvLHTsVUQP84d17NUKrV1KHgeANF1+tYJHg/VCQ1i82J6kY6cb6djrQMc216GOPcFAx9CHS6NjWW72QnxCLz5D/HOlY5ov7tOxVym0dil56P8n6fKrFDwarJcawkqrY0820rH7QMcuzVDHXgK0p9ExKX+lgY6h359Gx7IMHCI+oRefIf650jFtI69Px16q0Nql5D0EvzEP8fg2bSCslxvCSqtjW4107FrQsWfXoY7dUqWOabRnMffU4neHwu8kHvkOSzpUaY82xz2U2pMkI/cdrtOjyUj8mz9RLeWfDDJyv0dGfIvXc7VIPlAjngEFz1wvkmd1GOUA4XmJIR4cl3iR/KWGeNBW8iJ5kh68nvRAfK8kWynxMo5lLgI9eJNHD5JitrhI/nylHYzvrWUcGW9oUxfJBVcl3r7daBz6TWEK5jursDE45+Ax4CHIewnlvRzyOC4ueRG0AZ+xTGJ9Kdep1BP+Sn9iXHc+FskFf4fCkyx8OS0W/zKFr8Kfh7OhZ3KRXJsLaf2Mi+TYZ0ifwEq7SM4fxkA7/XLKQ9v6EOWhreFF8udXaB+va2r0pfk4QkZzgNRzEsHfEc20F1nIcSXfl+ckL1Fo1fr2GviNeYjH9xIjwrrPENYry78bmx9nPqsHv443P24vft0vq/Tr2PeQ8neB7/GbOfDr/hiAX/cnI7/uSuDtXxp+XS3Xo8ave2U29Ez6ddp+CK2fk/w6bX/Eo82va1How3JJBwnjGBYpMJLwMY5mpe4zoul0Y95mwlFtbG2zQu88xtsLaXX50RJv570ZtcTI0/hvGW/MTT03qYeNuZsVvs6FfCf1s29jfEZryJMfT3tIoUebN8RjQ3s0U4aS9mZqexpRHpJs1mz3Gb+kAizfPmNeX35pBVi8z1jjAa/bPCa37X/Mw8Ny08vIHtkeKJMr/2adRj48skeKyvF+2/jK+HCe1LrPh/Nk9FKM93Ae7QXpWLZ3iPwyhn1c6WOwiDuNzCNNaWS+WpnQXvaIy63zlHtQKce4RH7xfQL+6IyUPboMI163fNfa6W1EvLznv9qPwb1AoUXD01MjnrQftyvWiKeo4PG9gJ1GFzU88/FxO47TZBUPmq+XVO9TaIj16dzc1HO0ITjH0MYbfml0GcQSzi/D9L37wvjSHqAi5YfLOOrhJdUk3o4Sb7UDVHy8lfL/2zMF80IPb1n3fQc4aS+i+g72a6K8KPKPY77D1dL4Bxn5vqnjNDy3y9o/0HxG7XCuufCf4pT2QBeM01Tyv9N+3I4PoUA7zQf0aS9Bp3lJ9fkV2ud7SVXqxi9Q7l3+PfUC5Ulj12wuXXLRaGnLRZdfdtrYU64eu2oLtlwbxXi04TdSpCUIh68mum+mvHspH99k0q40R6tk9AnK1F48f4Iy66NVtLcrfUervEihVTve55nwG/MQj+8oAIR1vyEsPnarceR0Mp7GkdOzw+M79i/Js3oReVbaCpjPs5LyD4Bn9VLyrBA3v80s9dN+klnKv5K81owixqrXyjP2pNXFVxFvtU8y+1YXpfwzgLf/RrxF3Kz72ueQtQgEH/uXtFqCeVGUbkVC+xx3mhWJjN7OTO218lFjWa9IVDpRgb3WjLzoSa817QoJeq3YZ9oxK2mPnOajVdBO884ibWaW5ti/+yq0r5qjVW5T8Eje3ZB3D+U9T2lzrOPv8+j40dSOaiNPRys426gdXyPbmo0vWBidv5WtwmhaO5C0QxDp1nbktdZA63h/vlDM9YyO95Ry4/nBYR4rhVZ+1gz4Uaew/NFK+WzH0EJJTqxpmZiCj/5jfLVCHp+G0wZ5QmMccX7z2un0358R/Wn4j/i12fYg/K6mLzVYN80S1tJo5pjM0efboB7rYkZzwtRzVMHfEc20u1mMyZptvU3ha6eHr5ofdAX8ThqLfLs82SezgiVjVWNlZeazalZWstppy3PUrFZweI6a1dye56j3KDTE/tCfaR6lveF3D+BMOqJyD5hH/Y18LMTNcR/8VEiklOc5qpT/F/lRGc1p1Dmq4NJ8VORtU356W++Btmg2j3kr5f+Zn4LZWv6t8ZZ1X5trpjnSXpsTNFFeBG3wHYGsHf3qizdlHLNNPUflmG1Gx4Z7Y7a+XU4ZrSROzlG1FTStn3GOmrSzgz8/EV++lRWRac1O82dpfEfao63hOeq9FdrHc1RNz9KsPWS0Wy+1X8fzqKzXHjQfybf2oM35tL69HH5jHuJJ6+PfZQhL5EKTE/br7lHw3OPB05MST7FGPEUFT6dSrynhv+DhZ4xH403Dr6uMx+fXJfke/eR7aH6dz/eQ8i8D3+MI8j20+DjjQ7/uXqUdjO+xZRz17NetJ95irC8Nb6X8DcDbY4i3iJt1X4uXpjnyXduF00R5EbRBO1HRtxNiHj/Bl9qvq4dP8Gnj4VzsVYiTts6u9TP6dZV27/r8OrT5ItOanfbtpuF1CZ9fd0+F9rFfp+kZ37cpZe+gPCn7BNDp6z06fX00Pe8OyLs5oU1oX7D8ExNoGSrjj+O571mrw2xWYMaX2CwtviztWFj+3wp5djI7ko/pfuHaKTpYd9omprcpre8p5X1H0COP0viQtymwUJ5E7jR+Co3zwc+7gEbmp6ZLWJ75eZ+HB5X0/26CdbcCC3ns46fQOB/8RBrT8FOLebNfgeWRn8IjbUx+HsG6S4GF+n4y0Sqw2yPd5gi8Nip/LdgcPm3teqjPsnCzAhttqE/PrlXa0Ul5WDeG+9zV235rPhX7WxZxNPaPtR3sOD7gLmwsfwuMLy8m3mhjuxZDkvJajAfjNrdRe7Rd0j5YPtur7YF4sQc30sWnU/AObc1H0eyE8CZbO5Hr1ewExvvYTmj9qO2y9vFS60ftrXHeqazFuTR7zftE08bh8C2pFyfMo7AdSTaf9QX3ePD8LO2nBpuIRiyPes6yqcW4NfvAdkX71GC1b0WwXdE+9avtXeQ3KV9H8+75+NQvy39rpMs/z6el/PvANr4xwTa2VQnz32E8uwd0OL7Qlkg/Z2xLipotQXvBtsRn4+OrWrvMeq+dTNVE9wgLec4+h/CwXSmP8GZ84tXjc6A94zcv0q4r+OafBwLN3ynTwXGQ+DfGjz5AsolfVtLmrCybUv77IO8fprmmhd3hPa/annvfmOXbv4/1G58FnHF5PwuorcM92j4LWG82FnmexsZqa4ldCj/YtqC9Ypuk7fVne6XhQ3sl+o32ymev0/pfDwDcfrJFqOtsi9DesC1C3WIfCHnIPpDImGZP2RfA8j8De/p34o0m9z6fXHszEd825E+uol68LAWsBz24H1LKv8yDWzvVnmmJomT91XRVeDMfcyv0YVhXtX7UTrH08VLrxy4qj7yrVrf5FCTf509R9kUnNPn1zWnii3VbexsefZe52n9kFTdpg/1py3umw6y3uMk9HtyNuMnU9f/b+/ogS67qvn4782Z3ZzXap10gcgJOpQAJEhnefM9YKtWqkCCrxKTwQtkG4zCf8tpIosTamIDRw06831/aRR+WkN5IaJFLsaWCchJISPJHcELZOHZRCbYrFeerSGJXHGKCPwuXp2f7zPze7/369O2Z7vfeQHfV1Ovpe/rec88953fPPfej2bb7GTcJXb9URNyE9Tcrruz125ch31pA3MSLV2fFTby4qhc3YVwZpLjJLUlb7Oa4yR2AjW9Mwca8cZPbknyquIm2+0GIm8xCG3HcBPGs7LjJuxM+suImd5Jubjdu8l7Q97uS+yJxp4qbdD7D8qu4SRU3CW2jPHETxKuy4ybvJhxSeJ229gPT8F3ci6Pwxjs1q99xk2XA0w+RbKq4Sbr9VnGTsLhJqG0XETf5UIqPgfXYTtzkTvIzkG/2Fz4h8lBjJj5bRNkqY23al/vYRzT6j4NtXyXZKJ/X2zPv6ZDCOMSqpwPyuuKUnYUrXLbCFeYlitL7aWXbJpt+2Db2tWzb3tglvkJkqdqxEXVj6NOUhnbI+3+w/+N4ixrfqLNJcGzE+pu1XpRtW627V2cRPZaRL8tTxVm82KmKGSl8YFxR2OSdpqlsgXGFfVGm57iJ0T9LcZOSTm2XcRP2E/AMHaX/PI40+n8G2Ph8CjbWc+b5QmDcpEcx2Kmy/YQsXGa7x7bjL0KEnpbJdjoS6ZgNn9pt9J914iaIZ+yPIJ6x/xN61hLGTf4jxU3UCc4x3edJN9UJv4hZrJtG/9ug718gf6YI3HmS0hBH+JTzvF+jw/exj+b3DCdKPsE2OG7CXwAoKU7hfgFA7Q8qGbc34yZtwY9qZ4ybZH1VIzRu0k+MRZmHYKwakzSEPBhbEK8YkxCvGMt+3ilP7f1HvPLwWn3NJOvrDU9S3ARtnbEI8YaxCG2LfSCUIftA6quB6ksY/BW//wJ4+g2STTvaukJ88jVB3wYaPj1dfZnOy+txp+xnBf2aU3Yb0vBdLjvNfpWtmmz6MbZCH4ZttR11y0Z92c6TZRtoeKzzLKStUVqobXO8BX0Rtnv1xRalv96YJr7Yth8TvKLv0qsvCfD8jPLjVTyZ/fhvgW03JjvzLDomyuPDvDFRz7bbgv4Zp+wqJrp15Y2JcvyjDWleTNTbO832G/olAuy3WX+zztP1+m20bf7ySOje9BrxiPRo594c7VOUhu95cUjGFTWPr2yBcUV9+Vd9wZh9hu9O2qKfX/5l/ce4Ceo/jyONfgq+wvM3UrCxnjPP1yX5ZMVNrJ374dMjXjCWeBgfX3lxme2+DWn8tRx19hjKnOMmJsORSMd/cY0m0r8Z2shbb8Ix4tAvq/AaG/WlqZjn70/44HUT8T3GTWZIN9UcCmIW66bRvwv0fT65LxJ3eByj4mden+V9NVXNwSh9NpwoOS4QHDex8keFTMqIm4R+iahk3N6Mm6wJflQ7Y9xEjbUwr9C4ST8x1pvnymojjmOgPBhbEK8YkxCvGMsec8pT8RbEKw+vQ/2vjnUsFDdBW/fmQxmL0La8OAP7QO3kf4Wn7Asg/Q8Dnj5IslF67/nkWbELjkm3Ie3ZgLy8mM1zgv5Zp2zkC9/lstPsV9mqyaYfY6s28My2qtoR6UNkqdqxQfQou7y23aY09EXY7lW8Relv1rpjtu20WOsM+RnqnE1lo16s7pOUtibqy7aQtt6kDelI/2Gw7XMkG9XGXiztU4Ie250xDm3vUwF5eWtdnhf0n3LKRr7wXS6b+bT3lG2bbPph24hHbNse7sVXiCxVOzaIHmWn1ovxXAjaL2MC9n9tSkPdX0vulf6q+Y7Q9SY43/HNN3fm2xb5erq5JujbQMO6qeYKFD4wriA+MK6gDjOuYNsyrlh7YtwE6TluYvQ/T3ET1JGy4ybPUx2egzoo/edxpNG/DNj4yRRsrOfMsx0YN2lHW/Lb4B3SyvbpES8YSzyMj6+8uMx2j20XEktHmXPcpJ08H4m0v4fziEj/ohM3QTx7jnhHPFujNDVHoPAM4ya/TnGTNtBh3OQzKT456qa9G1+sm0b/m6Dvv0z+DJa9Xdx5mtIQRzAP1ilPzxrifeyj+T3DCcMl1MV+xE2s/FEhkzLiJsp+14RcS8btzbjJNcGPameMm2CbIX+WV2jcpA113XivVU5dFcaizEMwFuk5joHyYGxBvGJMQrxiLPukUx7ildk34pWH16H+F47Zfj/xvxTeMBYh3jAWoW2xD4QyZB/IdEzhKfsCSP9bgKe/T7JReu/55J8W9NeApk31Qbv4dEBea07ZLwj6TztlI1/4LpedZr/KVk02/RhboQ/DtqraEelDZKnasUH0KLu8tv08paEvwnaPum82ofR3TdSjDc/YttuCV/Rddlvc5Jtg2/umOvNU+O3FTfLGLhDjng/Iyxubevqryka+8F0um/m093ZT3ES1o4fRSpaqHRtRt92zjfYybsL6W1Tc5Je/zeMmIT4Dxk2QnuMmRv+qpC3M/0YdKTtuco3qgLGfkBiH0d+W1CHWge9KwcbQuInRvzrJZ5DjJogXjCUexsdXXlxmu8e261fc5FZoIy9uwjHiouMm9yZ8ZMVN3kS6uQb1yhM3+T7Q9/Hkvsy4CeII5sE65emZiptgH83vGU6UHBcIjptY+aNCJmXETZT9rgm5lozbm3ETNYZT7YxxEzXWwrx2e9wkq404jqFizXnHVoxl24mb3Es4VFTc5MWC4iZoW+wDoQzZBzIdS4uboC+A9O8EPL2PZKP03vPJi4hdeHmtOWX/gqB/wSkb+cJ3uew0+x20uAn6MGyrXjwrvkJkqdqxQfQou7y2fY3S0Bdhu0fdN5tQ+rsm6tGGZ6FxE/Zdss5AYB9PrUv1xmJFnOeh1q9dSSkHMQPr9rbWVjrSPxQ4PrCyS7aHlbL3rXl6hDJTfh6vVcc2sDJV34L7969Q34JxO17Lo/aOq5gB6+ZICj3v7zT6j4vxh6fv3pnDefUd67BTfUfbWY4662r0pwZL35f7re+s06jvHD9T+l6LujFwJ7Gvjw+gfTz+HWQfz+xy+1BjGc8+suJFbB/oP/bDPn4sh30875Sp7OMalKPocT4X6V9y7EPJ17OPrPlazz4+TWn43pWUctA+sN3ZPoz+nwTah5XdD/tAGbJ9eOO6+Mo7FuP5Fxw/ePbBc+tF2cexHPbh+f7KPnB8ouj5bEKj/xXHPpSNenuJ8847Yh2uURq+dyWlHDWeUPZh9F8OtA8rux/2UeT4OitOwuMJtB3PPnhOqSj7uIPswzu/L/ScCj7bL+85FeoM9zrR/y7Etv6QxvBFn1MRMib38vL6t7agf8YpuzqnYuvKe04FrxtoQ5oXt2ab9c6pUGfZZp1T8YfbjEFlxRb+x5s6830yI9+851RwfDv0nArGldD94t451kWdUxFNX//ZzedUvCqpw4ZfMq3zrOfMcyTJpzqnQtt9G9L6dU7FTdBG3rqBPOdUPC7KzTqnYirhI+uciptJN7d7TsUs6PtfS+6LxJ3qnIrOZ1h+dU6F387VORVbV55zKhCv8pxT4Z0nmnZOxRThkMLr0DMA8ZyK30n8L4U33tl33jkV7AOVcU7FnYCn7yDZKL2vzqm4flXnVISdUxFq221KQ18k9JyKd6T4GFiP7ZxTcTP5Gd53YQfp7N73gG0/QLJpR1tXiH15OoT8eOvKvbyqs3vTbXtQz+71vgtb9Nm9rL9Fnd3bpriJmlf2dDPre0HeOb68RjnUL2BcUb6VsgXGFWtPjJsgPcdNjP6jFDdBHSk7bsJ+QhvqoPSfx5FG/whg48Mp2FjPmefPBMZNeuQnTJXtJ2ThMts9th2PpVVfjTLnuAn69Cpmg/EFpD/vxE08fwTxjP0RFQvN+i7KyxQ3QdvHuMnVgmJ6nwV9f4z8mSJwx/PteY2zpUWRr2dqnajRKX02nDBcQl3sR9zEyh8VMikjbrIWdctVxSlKxu3NuIkaR7QFPxg3wTZD/iyv0LhJPzHWi01ntRHHMVAeeWIjiFdtSgv9LgqOrV4OGFuF+l84tnqU4ibqOzBe/EPhDftAKEP2gdRedrUfuE70nwc8/TLJRun9Ts4A5P0jao+4l5c396HWoHh7V5AvfJfLTrPf7+QzAHmsg2tweG9EqG1zvAV9kTaloe6vJfdKf7Pm4tm21doD9F1U3GSQv3n0VbDt36viJl1lM5/2XhU3GbxvHv1eSXGTHxrQuAnjyiDFTf7k2yBucuPM9d9YB/68oLjJX1Rxk4GPm+xP2j3re7Jt4r3ouMltCR9ZcZPGTGe9txs3eTPo++HkvkjcqeImnc+w/CpuUsVNQtsoT9wE8arsuMlthENFxU3+nhM3YSwapLjJDODpUZJNFTdJt98qbhIWNwm17SLiJkdTfAysx3biJg3yM3ZL3OQY2PYqyaYdbV1V3KTzvSpuMnhxE9bfouImr6ziJrnjJieSttjNcZMzgI0fSsHGvHGTfwBj8ipuMphxk380IHGTFwLjJucKipu8CPp+sYqb7OSq4ib+VcVNgMcQjN0NcZMXSoqbHNilcZPPAJ5+sYqbdJWdZr9V3GTw4iZfLCluco78DMQAtu28Z5h4MRWuB9q22m/NvtK/B9v+byQbtc8S9zCxTrQFPeKYt763HZCXd77JmqBvO2WrmA3zEgk+8bzNjbJaW2k92i87XfaZBEqWqh1Vv92mNLRtjreE7rNjX0DFVJT+qvNN8Dwjtu1PCF7jfH/jezrzzfIHWJ4qzuKdCfCkqJ/CB8aVvGeYeDEVtkOMmyA9x02M/usUN0EdKTtuskZ1wDNalP7zOHLTF5xNftf/vpGCjfWcef5RYNykRzHYqX6fA8t2j23H/qs6V0iNJ9hORwQ95lcn+lrS7llxE475IJ6x//OEKFfhGcZNXpfwwWcixPcYN9k321lvddYZYhbrptHfCvp+ILkvEnd4rKLOufH6LKVn3ndnlD4bTpR8fkdw3MTKHxUyKSNu0o665arOVSgZtzfjJiquqtoZ4yZt4An5s7xC4yb9xFjvPLp21C0T7zslbZABYwvilXeGHGPZE055iFc4Bnod4ZDC61D/C8+m+pXE/8obww05w8SLqXAfpvCUfQGkfxPg6V0kG6X3nk/ujc+RH++MES8v72yVrJgNl61iNsxLFKXbbx/P/Z7O+w0jb14ovkJkqdqxQfQou7y2vUZpofPV7eRe6a83pokvtu2nBK/Kdwkds9Wibpwy+gvwjOWvzlxCefBYTJ1Ld1C892hKOWnrWB6CdKT/u+B7euMDK7tke5hR9oAyZHtQmO+diRt69qc6x47XYWAbWJlZY/tfor6lBnRHidda1M1rTdStkfK+ygvH1bfC/S3JfZ3o70/0w/wzlGdx7T61PAZ5RlAGlj1cUtk1Ki+KtO9s5Y+l8BNfoyJteAe8Lk1Ozi01pxYXJlYXJyebyzXK33jlZ6z3dUF/VNCbrEeiUmS9qLClDnKNr+FWp+wwDe3feIwx46U7Ovmvl8R/iPyx/Iagf2driy5PWx6KOnUN7dHwBM8g4zO2vbO8VN+izj/GPgWxE/udy0DzBKQj/QnwVU9Sn6ww2lsnlhXvvEz1UfFOL68rTtlZa9S4bLVGjXmJBJ/2nrIfk00/fFXsf7lvzjqTLkSWqh3V2hX2R/Hs8CuUpsZ9qk9/gtLSzsNk/b0i6nEZnrGvelnwGuf7czQPoHxPTzezfE/WzVDfk3El9PsJ3npuxhVrT8RUpOd5AKP/BPkrJZ3fK+cBeC3WU1AHpf9p5z6/CNj4eAo21nPm+eRg+fm5z+DNGv/lxWW2exXHqdH/mJc6W5PtdCTSYwzLr07015x5AMQz72wcPm/YW0eONofzAF+ieQC0fZwH+EXSTTUGRcxi3TT6XwN9f5nmAYrAHW+dOMfeVJ+l9Mxbn6r02XDCcAl1sR/zAFb+qJBJGfMAyn7VOL1k3N6cBwg9dx3nAdRaHMwrdB6gnxjrxVKy2ojj8moeTuEVY5L3XYZHnfIQrzBe/yXCIYXXof4X7l/5KMVq0NYZixBvvHOSvblM9oHUGiu1ToXXWH0F8PRrJJui11h535BoB+TlxerWBH3bKbtaY7V15V1jxWOdNUhrU1qobfNaC/RF2O7Vnkulv96YJr7Ytp8QvCrfJXTMVou6cSpkHkDNM6A8eCym4scHxXuPpJSDmIExIZ4HMPr/Fzg+sLL7MQ+AMmR7yNqzyO2hxtLo93PMQM3ZKHuwMrPG9svUt1wCuotRZ9pVSPP0hPukR0XZnp6cFXVkPdkzt1WHV8515qna4Co8y9sGZ6k+iBFPBOR1ySk7KzbCZavYCPMSCT7tPWVLJpt+9C1F2pKSpWpHNWbifucipF2iNLQlnqdT3wFV3+Uwm1D6e0nU4yw8477lrOA1zvfVFLdT3zT1dFP1LWjnrJtXRf0UPjCueP0P6rA3j8C4Yu2JcTuk57id0b82aQsb/6GOlB234xjA41AHpf8cxzD6ecDGW1KwsZ4zzzcm+WT1y9bO/RhTIl4wlngYH195cZntHtvuKuV1VeSl9tGxnY5Eeg2F5Vcn+iloI47bIZ7xGBnx7FFKe0SUq/AM43Y/kPCh1iBg3O520s1HoV6MN/HFumn07wZ9vzO5LxJ3+Fti6mwYr89SeubFRZU+G04YLqEu9iNuZ+WPCpmUEbdT9vuokGvJuL0Zt1PrfVQ7Y9xOjQExr9C4XT8xFmUegrFeHA3lwdiCeMWYpOJkjFeqPPXNacQrD69D/a+rkO8hGluhrTMWId5486HsA6EM2QdS8yDq+1E8D7IAeHqCZKP03vPJs9a5cYxSzWN4eT3qlF3E/jPmJYrS7VfZqsmmH2OrItcrKlmqdlQxeY6xhdo2x/TQF2G7R93Hec8TKT4G1iN0bT6O2dh3OSXy/ajI1+hPJ8/RNjGPt7W20pH+I8IPtzzPCh5+Gp5xm54T9Ihlxs9B4gHfPSje+1hyr+zB6Eq2h2VlD1hftofzQhZIz7K7IOjPA421fYPoUY4NkheWOUb5YHvE+vfmv9XJzxnBD7Y965+1A+rfGSjrAUhH+vOO/il9ehiesQw9mSM/SsfOUxq+Z/JV+md0JevfitI/rC/rn6dP8cWyuyjoUces7RXmchwM7drKHKN8sD1i/fsPt3bSIXbVUn6NV37GYyLMy9aojhGvRZSD9bbxq5VzEtJwzPoc4b7JBO0I3z0O6Uj/r8DHukZjVnz/NL1vab8Advgbd6S/zxh+CtI+SmkoD8SktHoi/QMp9XwJ+PyCEzcyvkq2y1Vll4idIf0C0uftFxj70WZPUl4nRV6o/4zp2D+oNrL86kT/eSduhP3PGeL9Yzl5V/2RwpmTUI+riWEejLr7qLNUpuoDVVs1xPtnUvLaI/hHu+Z2H4p0f8r0phMY21X4XSf6fwtt9ZU7dJ5RCg8nU3geSaE/TzwY/a8KffFwAvX/HOVp9L8Oef7rnHn+eEqev+n4KspO0X/O29+yP4Jy5LE+8s795gUon2nvp/IxDfWcy40cfrnPzeKX+yNL+1/Qn/0nmkNB36NALJ/02vLtoj6hbXnSqT/nZe8NR9366tkQyuu/z+k86znz/JrwCZSvY3vsRoAPD0MRyxm3EVPQP3yOfBos/2Hi3/qRPwicY7K8SvUVxleaylcwXjf4h3LTZIf0jClqvI7tzD489levpbSHIY19t4+JckL7Yns3btMfv7Uz39MZ+b6r1Umf5UMuQDrSfytnzMOTeVbMw/hROM4xD6XTg6avKB/WV08W8ZV3vM76qvonpa/sx2Xplaev9m6sr+8l3xF5tfIVxjM/WT79TxP9ReBB0TO+G/2h+eu/yq9Sa0K8cchlQX9J8HyQeMB3uWy0W5TJO1qd9TH6m6E+Hp73JiYzPq7sA+XK9uHJML5Y5o8IepSlyUzFsy9SGtoHrz9ScTDPpkNtx96N9XaasL7o+OICpCP9G4TOeHXzsL6s+KKH9f3U5UGNL6Iuh8YXbwnwNbzYstLX04J/FRdjvcD3TkXZfJ0WfKlx1mmnnMkdljMpyik7hjpJ9Tnj1CdvrAbfP0P1OVNgfRTPWTHhe+ejjrop7MMxFPeXRr88v5Xn9yX3Xkw4r+5iLA9pVYwrvn6wFW3WP7567tOmzGv30qdlvxX725CYJ+om9r0bNK2t93s0LyrliXjA8vRwNL5CxlcqBtmIumV9itJQX09TOUXFl791Szb/p5z6ZukPx5J2zxxm/30M1pW8c5iMx1iOwmPWgbQ9KcchHelPOL6r0hNPr7LGnLz2HnXnAqWpeY7+YdBg69U5SlNx11C98mKl9i76D14MsBZ19tOo70ifNv90mvKp0fNReI7vrVKd2UfjvO8jeqznHod39oXOOrGQsxk8/CjxcC6Dh7PEg9FfFDx48o8vzyfdH3XbatFrk7E84xefYfmjkdafI8XwM87yR/kpX5+xQNmjmovyMFbhRIgvt5O8vHVzE1RO3nEdvu+NH6d2WM6UKKfs8eMElXOuwHLQ5qaonPMFloN68Aoq50KB5WB/xmuXHhY8xNj3Eo1Trd9DPwdjKrzfxuj/+Hu38vwMjVMRS5BHfB/35J0R9eDy/mlShuEnxrELxCu5J8/KypLt50i2aq7Lk63R/w7I9l84smXbVz6M2tPNYw6MT/Pctop/4zPWSTWHMCbe4/4Q4+BFjnVDbAvLHxUyKaM/VPMEF4VcTT5XyuFncy+T2u+i2hn3MqlzDTEvtZdJYT7HVxCn+ZxFxFaeE0GsuQXusYy0+pmfftDhT/nU6Ieq2BTr+aD5fWfL4cf1+1QsLq/fx2v1BtXvQz7Z78sb/8b3zzjlTO2wnClRTtlx9srvCy9nO37f1wvy+z4Cvsk3yDdBLAnx+86KenB5f7IL/L4/C5j78WRr9D8Csv2WI1u2/crv67oqv8+/+ub3Kd+pTL/vbEb92O9T/CnfLb6OJL/NHV4hfiPWvzg9mBgPtRMrv1d+o/LBlN9o8rlQjnyasd6rMcsPC9kwH+eIx7L1R8XkBlV/TpfCj68/KtbZS/1BbMmjPwqbboN7TMP6ej4+vt8rH/82KifNn3rj90YddVNzsehP8Voao58Hf+q25P6gKDtkvYyaK+3R+pfJvPsVvT0F8ZV3PTyv81PrIL29grWou83yrtewd+O2/N2U9Ro1yPe4eJexAenPCT6MnvfIMQ3vZzP6OxOdi9vvVMo61rT9bGnrC+6CPHu9nw3lzPvD8D1vfYHRlWszE3J9AdaXbUatrVd+udFnra1nu8BxxTnKi+0vvnA9Cuuv4vX0Dnjldsa25H0AuO9MrXVivTX6Y0JvlX6YzPuhH976EyVzb/1Jlsw5tuntEfDWn2Sdt8GY+rDgAfvcXsUbOD5kY0rVx2O+daJfgT7+p8hvUOdoezatxsI4vuX9QupcRC8vD4vVuaxXnbKRL3yXy2Y+7b3+2Z5ef4pxEbY91Y5IHyJL1Y4NokfZ5Y1XPEJpofEKswmlv8qPC7VtXHPF8UmFZZ5uhvZ13j4yhQ+MK6qPVLbGuIJty7jCMSmm57iz0f9c0hY2PkQdKTvu/AmqwxWog9J/jicb/VOAjadTsLGeM89zgf24tXM/zqdEvGAs8TA+vvLiMtu9Omu2Rv9jXuqsSrbTEUGP+fGey8egjfgsF8Qz/q5AaPyV9ymq+aiY588nfPA+y/gex/tPk25ehnox3sQX66bRfwH0fY38mSJwh9dUI46wn6z6LKVnyv/DPprfM5wwXEJd7Mf8iZU/KmRSRlwvdL6iZNzenD9RZ0mqdsb5E2wzdbZk6BnA/cRYlHkIxqo5l4aQB2ML4hVjEuIVY9l5pzzEK7NvxCsPr0P9L9z//3Way0VbZyxCvGEsQttiHwhlyD4Qfj9F+W/oCyD9vwE8/SrJRum955NnfXPoEtVHfXPIy+uyU7b3DRFVtjqPnXmJonT7VbZqsunH2Ap9GLbVrLNwQ2Sp2rFB9Ci7vLbN5wqjL8J2j7qP53B/NcXHwHqgj8G2fUnwir5Lr9bnFhU3+a9g2/9/wOMm3txFFTfZuti2+xk3CV3fW0TchPVXzYWG9tt4/sTnAuImOzl/Z7txE8aVQYqb7Ln9+u9ujpvcnNQh1oH67TrPvHGTfUk+VdxE2/0gxE0OQxtdcM5OLDtuMpPwkRU3+aukm9uNm8yDvr8muS8Sd6q4SeczLL+Km1Rxk9A2yhM3QbwqO24yQzhUVNzkJSduwlg0SHGTI4Cnx0g2Vdwk3X6ruElY3CTUtouImxxL8TGwHtuJm7Dvwvt64uu9ra1nfOYe79NI48PoEa/UGr60OMl7wCc85awns7w2zpxNqRviiBrrsT/6EcCR9zl+GZ8DpPyyiOpVF7TzKTL4UeBj5fb0skyHxpw6xnn82O3pdPOCjvPYI2TA/d9Z8Z4aZ/O+vEtUxkWnjAviPVXGecoTZab2A13JSH9E1C0Sz/YI+ksp9Y1E2Zcz8r0o8lFY42EU+//Kd8Azshhf1DcLYt1ZStYIK3tJswmlV5cc3h8h3rPWkDLvSn6IH2rdLe8RYt06J+pZE/8bf4vwjDFWfRsEaexdXvd8UmAm55m2fvR9KXmeEfETT2feCM+4L/baCflR62Ev0XvqzLVIPFPtc5JoOe4xL3hK+/+CyCeNB2+PvbeHN+tcRM82ca3p28k21dm69v8Z4h1p+ewn3lPE+s1nn+IauSFBw/pt9E85+q32/iJf70vJ8xlHv5Xc3wDPWL/V3id1rqRa63ue3lNnpEXimWof1m/Go3nBU9r/Z0U+aTyoOTjT71MpeXKZrA/xxfqtziaNdem3Xn/9XsmXv8uh1niqtZgN8T6fWWc8vAy6xN9ROg3vqDryXiqj/6yjn0V/f8P7Jt055z1sv/2irCPJb7O5uqPLyjNb2Rul6yjvg/jnIMcv36F5rXXxu7Orj/uLmzUqL4p0PPQ7c3/x+GoR+4t5T2B8j/MEX6TxqMIAfPfvQzrS/yqMA/9dSp5RtDPs/Jev78y3rLO8FbZ4+934WwHqzB/jQfm4SL8A6Uj/FcCGL/T7Wynjq3KPFPq49VZnvZUfjvR5/XCTWYPoud3S9E/Fslmv0r7PgzaC9P/ZmSPE/aq8h+tUTt7TzoxnW0XbYTs/JfLdyffI7VtejAv/0/ENiv4emneuKsfB1Jnzyp6MrtwYsz7zupffMeDvkSt9b5C8sEyF3fi92ecIu9X5/J7+WV5p31H+IUhH+j919E/Zlqd/Wd+M4bP8Q7+7YdjQv3MExif6fY4A65/33Qf1TSClf/gdh58l/VPrIfDd90A60o8mMlL6pOKxXh/nrcFDflQ8/Qqlha7l4jjSVSEHpP8RSEf6QyAHzx/pzRzdlMRPnDNn/fXWIMUXt5U3p4cyaxA9txv+j3mhLmTNT3Eb8RyR0b8G2oj9EcR3Xp95MSfvob48zvO8nuIgOHbh2MtFp0x+N/5Ta7yQPm2N161CXjUqI22e7t2Up9H/TQcvlI+L/WLeNaPeuRvePJfpQv/WL09N9Pvbi9z/qDVq3jpk1hMsJ9Q+cE7lJrIP1R/WiB9VJr/L5Sh6PMcD6e907CPrzJofoDw3z6xx7EPJ0rMPb4yp+kXvzBrkHX3cjbxb3XmWbB/T/R5vs32oOdPtzhOF2geOyyPy59TZM/juD0I60h/LqX+ej5ulf+zPqfW/Cru9vULcV2atJ+FxktG/J9Cf680ZTeOT/e4PeD2H8q89/FVz+x7+qv6Y8XfV8edwPMnrEs7m5D3UHs9DPf7P667fq/gK91dnnTL5XbZ7RZ/2faYPOP2V+v4Gyon7K6P/oIMXCtu8/iorJuPFrLgvU3Ndyn579A03ub4Z5cP268kivlh2Wd+/4/5KnUGnbId9JRXzCbUP3C/224l9lCn32bnm5pyatbnpN1/DkI70J5M2G4V62O/wDvhcXliaXp1enlmcmlqYnJhZ5j1a8WVtfKCE8scXF5dmppebk6vLSysLy0u9Ln9ufnJiPUwxPrcyPT+1PDXX6/KX19VjZXF1amldDDOz881el78y1ZybXvdjmxOL03NL46u9Ln9+bnVqamVyem5yfG5icqX35U8vTU2st/vK6vT4yvL4Slb5B5P7kdZWOuJ4fO1N/rc9jExv+dWJ/unExmNcapOvVxflxXS/5NDVUn438hDPhludz/a3uumHWt30VvZoq5tHSzsAadjHxNcNyf8oL8zL+KgT/T9O6m5tsg/esfcbovx9VH4H3+IZ9nGc15B4ZvRx+zxPuI11L3qNxEaZlD8+Q94ORN36ivXBdjaerS1RztzOqDPDwMuGDJL/sZ0xL+OjTvSfo3bG+tj7DVE+yoLLUuVzOyv93y/oN76nl/BYBkbNLi0tzU4szK6ujI8vLK7M9BojFycnpyeWJheay9NzEzNzPe+jmstL04tzU+vVX52bbU70vP5zsysTq6vLc3NLs4vj8yuZfUTsY//MHVtpHbYYbfmwlmbvjom0oRLrNbk8vzo7OzffXJqcXlhdHO+1XBeWm4vLE1MTi+t8rHshK70uf3JxYnpuZXxufHFpfna82XPfs7nueI0vzs9PNBdWZ5pTmeW/KrnfT2lF9yX7RT2Lyn9u3dfcH3VeBfM/aev/auXk37T8S5J/c2+Sz92trfwVXsQ4cwPcWx885rxfJu/rbTu1P+rEraJ183AK//Fl2Gu+QCybVyb3P3Hi+PuPn/jw21ZOfP/CA8sP3v/W4yvvX0ZDYyF714Fo8AMGVvF+BwwmkvtdDlqLvQKtkXLyn7X895aTvwQtrIulmw7f29qS5b2tTp7YEcJ8LW0PpN2TpJUJPus6MFOyDCfHSG5R1A3c+8opO/hjtFb+aFSqvm4u+t9H/LB80HneoGl18oNpw63uenDgBNs3pnk10LFujVAaHmZytNWZVoc00/c4/1uhrDck92U6MIZlZTowh6N0p2W3BB2S/Y4DHXT468n9gWjL+bkN8mNbMftBP8Lyi52lm5P7Dzx0/CcXTqy8/cETx1c//JaHVtbvl9f/WYnoQp1mvOY2R16GiG6Y/q+L/COnLM4T6eLnu8FfG0/+77e/9l3J/S7312Z75a+VNNCZ2B912kYv/DWsi5W7XV8sxqIbo637g5BffL0Vyu3R4HRmEAanh6OtC9N3EhgcdGyzfqXf2PZscr+7sW16qQqg+VeeANohuH9F1EmPuDYUdeOgpZc87pwqty8Yn1NjJx5XDbc6y8Y0HDsNgzw/SPLZnUHH8TkP180W39Iqo+zmuPUbH3NkWSuuvCaPc60MLLskPZyvUXlRpGMQVv5oVG5/Xou6xyfeGMrkUy9HPnM1yh/5qQv5cDyJ2w5jHSMpedm7daJ/bfLbEGWkjfuQXxXDiZ99N/HOY0P1a/nysz3EI+stljNUQDnltv9EsxF163ud6uHFDsuJW4Z/UN7K71XscC/xk6Z35cZWrx+ogvkjP/uEfKwt94s0y8t86ZGUvOzdOtHPJr8NUQbb7X7B734hv5iHCeIdfaed2i3yZe1X8nxJs1ybGZ8rVefGt/jnsUhB8hlXY1JrixEoh/sAXNivsKFO9PdAnm9J7g+K9w3bD0A66wbyY/aAH5pA+jrxY/RHgR/bXLqfaArWxUWT9YGo+6qJZ0OCxniL9e0fJvdjgi6CNJbJDVTfA/TekWLqu+mDjgre9hMv/erLrPzRqNS23+zLbiB+WD7cl42VI58mHn6FurFPyIb5MH1RuD5KaajDNrZCm/Ns/GDU3SbctxkviEee/Ru9HbQV1/ck5RnaRkY/JuhRdiNUH7S3Maeu6P9v5N3aSjO6kjcazcfy4UNAUD71Vrgs4otld6OgHyOa+GoQvdJDHBfcQHmMinLQh3wL1cPyHom0Xm0uBCf6B5PfWG7PEH9D4v2a4EXFqIy/PP11fA36/Cwe7hZfgzg/+5PJ/W6I0f9s8n+/Y/QY6yp1AV+/d1KVuZMIdzLbruOsnURPO3S1lN+NPMSz4Vbns0HfSfRU8v8g7ySyU40GcSdRv3dFfntM7M1MVhN7/lVN7OW5xleriT1fPtXEXmfZ5ehh+Ini36ETe6s1yh/5qSb2up9VE3udfFUTe9XEXjWxF3aVPLG3Wk3saWyoJva6rmpiL+ruy6qJvWpiL83Gq4m961f/JvYmmtXEXjWxV03sXb+qib1qYq+rotXEXjd9NbFXTezFV96Jvb+S3O/y3cgz1cSef+WZ2BuDe3P+vCOvLO2eVnd+u3uCrzlxWPCPAZNYRjcl/8edrtlTcsLDeqd7bOWB5ZWH3vrgQ+9cuO+DHNvjbtjSVQww7doNPpKdrNdvH6mCu6CrOnwhyj58QcFkyQcLzfTzYCEFd9+T3Cdwd/SBpYdW7l954MRdH/jAOtzdd/yB+46trD86cXQdA3/qrg9ex8KIru2AIl4VAOb4vECSsMsBcKECQP8yAHxbqzP/KMoGQHtHAeDfTtL49JnDkF98HYVyN8eyUXngta4T8/08fabsxUyW/91J/lFxeTct73vK4X1z0eVby8l/yjqm/53kF3dMtyT3W8GvjS5oZbmjW7IeiXugtPPSVA9ktdlpL6amdnG5kjrnkC2rpCn94LMrrfxR4rWMSAuWh/JD+ewh2e0VvDZEWtpSLyxnryhH5bWnwLxqVB/Wsfgq2UUM1gUrfzQqzyVGXdgj5Kq8IF4eV4vSl7vF192tLTpOGxLPep0Xt3d8HUl+m/muSX7gLSUsGXOmt4s5JXlULuaoNsuDOfF1d2uLbic4Mah5oY6WvdQtBCe3Ww6+x150EUtuy16ep6bu+ZzlvQXWYx/RHCm4Hqhf+6jsspfwDQkZxr9/B57Hf7h0YYjeja97WlvpSI8fUnx7cm/LVtC3Slviim1cF3Li8o5FnfLDZTNF6iBHKbCsLNm+i+qKy41CZGv090Oe9pHkg6LsPZRWp/IxTW0XsDS0A87DW94cRd0YpNpyTLzHfXVJS+2C+2orf1TIpIy+Wi1BUuODkvV9yvhRy9xUO8ch1huj7jZD/iwv7HNshK36RGsP1Y/tozTVNyi8RXzF8tLqZ9ERtQyZV3iwnrMdjlDZmIZ6xXaI8mTcVEsbUY8ZN43+RPIb8xSytFFtpTD6rKWNvFRTLW308qo7ZWctDeSykS98l8tO0121zBK3KcTXcKuz/CPJ8+bOrum4Lf8v8IE8xlcdyk1rR6QPkaVqR7XMcozSMO86pak+VNkx2zjqPm6JYf1VW+awf+VlkkOCV9VvHxD5errpyV/pJtr5DZSG7zGu8DJWTENbYFzB9mNcsdVR2B5Iz7hi9LZyyfqnBtX3SPJ/c4eX8scaVIcboQ6MDfF1T6uzDkb/YvIb68DjKXnWc+b5ZPIby204YVphibVzyVgypbAE7Z+x5CCkDQl61v2GoD8INIwX2Ha87Fn5RCjzkGXZYyJ/7hOvJb+xbPbWOvnD+t1IvKMO3kBpw6JcbxwY8/yl5J4xHvua+PcXo8563wD1UnjPumn0vwZ5vpzcF4k7eykNcYTzUH2Q0rNGlN6fK302/gyXUBf7Ma6w8keFTMoYVyj7VVsuSsbtzXHFTYIf1c44rsA2Q/4sLzWuGDSM9bbFZLWR4VxDyIOxBfGKMQn1kLFs2CkP8crkinjl4XWo/4V+ncWkFN4wFqntQApv2AdCGbIPZDqm8JR9AaT/CtTha5Sn0nvsy7gfPSTobwKaA1QftItDAXl5264OC/pDTtnIF3/T5hD9r+xX2ermtqLkdxjSyh5boQ/DtqraEelDZKnasUH0KLu8tt2gNOXLK9ve3K0Sdetv1piSbVuNodF3GfRVcH+Q/N/vVXBl7iD6htGu/30zuc/aQTRUS6erpfxu5CGeDbc6nw36DqJaksEg7yD6M8sv+cW6F+1fbpRJ+eMz5G0QduP1eweTrazd5Stap3u1orVM+bD/WcaK1rtbW/mr+Q1vSX/sl1i/iUv4S162Pz0Iy/YNQ+P6vya5l9+h/Yn3v//46vHuZfo1ulcdkhU46I6I7Y3utyNicrLfV0bFy6sJ4PWKcvJv4oKRiOqC5TJIRwXyYPmZHtSj7oudNqPFhSMmn4L5G2delPNmlw1YXgHPTJ43Ea8lLbLdXBZe1llzln8554Q1J5VO4jPWAcY35InttGBeFzYHHcDDEJXJPCLNcNR97aH/h+n5UACt0k1L2zwjxHmPz8HjZ7jwjC9uF5wkU3nhOWhIv5doy2rDw4In5t3SSlqIM2H5l7VwS9kUBij5nDXTK6WftZT/99CvR1tz8lU6ZXlaWyG/Vo+/BB086xeFYB0A","debug_symbols":"","names":["constructor"],"brillig_names":["assert_compatible_oracle_version_wrapper","get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","random","notify_created_note_oracle_wrapper","field_less_than","get_random_bytes","get_random_bytes","get_sender_for_tags","increment_app_tagging_secret_index_as_sender_wrapper","get_app_tag_as_sender","notify_created_nullifier_oracle_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"get_balance","hash":"7070002938254262153","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"344423948968719440":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"361444214588792908":{"error_kind":"string","string":"attempt to multiply with overflow"},"992401946138144806":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"1998584279744703196":{"error_kind":"string","string":"attempt to subtract with overflow"},"3080037330898348111":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"4261968856572588300":{"error_kind":"string","string":"Value does not fit in field"},"4440399188109668273":{"error_kind":"string","string":"Input length must be a multiple of 32"},"5955197699778714817":{"error_kind":"string","string":"Wrong collapsed vec order"},"7564993426627941149":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"7995966536718645961":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"8754864405609694316":{"error_kind":"string","string":"Wrong collapsed vec content"},"8992688621799713766":{"error_kind":"string","string":"Invalid public keys hint for address"},"9791669845391776238":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"9885968605480832328":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"9921926525851912681":{"error_kind":"fmtstring","length":98,"item_types":[]},"10791800398362570014":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"10835759466430049078":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"11021520179822076911":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"12469291177396340830":{"error_kind":"string","string":"call to assert_max_bit_size"},"12913276134398371456":{"error_kind":"string","string":"push out of bounds"},"13049348927268151465":{"error_kind":"string","string":"Dirty collapsed vec storage"},"13450089406971132036":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"13455385521185560676":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"14067204867181196045":{"error_kind":"fmtstring","length":75,"item_types":[]},"14990209321349310352":{"error_kind":"string","string":"attempt to add with overflow"},"15764276373176857197":{"error_kind":"string","string":"Stack too deep"},"16431471497789672479":{"error_kind":"string","string":"Index out of bounds"},"16792019527863081935":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17154023812102399658":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17803644318014042523":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"18160147074902047180":{"error_kind":"string","string":"Out of bounds index hint"},"18195344559583857168":{"error_kind":"string","string":"Wrong collapsed vec length"}}},"bytecode":"","debug_symbols":"TL1NkjU7j5y5lzvW4BAkAbC20gNZq1uSlVmZykw/o9q8MuAE3Sd1H6/vTTojSPiJE4GM/I9//v//+l/+z3//z//6P/7bv/+vf/7l//mPf/7L//zXf/u3f/3v//nf/v3/+3//97/++//4+//+xz+/7/+s+Odf5n/6Z+U//+J//zn//Ev+p3/2D/8Z+I/hPxP/WfjPxn8c/wn8J/EfjOIYxTGKYxTHKI5RHKM4RnGM4hjFMUpglMAogVECowRGCYwSGCUwSmCUwCiJURKjJEZJjJIYJTFKYpTEKIlREqMcjHIwysEoB6McjHIwysEoB6McjHIwyvj97n/H/a/d/87733X/u+9//f437n/z/veON+5444437njjjjfueOOON+5444437njjjmd3PLvj2R3P7nh2x7M7nv2NN+yDaMiGc2H+GkaDNcyG1bAbeuTZI89v5PnBubB+DaPBGmbDN7J/8Dey/T7whmjIhnPhKwPA38i2PrCG2bAavpH3B94QDd+cvxP1FUbBVxqAv5Hn+MAaZsNq2A3eEA3ZcC585QLokaNHjh75K5v5nZavcADeEA3ZcC58JQQYDdYwG3rk7JGzR84eOXvk7JFPj3x65NMjnx759MinRz498umRT4987sj2VdrcH4wGa5gNq2E3eEM0ZMO5MHrk0SOPHnn0yKNHHj3y6JFHjzx65NEjW49sPbL1yNYjW49sPbL1yNYjW49sPfLskWePPHvk2SPPHnn2yLNHnj3y7JFnj7x65NUjrx559cirR1498uqRV4+8euTVI+8eeffIu0fePfLukXePvHvk3SPvHnn3yN4je4/sPbL3yN4je49cNZgfREM2nAtVgwWjwRpmw2rYDT1y9MjRI381uP4q174aBIyGv5GXfzAbVsNu8IZoyIZz4atBwGjokU+PfHrkcxPJjjdEQzbcRJq/X8NosIbZsBp2gzdEwzfn88G58NUgYDRYw2xYDbvBG6KhRx49svXIXw3u3wfWMBtWw27whmjIhnPhq0FAjzx75NkjfzW444Pd4A3RkA3nwleDgNFgDbOhR1498uqRV4+8euTVI+8eeffIu0fePfLukXePvHvk3SPvHnn3yN4je4/sPbL3yN4je4/sPbL3yN4je48cPXL0yNEjR48cPXL0yNEjR48cPXL0yNkjZ4+cPXL2yNkjZ4+cPXL2yNkjZ498euTT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bdBt0G3QbdBt0G3QbdBt0G3QzehmdDO6Gd2MbkY3o5vRzejGLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLDnMksMsOcySwyw5zJLDLKl+wTFGYRCTeC5atQ02DqIRJ3ERN9GJQUxiuVm9u+RHHEQjTuIibqITg5hEuhndjG5GN6Ob0c3oZnQzuhndjG6TbpNuk26TbpNuk26TbpNuk26Tbotui26Lbotui26Lbotui26Lbotum26bbptum26bbptum26bbptum25ON6eb083p5nRzujndnG6VJd/Lk6x6Dy9Wllwst1NoxElcxE10YhCTeB5WllykW9It6ZZ0S7ol3ZJuSbek26Hboduh26Hboduh26Hboduh23lu4/cjDqIRJ3ERN9GJQUwi3QbdBt0G3QbdBt0G3QbdBt0G3QbdjG5GN6Ob0c3oZnQzuhndjG5Gt0m3SbdJt0m3SbdJt0m3SbdJt0m3RbdFt0W3RbdFt0W3RbdFt0W3RbdNt023TbdNt023TbdNt023TbdNN6eb083p5nRzujndnG5ON6eb0y3oxiwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMkon3oFphEJN4HlaWXBxEI07iIm4i3RbdFt0qS+x7wWY1ZTYOohEncRE30YlBTCLdnG5ON6eb083p5nRzujndnG5Ot6Bb0C3oFnQLugXdgm5Bt6Bb0C3plnRLuiXdkm5Jt6Rb0i3plnQ7dDt0O3Q7dDt0O3Q7dDt0O3Q7z63aOBsH0YiTuIib6MQgJpFug26DboNug26DboNug26DboNug25GN6Ob0c3oVlliUbiJTvzc5q8wiedhZcnFQTTiJC7iJjqRbpNuk26Lbotui26Lbotui26Lbotui26Lbptum26bbptum26bbptum26bbptuTjenm9PN6eZ0c7o53ZxuTjenW9At6BZ0C7oF3YJuQbegW9At6JZ0S7ol3ZJuSbekW9It6ZZ0S7oduh26Hboduh26Hboduh26Hbqd51atoo2DaMRJXMRNdGIQk0i3QbdBt0G3QbdBt0G3QbdBt0G3QTejm9HN6GZ0M7oZ3YxuzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzJLNLNnMks0s2cySzSzZzBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklziwJZkkwS4JZEsySYJYEsySYJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmSTBLglkSzBL0vdZf1EDf60UjTuIibqITg5jE83DSbdJt0g1ZEoWLuIlODGISz0NkCXAQjUi3RbdFt0W3RbdFt0W3TbdNN2SJF07iIm6iE4OYxPMQWQIcRLo53ZxuTjenm9PN6eZ0C7oF3YJuQbegW9At6BZ0C7oF3ZJuSbekW9It6ZZ0S7ol3ZJuSbdDt0O3Q7dDt0O3Q7dDt0O3Q7fz3ND3enEQjTiJi7iJTgxiEuk26DboNug26DboNug26DboNug26GZ0M7oZ3YxuRjejm9HN6GZ0M7pNuk26TbpNuk26TbpNuk26TbpNui26Lbotui26Lbotui26Lbotui26bbptujFLklmSzJJkliSzJJklySxJZkkyS5JZksySZJYksySZJcksSWZJMkuSWZLMkmSWJLMkmSXJLElmSTJLklmSzJJkliSzJJklySxJZkkyS5JZksySZJYksySZJcksSWZJMkuSWZLMkmSWJLMkmSXJLElmyWGWHGbJYZYcZslhlhxmyWGWHGbJYZYcZslhlhxmyWGWHGbJYZYcZslhlhxmyWGWHGbJYZYcZslhlhxmyWGWHGbJYZYcZslhlhxmCfpe6w8yoe/1ohEncRE30YlBTOJ5uOi26Lbotui26Lbotui26Lbotui26bbptum26bbptum26bbptum26eZ0c7o53ZxuTjenm9PN6eZ0c7oF3YJuQbegW9At6BZ0C7oF3YJuSbekW9It6ZZ0S7ol3ZJuSbek26FbZcmyQiNO4ue2VuEmOjGISTwXJ/peLw6iESdxETfRiUFMIt0G3QbdBt0G3QbdBt0G3QbdBt0G3YxuRjejm9HN6GZ0M7oZ3YxuRrdJt0m3SbdJt0m3SbdJt0m3SbdJt0W3RbdFt0W3RbdFt0W3RbdFt0W3TbdNt023TbdNt023TbdNt023TTenm9PN6eZ0c7o53ZxuTjenm9Mt6BZ0C7oF3YJuQbegW9At6BZ0S7ol3ZJuSbekW9It6ZZ0S7ol3Q7dDt0O3Q7dDt0O3Q7dDt0O3Zglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJYNZMpglg1kymCWDWTKYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizBH2vKwoXcROdGMQknofIEuAgGpFuQTdkySx0YhCTeB4iS4CDaMRJXES6Jd2Sbkm3pNuh26Hboduh26Hboduh26Hbodt5buh7vTiIRpzERdxEJwYxiXQbdBt0G3QbdBt0G3QbdBt0G3QbdDO6Gd2MbkY3o5vRzehmdKss2V54HlaWXPzcvr9pM9H3enESyy0LN9GJQUzieYgsAQ6iESeRbotui26Lbotui26bbptum26bbptum26bbptum26bbk43p5vTzenmdHO6Od2cbk43p1vQLegWdAu6Bd2CbkG3oFvQLeiWdEu6Jd2Sbkm3pFvSLemWdEu6Hboduh26Hboduh26Hboduh26neeGvteLg2jESVzETXRiEJNIt0G3QbdBt0G3QbdBt0G3QbdBt0E3o5vRzehmdDO64d7rLnRiEJN4HuLeK3AQjTiJi0i3SbdJt0m3SbdFt0W3RbdFt0W3RbdFt0W3RbdFt023TbdNt023TbdNt023TbdNt003p5vTzenmdHO6Od2cbk43p5vTLegWdAu6Bd2CbkG3oFvQLegWdEu6Jd2Sbkm3pFvSLemWdEu6Jd0O3Q7dDt0O3Q7dDt0O3Q7dDt3Oc7t9r8BBNOIkLuImOjGISaTboNug26DboNug26BbZYlbYRCT+Ll5/dvKkouD+Ll5FE7iIm6iE4OYxPOwsuTiINJt0m3SbdJt0m3SbdJt0m3RbdFt0W3RbdFt0W3RbdFt0W3RbdNt023TbdNt023TbdNt023TbdPN6eZ0c7o53ZxuTjenm9PN6eZ0C7oF3YJuQbegW9At6BZ0C7oF3ZJuSbekW9It6ZZ0S7ol3ZJuSbdDt0O3Q7dDt0O3Q7dDt0O3Q7fz3ND3enEQjTiJi7iJTgxiEuk26DboNug26DboNug26DboNug26GZ0M7oxS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmSTBLglkSzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySYJeh7jVG4iU4MYhLPw8qSi4NoxEmk26TbpNuk26TbpFtlSZzCQTRiHZsXLuImOjGISTwPkSXAQTQi3TbdNt023TbdNt023ZxuTjenm9PN6eZ0c7o53ZxuTregW9At6BZ0C7oF3YJuQbegW9At6ZZ0S7ol3ZJuSbekW9It6ZZ0O3Q7dDt0O3Q7dDt0O3Q7dDt0O88Nfa8XB9GIk7iIm+jEICaRboNug26DboNug26DboNug26DboNuRjejm9HN6GZ0M7oZ3YxuRjej26TbpNuk26TbpNuk26TbpNuk26Tbotui26IbsySZJcksSWZJMkuSWZLMkmSWJLMkmSXJLElmSTJLklmSzJJkliSzJJklySxJZkkyS9D3msBNdOLnllGYxPOwsuR7E/tE3+tFI35u38vYJ/peL26iE4OYxPOwsuTiIBqRbkm3pFvSrbLke5n7RN/rxfPwy5K/B62Fg2jE+WGdhy9LGjfxz82+9yPO6nttTOJprL7XxkE04iQu4iY6MYhJpNug26DboNug26DboNug26DboNugm9HN6GZ0M7oZ3YxuRjejm9HN6DbpNuk26TbpNuk26TbpNuk26Tbptui26Lbotui26Lbotui26Lbotui26bbptum26bbptum26bbptum26eZ0c7o53ZxuTjenm9PN6eZ0c7oF3YJuQbegW9At6BZ0C7oF3YJuSbekW9It6ZZ0S7ol3ZJuSbek26Hboduh26HboduhG7PkMEsOs+S8LFm/lyXr97Jk/V6WrN/LkvV7WbJ+L0vW72XJ+r0sWb+XJev3o9ug26DboNug26DboNug26DboNugm9HN6GZ0M7oZ3YxuRjejm9HN6DbpNuk26TbpNuk26TbpNuk26Tbptui26Lbotui26Lbotui26Lbotui26bbptumGLInCRdzEz+17x9KqvtfGJH5u37tkVvW9Ng7i5/b90uaqvtfGRfzcZk2nsuRiED+3eQrPw8qSi5/bqsEqSy5O4ue2vHATnfi57ZpvZcnF87CyZK/CQTTi5+Y138qSi5v4uXmds8qSi0n83L7nDKv6XhsH0YiTuIib6MQgJvG5Vd9r4yAacRIXcROdGMQk0m3QbdBt0G3QbdBt0G3QbdBt0G3QzehWWfL9+cNVfa+Nk/i5fbciVvW9NjoxiEk8DytLLg6iESeRbpNuk26TbpUlEYXnYWXJxXLLQiNO4ueWdZiVJRedGMQknoeVJRcH0YiTSLdNt8qSrPlWllxMYrnVfCtLLg7i5/b9ZadVfa+Ni/i5nVruypKL0Yiuyiyq/+dX/dU+aaf+v7UlLxpxEhdxE50YxCSeh0Y3o5vRzehmdDO6Gd2MbkY3o9uk26TbpNuk26TbpNuk26TbpNuk26Lbotui26Lbotui26Lbotui26Lbptum26bbptum26bbptum26bbppvTzenmdPu25Pz+WNeq9snGTXRiEJN4PqyN+n28NQ6iEcut9m8sYrmdQicGMYnnYf6Ig2jESVxEuiXdkm5Jt+/jbY4vCKp9snEQjTiJi/i5fa+AX9U+2RjEz23U2TmnsdonGwfRiJNYbqdwE50YxM/NfoXn4ZcljZ+beaERJ/Fzsxrsy5JGJ9ZRfBcg1Sg564KpWiLntMJvhFlT//Kh0YlBTOJ5OGvccvvyodGIk/i51RVVtUQ2fm6rJvnlQ2MSz8MvHxoH8XP72n9XtUQ2LuImllsWBrHcapLrPNw/4iB+bnVVVy2RjYu4iU4M4ue2azpfPlz88qFxEMutJln5cHERy20UOjEeVs1frBHqKKq668KxGhr/HoAVJvE8rOqua5xqaGw04iQu4iY6MYhJPA8P3Q7dDt0O3aq6vc5DVfdFJwYxiaexGhobB9GIk7iIm1hHYYXnYdXxxUE04iQu4iY6MYh0q+qOb0dV62LjIBqxBtuF9WNfgFQPYuMgGnESF7EmGYVODGISz8Mq3ouDaMRyq5NaxXtxE50YxCSW27dpqwexcRCN+FnUlWU1HjY68bP4/g7tqsbDxvOwKvYiV9O5ms7VdK6mczWdq+lczeBqBlczuJrB1QyuZnI1k6uZXM3kaiZXM7maydVMrmZyNZOrebiah6t5uJqHq3m4moerebiah6t5uJrnrWb1CjYOohFrNWdhreYqdGIQ82HV5vckY1XT36wvEtX01+jEICbxPKwqrG8a1fTXaMRJXMRNdGIQy20XnodVvBcHsdzqlFTxXvzcTp2dKt6LTgzi51ZfbKrp72IV78VBNOIkLuImOjGIdFt023Srz1isECoWuIlOrHFrLVCbwEE0Ys23zm9V7MVNrPnW6XOuvHPlnSsfdAu6Bd3qk/ci91lwnwX3WdAtaIE6rjVGHQMXcRP/Bvv7ZCt8+bDPjziI9v3bUTiJi7g/tELnjwUxic/Nfz/iIBpxEhdxE534LByfprvQiJO4iLvPgw8ZgZM0TvKrWBxxtdY1TuLq81Ctdf1jnKQFkW78uHV+3Do/bp0ft86PW+fHrU+6TVp8Bfl3cVI4iEacxEWsUxKFTgxiEs/D/SN+bnX7tzrnGidxET+3+nJVnXONQfzc6htKdc5d/Iq3sdxqNb3c6uC93LJwETfRiUFM4udWd5irc65xEI04iYu4iU4MYhLplnRLuiXdkm5Jtyy3WoCq7otBTOJ5eH7EGvcULuImOjGI2VgNbKu+Q1YD28XvSnfVnfZqKVv1zbJayhoncRE30YlBTOJ5OH9Euk26TbpNuk26TbrNGvc7v9Um9neNW1gj7MJF3MQawQuDmMTzsArn4iAacRIXcRPptum26bbp5nRzulWJfO9lXNX6tb6366xq/VqGf3AeohiAg2jESaxxa2tUMVz85ltf7av1qzEf1rZftWFqg69ai9rgF2sj1qmuDV7f8qudq/E8rA1+scatJawPtYuTWG41bm37i06k26HbeW7VztU4iG81q52rcRE30YlBTOJbzRw/4iDSbdBt0G3QbdBt0M1+vR8StZmFqxe2WrQanRjEJL69k6jNUziI1itfLVqNixi9H6rtCpug2q4arfdDtV3ds161eXETnRi98tV21XgeVm3WylfbVaMR6bbptum26bbf3qnepVW3mxLFAAziN51dx1afDMD6ZLg4iEacxG86u856Fc5FJwax3Mq4CgdYhXOx3GoTVOFcnMRyq9WswrnoxCB+bv4tbHUprXp6WV1KjZO4iN+4Pgu/cX0VfuPW47fqUmo8D6tELpabFxpxEhex3LLws6i7SdWatOqJWbUmrfqyXa1Jq665qjWp0YiTuIib6MRyi8Ikfm51I6FakxoH0YiTuIifW30DrNakxiAmsdxqOlVvFwex3GpmVW8XF7HcTuHndmoOVW8Xk3geVr1dHMTPrb60VWtS4yJuohODmMTzsD4LLw4i3ZxuTrf6hKyvfdWE1HgefsW760tFNQtd/Ip31xeFahZqNOIkLuIm+odWGB/W7ssknofnRxxEI07iIm6iE+l26HbabVezUOMgGrHGXYU1wi6sc+YfVpleHEQjTuIi1rhAJ9Z8ozCJ56HVzLKwRjiFTqw1rkla3rO+q6nn4vwRB/Eb93uWtKupp3ERezV3NfU0BpFuk26Lbotuyx5+1bIH0IiTWLlTR1zVctGJQUziefhVyx51SnwQjTiJi7iJTgxiEs/DoFvQLegWdIsat1Y+gpjE87Cq8OIgGnESF3ET6ZZ0S7ol3Q7dDt0O3Q7dDt0O3Q7dDt0O3c5zqzabxkE04iQu4iY6MYhJpNug26DboNug26DboNug26DboNugm9HN6GZ0M7oZ3YxuRjejm9HN6DbpNuk26TbpNuk26TbpNuk26Tbptui26Lbotui26Lbotui26Lbotui26bbptum26bbptum26bbptum26eZ0c7o53ZxuTjenm9PN6eZ0c7oF3YJuQbegW9At6MYsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnIkihM4nmILAEOohHLYhZuohODmMTTaAgQ4CAacRIXcROdGMQk0m3QbdBt0G3QbdBt0G3QbdBt0G3QzehmdDO6Gd2MbkY3o5vRzehmdJt0m3SbdJt0m3SbdJt0m3SbdJt0W3RbdFt0W3RbdFt0W3RbdFt0W3TbdNt023TbdNt023TbdNt023TbdHO6Od2cbk43p5vTzenmdHO6Od2CbkG3oFvQLegWdAu6Bd2CbkG3pFvSLemWdEu6Jd2Sbkm3pFvS7dDt0O3Q7dCNWWLMEmOWVFPU/rqQdjVFNZ7Gaor6K8DCQTTiJC7iJn5u373tXU1RjUkst+/ytpqiGgfRiJO4iOXmhU4MYhLPw8qSi4NoxElcRLoZ3YxulSXfbaxdDVQXK0suDqIRJ7HcsnATnVhupzCJ52FlycVv3FmrWfkwa1kqHy4m8Rth1rJUPlwcxG++3+3zXU1RjYu4ieVWB1T5cDGJ52ElwazTVzX/3bXc1ejUGMQ64rKomgdWzV8cRCNO4jffVaekav6iE8utTl/V/MXzsGr+4iAacRIXcROdSLekW9X8qmWpml819ar5i0acxEXcRCcGMYmnsVqlGgfRiJO4iJvoxCCW2y48D6vmLw6iESex3KxwE51YblGYxPOwan7XYFXzF404iYu4iU4MYhLPw0m3qvnvPu2uvqvGSSy3LCy3U+jEIH5u3/3UXX1XF6vmLw6iESfxc/Nalrp+uOjEICbxPKx8uDiIRpxEum26bbpVPnitUOXDxfOwrh82cBCN+LlFDVbXDxc38XOLWovKkotJ/Ny+jrBdjVmNg/i5ZZ2+ypKLi/i5ZS1hZcnFIH5uWUtYWQKsLLn4uX3tObv6uRon8XM7NVhlyUUn/rl53YSqfq7G8/DLEq8bbNXP1WjE+WGd1C9LGjfxz81HndQvSxqT+LnVTZ3q52ocxM+tPv3r3W+Ni/i5VVZXa1djED+3+lCrd79d/LKkcRCNOImLuIlODCLdBt2MblZuUWjESSy3LNxEJ35ulXLVBtZ4Hn5Z4t9voe1qA2s04uf2tS7vagNr3MTPbdfp+7KkMYmfW8VVtYE1DuLnVgFSbWCNi/i5fd3Gu9rAGoP4uVXNVxvYxS9LGj+3qMG+LGmcxM8tarAvSxqd+LnVzc5691vjefhliUedEh9EI+7+vKg2sI3zW/kArHy4OIhGnMRF3MRvvhUr1QbmWdv+y4fG8/DLh8ZBNOIkLuImOpFuSbek26Fb5UPWslQ+XJzERdxEJ5ZbrVvlw8XTWN1juyqguscajVhuu7DG9cIgJvE8rCS4OIhGnMRF3ES6DboNug26Gd2MbkY3o5vRzehmdDO6Gd2MbpNuk26TbpNuk26TbpNuk26TbpNui26Lbotui26Lbotui26Lbotui26bbptum26bbptum26bbptum26bbk43p5vTzenmdHO6Od2cbk43p1vQLegWdAu6Bd2CbkG3oFvQLeiWdEu6Jd2Sbkm3pFvSLemWdEu6Hboduh26Hboduh26Hboduh26nedWb25rHEQjTuIibqITg5hEujFLglkSzJJglgSy5BRuohODmMTzEFkCHEQjTiLdjG5GN6Ob0c3oVllyfoWDaMRJXMRNLLcoDGISz0NkCXAQjTiJi7iJdFt0qyz53jK0qyXvYmXJxTq2OuLKkouT+OcWvzqgSg382JcPUc+7q82u0YiTuIib6B9mYRCTeB5GudV0YhCN+LnVE+hqyWvcxM/t68jd1ZLXmMTz8MuHqKfK9d61qBuC1ajXuIlOrHF3YY1b2z5r3FqL8yMOohHLrY74LOImOvFzqzuR1Z0Xdb+vuvOivihUd17UTbPqzou6PVbdeY2LuIlODGISy+0769Wd12i9Naolr3ERN9GJQUzi26nVqNc4iHQzuhndjG5Gt6/mo27nVfte43n41XzM+rdfzTcacRIXcROdGMQknoeLbotuq9xq3dYkLuImOjGI5VbLss7D/SMO4udWd/aq1a9xET+3uoVUrX6xanN9SdD4udVtrHrD2sXKh/p6Vm9YazTiJC7iJjoxiEk8D4NuQbegW9At6BZ0C7oF3YJuQbekW9It6ZZ0S7ol3ZJuSbekW9Lt0O3Q7dDt0O3Q7dDt0O3Q7dDtPLd6w1rjIBpxEhdxE8vNC4OYxPOwrh/qY6Z6FxuNOImLuIlODGI+tDqKKHyfZNWaGN8vPu9qTWwMYhLPw8qHi4NY56Hc5ju/1W54D3PyiKvmLw7id353zaxq/uIibuJbzWo3bEwiV3NzNTdXc3M1UfM1B9Q8cBO5mlXzmEPV/MXzkDV/WPOHNX9Y84c1f1jzhzV/nHvHeSadZzJ4JqvmMYfgmQyeSdb8Yc0f1vxhzR/W/GHNH9b8Sa4bah7IM5k8k8l1q5q/yDPJmj+s+cOaP6z5w5o/rPnDmj+s+XO4bodn8vBMnj6T/vv9iHUmR6ER60xa4SJuohPr2HZhEs/Dumi4OIhGnMRFLLea5HBi1fz80H63Cr3eeRbfzW+vRsjGSVzEXiGv9sjGICbxPKwkuDiIvUJe7ZGNi7iJTgxiEs/D9SPWUWThIm5iHUWdh8oHr5lVPlw8DysfLg6iESdxETexvs3UzHD3oBB3D4CDaMRJXMRNdGIQ6eZ0C7oF3YJuQbegW9At6BZ0C7oF3ZJuSbekW9It6ZZ0S7ol3ZJuSbdDt0O3Q7dDt0O3Q7dDt0O3Q7fz3MbvRxxEI07iIm6iE4OYRLoNug26DboNug26DboNug26DboNuhndjG5GN6Ob0c3oZnQzuhndjG6TbpNuk26TbpNuk26TbpNuk26Tbotui26Lbotui26Lbotui26Lbotum26bbptum26bbptum26bbsySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizJLqtYzveaxXr2WjESdxETfRiUFM4nkYdAu6Bd2CbkG3oFvQLegWdAu6Va/E90XX0Wt50YiTuIibWG6zMIhJLLf1YX1DuTiIdWx1qusbite49Q3l4iY6MYhJPI3Va9k4iEacxO5NcvRaXnRi3M4iR6/lxfOw+q6+5/6OXsuLRpzERdxEJwYxieeh0c3oVt9Qvl/P9OqfjO/XM736J+N72O/VP3mxvotcHMRvhO/3N716IiNq3Pp+cfE8rO8XFwfRiN/5jTp99a3j4iY6MYhJPA/rW8fFcrNCI07iIpZbrVDdlQBWxUatfFXsxU3sPjFHp+TFJJ6H1b1wcRCNOImLuIl0C7oF3YJuSbekW9It6ZZ0S7ol3ZJuSbek26Hboduh26HbodvprjRHp+TFINYa106tii1Ep2QVJDolLxpxEms1T+E3wtf84eh+vDiIRuxOM0f348VNrL62Greq8GISz8OqwouDaMRJXMRNpJvRrWoT06k7Al/7iFdHY3x9IF4djY1OjIdVm98jVK8uxcg6Z1WFFzfRiUFMYp3fWqGqwouDaMRJXMRNdGK57cIknof1yXux3Ors1Cfvxe7kc7Qbnhq3CvLiIH4/dmoT1EfoxWrJq1Ndl+MXnRgP63beAdYIVlgj1KmuS+yLTqwR6kyihRB4HqKFsA4TLYRAI07iIm6iE4OYxNOIFsKLg/gtVp3JaguMg/9vfuiF52HdjLs4iDVCFtYIpzCJ52Hddrs4iEb8O+L87rp7tfo1bqITg5jE8/Arp8Zyi0IjTuIiltsodGK51Yn6PuoSp29N4iJuohODmMTzcP+Ig0i3urz9ekMd7XsXN7FaSvFvg5jEaimto6ivyhcH0YiTuIib6MQgJpFuQbeoc1Z7J+rs1N6JOju1CSKJ52H+iN8Io5blq7f8Hr97teQ1JvE8/OqtcRC/84uZnUlcxE10YhCTeBqrJS+/fgKvlrxGI05iua3CTSw3LwxiEs/DUW5ZOIhGnMRF3EQnBjGJ56HR7bXsur+WXffXsuv+WnbdX8uu+2vZdTTqzTqK+kp78Tysr7QXB9GIk7iIm+hEuk26rTpnp/A7O9/vXHk13+XXK+HVfNcYxHxYFWu1brtG2IWb6MQgJvE8/GozrWbmg2jESVzETXRiEMuttqefh/EjDmK51RJWxV6scetEfZehOetEfZehjZO4iJvoxCAm8Tysir1It9Nt7452uIuL2G3vjna4i0H8Vh7rVp+QhWiHuziIRpzERdxEJwYxiXSr2pzAOjursM7OLgxiEs9DqxGisEbIQicGMYnnYX1CXqzzewqNOImLuIlODGISy+3bfdW21jiIRvzcvk4Sr7a1xs9t1YmqKrwYxCR+bqvOZH2aXhxEI07iIm6iE4OYRLrVp2k9dKsWt0Yj1q8V1GHWp+nFTfz2zh0siEk8D+vT9OIgGnESF3ET6RZ0q89YzLfquG71VDNbrtolVccXnRgPq2Lr+WY1qGU9E64GtcZNdGIQk/id33pSXL1qjYNoxElcxE10Ys33FCbxPKxP04vlNguNWOPuQicGMYnnYX1uXqxxvdCIdRRRuIjlloVOLLeaZFX3xc+tHrdWg1rj51a3/qpBrfFz8zolVd0XP7e6h1cNao2fW32Jrwa1xnKrA6rqvlhudUBV3RfLrQ6oqvtiudUBVXVfLLc6oKrui59b3dyqBrXGz61uY1WDWuPnVveCqkGtsX9FyatBrTGISTwP/Ucstzol9Xl8cRLLrY64Po8vOjGISTwP6/P44iAacRLpFnSrK+i6o1VNZ1m3WarpLOtOQzWdNS7iJjqR803ONznfw/kezvdwvofzPZzv4XwPz86h23lu1V6GA6pGMhxQNZJhktVI1hjEJJ6H4823GskajTiJi7iJTgwi5zve2an34TXSraobB1R1jAMyztc436rji4NoRM53cr6T852c7+R8J+c7Od/F+S7Od/HsLLotulXF4oBQm3VAm/PdnO+exEXkam6uZn3y1j28aiRrrM/C+gf45AUOohG/ceuuWjWH/ZVBYf2S3hdi1RzWOIjfCJXV1RzWuIhfltTHQTWHNQYxiedhPca9OIhGnMRFpFvSraqwbhNWw1fWTbNq+Mq6C1gNX42b6MQa4W+xopq48rvBFtXE1biIm+jEIH7n97vBFtXEdbHq7eIgGnESF3ETyy0Kg5jE87Dq7btbF9Xa1Vhus3ASF3ETnRjEJJ6HVZsXB5Fu9d3Uaw713fTiJn6r+X3yRrV2NSbx2zte56Eet14cRCNO4iJuohODmES6bbpVxX5/8y3qLXn53fqLektenjrrVZsXz8P6HnuxRqhd8n0Wnl+N+30WNibxPPxqs3EQ7cM6fV9tNi7iJjoxiEk8D+v691Qx1OfmRSNOYrnVCuUmlludnQxiudV5yHKrEer+r9dJrfu/F404iYu4iU4MYhJPI9q1Lg7idya/m1BR7VqNi7iJTgxiEs/Dr+YbB7HcRuEkLuImOjEeWv3bXbiJTgxiEs/DWTPzwkGsfxuF5+H6EevfnkIjTuK3QlGTrHq76MRvhb7L0ECr1MXzsOot6kTh17eBRpzERdxEJwYxieeh083p9l29HgN+Z9JqZlWb372VqPani1WbFwexRqhTXfVmdX6r3i6eh/kjDqIRv/NrtQBVbxc30YlBTOJ5eH7EcqsKOEacxEUstyx04uc2a2G/ejuzDv6rN2C1NDUOohEncRE30YlBTGKt5jcdtDRdHMTaO6dwEhex9k4UOjGISTwPq6Xp4iAacRIXkW5Gt6rN7+5XVJvS+e4FRbUpnVn/YC7iJjqxRqgDqtr87htFtR41LuImOjGI3/n93hcU1Xp08avNxkE04iQu4ibWfGtZdhCTeB56uVnhINYD/DpiNCcAk1jzrTNZtXlxEI04iYu4iU4MYhLplnRLuiXdkm5Jt6Rb0i3plnRLulUdr9olVccXjTiJi7iJTgxiEk9jtRM11sP+VWjESVz3NTiBdqKLTqyH/bMwiedhNTJcHEQjTuIibqIT6TboZnXOorDOzin8zs534y7qdWyNQcyH9bn53UqLahw6u8at2rzoxCAm8Tysz9hdp68+Yy8acRIXcROdGMRyG4XnYdXxxUEst1qhquOL5VYnqur4ohODmMTzsOr44iAacRLpVi9Oqe9kaEi6GMS8rzoKNCQB8bolYDXB1GB43RJwEhdxE50YxCSeh3jdEpBuSbeq7l3zrTqubxLVZHTqm081GTUOohG/Ebx2SdVmXbJW4xCwGocaB9GIk/id3+/+ZNQr1hqdGMQknod1TXtxEMvNCidxETex3LwwiOX2nbNqJzrfzc6odqLGb9y6Pqt2osZN/Matq8xqJ2pM4nlY178XB9GIk7iIm0i3SbdJt0m3RbdFt0W3RbdFt0W3RbdFt0W3Rbeq7rqYrjalRiNO4iJu4rftv0cZUV1I2H3VhdRoxEmswYDxtpwnkZu2PpoDOIhGrEnW5qqP5vtjm+hEugXdgm7JEkmWSLJEkiWSdEtaVMVG7dSq2IuDWFOvc1afvBcXcRNrNWtX1yfvxSSexupYOt/9vqjXm53vHl5Ux1LjJn7jfnf2ovqYGpN4HlYdXxxEI5bbLFzETXRiEJN4HtqPWIPtwvoxL0zieVhlenEQjViTjMJF3EQnBjGJ52GV6cVyy0IjTuIibqIT4y1LlenF87DK9GLtnTKuKsTZqc/Yi0FMYg1Wu8R5SqogLy7iN27dR6yOpcYgfuPWbcLqWLo/FlyA4AIE3YJuQbcq04tO5HIHlzvolrSoKqyrq42PUKATg1hTL6yCrEuqamlqnMRv3APcRCfWKVmFyR97l2rV0tQ4iEacxEXcRCcG8blVH1PjN9jXjxjVsdS4iTX1KAxiEs/DqsK6cVcdS41GnMRyO4V/4/7dOfsVp/Ahf5X6x6N4CJvwFF7CW9iF4WvFKXzI6yc8hE14Ci9hjPmtdXUu/XGd0m3CU3gJb2EXxpy9OIUP2X/CQ9iEp/AShm8tp7twCKfwIcdPeHDtwoSn8BKubVZTiMPTlj/hIWzCGLJ2VcqpyhBOYYxfW+/8hIdwjV/3U6v9qX/2yBIdWaIjvkd8j/ie87i6oB4PYROewlu47macwndPpl781TiIOI5R/G7KVANUYxBrsl/DZlQHVLP9hGuyX/NlVGvU/VGbxEWko9HR6FifyhfPw/pUvjiIdJu0QA1/rZwRqOHLh4warlvQgRq+bMJTuBa57khXX9RjFw5h+H4bMFDndbM6UOeXp3CNX/d/A3V+2YVDOIUPGXV+uXytFhp1fnkKL+Et7MIhnGTUcN18rg6nP65zGy4cwil8yCjoy5hzbWoU9OUpvIS3sAuHcArDt9YUhX55CJvwFF7Cm2uHQr8cwvk4Udz1ICRRxHXeqmXq8RZ2YRzLt6+qQeqeq+qQemzCGD+Ll/AWxvg1txHysynMNUoTXxNfE1+bwkt4C7uw+Jp4VVXXclWjVOMibmKN93UIRfVE4fFF9UQ1DmJNtp4dJIr78hKuyX7toVF9Uf2jQUwiHTcdNx23ESdxETeRbpsWKOJ67JAo4stTGPOvE4IivuzCIVyLPDH+IePD+vIQhm9tQBR63S1PFPrlEMb4tblQ6GAU+uUhbMJTeAmXbwV8otAvh3AKHzIK/fIQNmGMWeuOT+XvxWlxULiXh7AJT+EljDmvYhcO4RQ+ZBT65SFswvDdxUt4C7twCKfweWt3UOiXh7AJY11qDijiOm8HF+qXDxkX6pdxLF4s5woX5JddGONHcQofMj7M6+bRWbJGS9ZoyRot8V3iu8QXH+aXU1j2xpa9scV3ixe6Nk5hEJN4HuLDe4GrveJXuIibWJPd4BBO4Zps3Wo/bOg4bOg4aOgA0jHoGHQMJwYxia99pJqtGmmBIq5v0AdFfDmEMf/aXChiMIr48hCuRa4HBwef1peX8BaGb21AFPp37z9/KPTLQxjjZ/EUXsJb2IVDOIXhez5GoV8ewiY8hZfwFnYyivi7l58/fCp/t8Hzh8K9vIVdOIRTuOb83XXNHwr68hA24Sm8hLewC8N3FafwIaPQLw9hE55cOxT65S3swliXmgOKGOcNV+qXp/ASxrHsYjlXuCIHo6gvY3wvNuEpjPFrbi5r5LJGLmvk4uviG+KLD/PLJix7I2RvhPiGeFWbVtYWrjati0acRIwH7k7FrI6sxvMQxe3gIWzCNdnvuUv+zuKPbqIT6XjoeJ5jdWU1DqIRJ3ERnVgn+3v+kQNFfHkI1/y/5xM5UMSXl/AWrkX+nkbkwKf15RQ+ZBT698giBwr9ezKQA4V+eQtj/CgO4RQ+ZBT65SFswvDN4iW8hV04hFP4kFHol2vM73FEDnwqZ51bFO7lQ8an8uUhbMI15++hQw4U9OUt7MIhnMKHjEK/DN9aUxT65Sm8hLewCwfXDoV++ZBR6JexLjUHFDHOG67UL4dwCuNYal+lnCtckV9ewhi/9h4+zC+HMMavuaWs0ZE1OrJGR3yP+B7xxYf5ZReWvXFkbxz62m8IY8woxphZ7MIhnMKHjNq/PITt9rxn9YA1LuImOjGISTwPq6O6Ss9Q8hVHhpK/vIVduA7ne/iShpK/fMgo+ctD2ISncP9aSBp+8QHoxCAm8TxcP+IgGnG/I15yNDcMwCl8yFuOZsvRbDmaLUeDMLi8hV2YB7R5QJsH5Dwg5wE5Dwi/tQTk6XOePvx+Uh2xy9Gg1C8PYROWowk5mpCjCTmakD0RsidC9kTygJIHlDyg5AElDyh5QMn9kDx9ydN3xjviI0dzZIcf2eFHdviRozlyNEeO5vBo5u8nPIRN+B3QfL/3lPO3iU4MYhLffpjjRxzEb9xdbvitRqATg4hD+XJr4hcYgUacRKy6FW9hF8Z5msXJHz0P6xcsLtJx0nHSsTLg4iY6MYh0W7TAVfv3DDQnPvAvb2HM34tDOIUP+dZ+FA9hE57C8K3FwQf+97U8Jz7wLx9yfeCPXy1QfeA3m/AUXsJb2IWjuM5JfeA3H3L8hIewCU/hJYwxa90TP1vnNk14Ci/hLezCmPMuTuFDPj/hIWzCU3gJw7fW9LhwCKfweVyNao/HW7t1ax08hZcw9tsuPu+8VTva4yFswjiWKOa5qu6zxymM8b+9V2+5ejyEMX7NzbhG1Zr2eAuLr4mvia8d8vwJD2ETFt8pXnjxQB0uXjxQiBcPAAexxvsepGb1m9WLELL6zRqDWJP9nlZmNZw1V3E312S/h5FZPWf3R+t3py4uIh03HTcd6zP94nlYn+kXB5FuTgsU8aiNgCK+fMgo4lGbC0V82YSncC3yqI1cH+XNLhzC8K0TjkIfNTcU+uUpjPFrc6HQL7twCKfwIaPQL5ev1UKj0C9P4SW8hV04hPNx/RnOP7Zi/OwsduEQTuFDRkFfxpxXsQlP4SW8hV04hFMYvt+abhT65SFswlN4Ce+3dhuFfjmEk4ziHjUHFDHO21zCW9iFcSzfvqqGtT5XawibMMaP4iW8hTF+zW3JGi1ZoyVrtMV3i+8W3z2Fl7DsjS17Y4vvFi+876dOFd73A1zETcR4p/iLCywPXu0DHMSa7KzNi+K+vIRrst/DyMRruu6PBjGJdEw6Jh3rGv3iJC7iJtItaYEinrURUMSXpzDmXycERXzZhUO4Fnli/PPY8Wl9eQjD14sxfhS7cAhj/Cw+ZBT65SFswlN4CcP3FLtwCKfwIaPQLw9hE64xv19ZSnS5je+BWaLLrXkIm/AUXsI15+9BVKLLrTmEU/iQUeiXh7AJw3cVL+Et7MIhnMKHa4dCvzyETRjrUnNAEeO87RQ+ZFypX8ax1L5yOVe4Ir/swhi/9h4+zC8fMj7MV80tZI1C1ihkjUJ8Q3xDfPFhfjmFZW+k7I0U3xQvvKivDh0v6gMm8TzEh/eq/Y538tUQeCcfcBMx2dq8KO7LKVyTre+wgffyWeEgGnESF3ETnRjEJJ6Hg26DFiji+soZKOLLIVzzrwdCaHm7jCK+PIRrkb+HkRn4tL68hLcwfHcxxv82UaDQLw9hjB/FU3gJb2EXDuEUhu+30GiFax7CJjyFl/AWdjKK2Gvd8alcD8zQ5ta8hV04hFO45lwPotDm1jyETXgKL+Et7MLwrTVFoV8+ZBT65SFswpNrh0K/vIVdGOtSc0AR47zhSv3yFF7COJbaVynnClfkYBT1ZYxfew8f5penMMavuR1ZoyNrdGSNjvge+qLlrXkIm/AUXsJbmF74W5Z1hybxJlygEScR40Vx3DfdZr4X5Ga+F+Qm+ttGPa1Ef1uzCWOy+PeLP7qJTqSj0dHoWO+cvjiIRpxEuk1aoIjrgWiiiC8P4Zp/PRBCy1vzEt7Ctcj1MDLxaX05hQ8ZhV4PIxOFXg8jE4V+eQtjfC8O4RQ+ZBT65SFswvCthUahX97CLhzCKXzIKPTLGLPOOT6V64EZ2tyaDxmfypeHsAnXnOtBFNrcmrewC4dwCh8yCv0yfGtNUeiXp/AS3sIuHFw7FPrl8xgtcs1Yl1G833lD+1tzCKcwjuXbV2hzw7lCm1vzEsacV7ELhzDOVc1tcI3Q5tY8hMXXxNfEFx/ml104hFNYfKd44QO8Ho6i/W3Uw0i0vzWHcAofMmr/8hC2+870xN+rvLiIm+jEICbxPPyuxOsl8Fmdbo2LiIOpRUXBXw7hFD5kFPzlIWzCU3gJi6+Lr4uvi6+Lb4hviG+Ib4hviG/9LRisY/0tmItBTGJ51kMm/GFKrFW93/7iItYB1WMf9Ms1h3AdEFam/vQLfrT+9MvFQaTjoeOhY/3pl4tODGIS2+3gL1JerBPzbYSDvrhmF8b8d3EKHzK+q1+uBfme6hz0xTVP4SUM35oPEuC7JDg/JAAYCXAZ459iE57CS3gLu3AIf772PdU56J27XJf5zUPYhKfwEt7CGNM+XvjZOrdrCi/hLezCIYw5r+JD3j/hIWzCU3gJb2H41pruEE7hQ/af8BA2rh3C4PIS3sJYl5pD/HjeYgib8BTGsdS+CjlXkcKHnBi/9l4OYRPG+DW3lDVKWaOUNUrxTfFN8T0/4SEse+PI3jjie8TrYMxvD1eT3LDvSc2pLrnHJjyFl/AWduG4fzzm1BvMGs/Dusa/OIhGnMRF/Mb9LkpPdcs1nof1NzAu4lhG8bp/P+lUp1yjE+vkf/cPDvrkmg8ZRT1qcPx1p/rRupq/OIl0nHScdHx/CeqM95egznh/CeqM95egzlh0W7RAgQ9wCKcw5v9tbPTMNQ9hE8ZCR/ES3sIuDN9vk6M3zkZtKhTyZROu8a0Wswq5eQu7cAin8CGj2K0WGsV+2YSn8BLewi4cZBS41bqjkK3OLQr5sguHcAofMgr5u/l+0BvXbMJTeAlvYRcOYfjWmqLYiw3FfnkIm/AUXm/t7BY72IVDGPvtm0P1xt3zVs1xj5fwFsaxRDHPVb0P7fEQxvhZPIWXMMavuZnLz4ZwCovvFN8pvvgQvzyFl/AWFt8pXl9V71mn+ftsb6wRv8dEx/DRfnkLu3AIp/Aho/K/xzgHDXLNJgzfWglU/uUtDN9RHMIpfL5DqUX8AqFxEI04iYu4iU4MYj6sVzHhIOtVTBdxLHWWUe2Xt7ALh3AKHzI+8rFGSITLJgzfmhmS4vIWhm9VCJLicgrXOazTWX8r7uIgGnESF3ETnRjEbER7nH0PwA7a45qnMI7mFG9hF66j+X7T7lSP3OM6i6u86oK/eQiX7/cw40xkxeUlvIVdOIRTGL7fzp3IkMtD2ISn8BL+zmVdK1UX3a7L3Oqi23W1U110jYNoxElcxE381uhXZ+K7LmhM4nn4XRfsukSuV7o1GnESF3ETnRjEfIiMWHWcyIjLUxhnCP9+C7swVsaLUxgr89UDGuyahzB8a/fhquHyEt7CLhzCKQzfWkpcNVwewiY8hZfwn+/CJvviYlVl1+vbFk7OFxaNg2jESVzETfQP6yx+KdGYxPPwy4iFOv0yotGIk7iIm+jEIGYj2uqw8mira57C3BHrt4VdmDti/VKYO2KNn/AQ5o5YYwov4S3swiGcwtwRy37CQ9iEp/ASfjuiOu+wI6rxDutZfXeNg2jESVzETXw7ol4M15jEtyOqJ++u3BpEI07iIm6iE4PIHYGM+J76noWMuDyFl3CtzPf09SxkxOUQTuHvaOqjt9ryGgfRiJO4iJvoxHiICNjgIWzCU3gJb2EcTp0WXEpcTuFDxqXEro2DS4nLJly+XqcOlxKXt3D5eu06XEp8DycP2vbMa2740gHGl47LQ9iEpzB+9ttRG18cLuNnvdiE8bNR/Dfnafh/b6ITg5jE8xDl/j2VO2jAs++p3KkGvGnAICaxxqif+0q6cRCNOImLWHbfw7WDvrvmOsnfg4+DvrvmQ8a3g+9B26leu1lfaNBqd8/NDOEUPuS63291JwMteM0mLOcbXxUub2HxXeKL8o1aT5Tv5SlcY0adVJTvZRcO4RQ+ZHzEZ80ZH/GXTXgKl+/3bOdsfMRfduHyzdop+IhPeB0y6vvyEDbhKbyEt7ALl++p7YD6vly+p7YA6vvyEDbh8q27lRv1fXkLu3AIp/Aho74vw7fWEfV9Gb513nBT4fIWduEQhte3f9DF1zyE4ZXFU3gJf16z7nCju685ikdxCh9yXRzMumuL7r5mE57CS3gLuzB8Z3EKH7L9hIewCeN4T7G/9PIbG/g3KXzI8yc8hE14Cq+Xu+gAbHbhEEbO1NxuzhQjZy4PYROewkt4C7swztu3D9Hp1zyETXgKY71qL+0t7MIhnMKHXJkz6+4vugGbTXgKl2/d6EWXYLMLl2/dAEaXYPMhB3x3MXzr/Ad8a24xhZfwFnbhIH/ZUjdjqhfwkj2aj9aj3XQwfu3J48Ih/H2O1hn5qr2omvoujUf2aD7CmKe4zkndoK02vfqaX2+ou2SPvos3/Lv1aD/yR/EoH8GlxkGFXq4z/zW2H7TuNU/hmm3dekSL3qzbcmjRa/6Ot45nYpRdPIWX8BZ24egzNPPRO7vrnd31zu56Z3dtntO6vXfPKWqsrpTQiNeMI49iE8acs7juChTtR/4oHuWj04T6qQstNNnNif//3887KB7lo+/n62fwZ+SLxiN7NB+tR3Cps4GquFy7tm5eor2u+ZDrE3fW7kcb3awrf7xFrvk73jovmTxHecjnJzyEMXqtcX2uNi/hzTVAzV0OYfE99EVzXfMQpi+a65qXMH3xnrnmEE4ZU3yH+A7xxWfs5XkrAy142Ol4+1yzC4dwkg3rVrNBDYJRg5e/qqh//dXgpfloPdqP/BH2SM1zpvAh1yfgrCxCV11zHW1990ZXXfMS3sIuHMIpfMio2stDWHy3+G7x3eKLT8b63o9uu+YUPmR8Ml4ewvC14im8hOHrxS4cwl/G1R75qh70Vf2l8cgezUcYs9YddVy3adBtN+tWC7rtmk14Ctec60YCuu2aXTiEU7h8dx0vKv/yEC7f+vaPbrvmJQzfOieo/MvwrWNE5V8+j6vbrs5mvY7ukj2aj9aj/QhjfucNL5WblaPotpuVx+i2a17CW7jmXHcX0G3XnMKHjM/fy9+sy/X79L00H32zrvnVbTOQP4pH+eg0IRnqPgf67JpNeAtjtqv4kOsOWZ3rukEGskc4P3U+1xLewjg/NSvU+2U41pGi3sGo97qRgBfJzbphcFDvdcMAL5WbdYV/UO+Xt/D3SV2zrE9qUDahoqtBAG1zs77Lo21uRs0clRv49zXzqJnjmra+s6M9blbXBdrjmqfw3/g45vprnSB/VMeedYyo06xjrL/AWfOoP8AJqtnVt3/0wM36lo8euOYUPmTUaNZRokYvm/AUXsJb2IWj+XtPNQwcAiMFBP5ZQmB+B+KIwOdpi6FiqajRvtsJn0gVNdp34+B7xXgd19cL+An8zIRIFUcEqua7M/CJocJUTPHBlW3/L1uFqwgVKWcH5XYFPmVbDBV6DlBg97BRYS307KCWEhNFMR0sFqrpYLFQTi2Wiq3CVYSKVIEzilnjU7TFUIEZYFPgg/Tg4Koe1w+HUAW5fjgEVGRiTVGSLVJEFeX6XWEqpoqvrrAg+KP0QCee+tfYG4lx8L9UcWKUqs6LmCvOcNXn+uGcVIE+kSqOiKrR9cMJOkOFqZgqloqtwlUEBXrZ1i8hMNqBqH826tzjTW5rDIihwlRMFV9DlwE30YlBTOJ5WL1pFwfRiJNIN6Ob0c3oZnQzuk26TbpNuk26TbpNuk26TbpNuk26LbpV7znOc/WeX3RiEJN4Hn7V3TiIRpxEum26bbptum26bbo53ZxuTjenm9PN6eZ0c7o53ZxuQbe69bPGhNgqXAV2LvZ0fdFdY0FUiQ1scJSxYWiUpWFBvrKMDTwPq3f84iAacRIXcROdGES6nedm+L1Q4CAacX6/jA5cxE38fi80gUFM4vd7oXUuDH8TGziI9r2jFjiJi4izVqcdXWfLFsT43tUNNOIkLuImOjGISTwP648fXKTbpNuk26TbpNuk26TbpBv+kmdhvTv94iB+bjhi/H1P4CLiDGFNN86QQ1SKWkCYiqliqdgqXEWoSBVHhP9U6AxcZ+A6A3wIG/YMPoRbuIpQkSqOiPipGCpMxVShMwidQegMQmcQOoPQGeBPkAEH0YiTuIibiLFRJPhwniiI+lNH9/8/iYv4jYJ51J86uhjEJJ5G/NXPi3VmpkHU8c8JESpSRR3/rC2JjrInhgpTMVUsFVuFqwgVqUJnYDoDwwwcwlRMFZgBzoFtFZjBgagZrB9EzWDhVNXlfYu6vH+iZrAwnbq8f6JmsDZEzWBhOniN6wC7cAin8CHfv7IChkNA1JEsHBaSY+NI6ivyE0cEMmVjNGRKC1MxVSwV8MGpQD5s7Brkw8apQD60mCqWiq3CVYSKVHFEIB82TjnyoYWpwAywGMiHFluFq8AMcK6RDy2OCPw9BswGf4/hsgl/9vg6MO/fYwBvYRcO4RSubYFDuq9yBw9hHDd2BS74WywVW0VSoBVt7QNhKmo0/0EsFVtFHckdLIRT+JDvu1/BQ9iEp/AS3sLiO8R3iO8QXxNfE18TXxNfE18TXxNfE18TXxPfKb5TfJElPiCmiqUC53pCuIpQUWvqG+KIqEBZDtO6VfCEqZgqlgrMAJsCKdSiZoDrb7x1bgVmjRTCVxi8d+6JoaJmEDgEpFCLpaJ+Lw0j45djL4dwCh8yfjn2MhwWRB0JLqjx+rkVDpEqjgjkTwscCU4S8qfFVLFUbBV1KDgTiJ/EqUT85P1fjoiKn5U4gtsfD8YtDzA+Totxq+DyEK754p4RutSeWCq2ClcRKlLFoUCj2xNDhamYKpaKrQIzSIhQkSqOCFzRtBgq5jtn+946BG9hXEOCQziFYVc1gRfUPTFUmIqpYqmoA8ZdQ7TLPVH++HaFhrknjoh7+QIewiY8hZfwFnbhEE7hQ17iu8R3ie8S3yW+S3yX+C7xXeK7xHeL7xbfLb5bfBEt+BKHRrwnXAXO9oRIFUcELorwhQ7teE+YiqkCM9gQmIFDYAbYewilFqniiEAotRgqTMVUsVRsFTqD0BmEzgCphHu06NB7YqgwFVPFUrFVuAoEMziFDxkZh+9Q6NR7wlRMFZ/9xs1jdOs94SoOBZrxNu4Koxtv40oN7XhPbBWuAqPVuqPFbuOOLnrsnlgqtgpXESqyREAcERVITwwVpmKqWCq2CsxgQYSKVHFETMwgIYYKzOBATBVLxTcDXM6gI685hFP4kCuVmssBd63RYrdxZYC37G18FuM1e08cERU1T9SR4OYhGvCemCqWiq0CM8CJ3aEiVRwR/lMxVNQMDMdTcfPEUrFV1AxwYxP9eE+kipoBbt6hJW/jphV68p7ADLAhY6rADDDR2CpcRahIFUdE/lQMFaZiqtAZpM4gdQapM0idQeoMjs7g6AyOzuDoDI7O4OgMjs7g6AyOzuDIDPCXb58YKkzFVLFUbBWuIlSkCp3B0BkMncHQGQydwdAZDJ0Bkg034fBqwSdSxRFRyYY8R4tiswlP4SW8hV04hJOM2LIr6jBwVw9tik/UYcwBESpSxRFRCfXEUGEq4GMQuixLTwoiqsVQYSpqWXAHEK8YfGKrcBW6MbbOYOvGcN0YrhvDdWO4bowbUZjbjagrdGO4bgxE1J0bIuoKRFQLnUHoDEJnoBEVGlGhERUaURG6NUNXIXUVUlcBEXXnlroKqaugERUaUaERFRpRoREVGlGhERUaUXEjCnM7ugpHV+HoKhxdBUQUbtei3fIK9FvuuSGGClMxVeAcJMRW4SpCRao4IhBRLYYKzOBATBVSZmi63LhhjK7LJ1LFEWGy+fBexCdMxVSxVGwVrkKWHs2eT8jSo93ziaHCVEwVS8VWgSMdEEcEgqtF+eAbMZo9N241oNvziaViq3AVoSJVHBEIuxbwweZDpLXYKlwFfLD5EGktjghEWgtcdeGwEWktpoqlYqtwFaEiRSC48G0Bf0/4ialiqcCROgSuyK84IhBPLbByWG3EU4upAmcU9ZNbB3AVoUJnkDqDozNAPLUwFVPFUqEzOGKKdyve72z4+8NPmIoael+xVNTQeOiBtzA+ESrq4PA4BC9ibIHcaVEzwJMJdI0+MVUsFZgBjgch1CJUpArMoBYL72TcuMWPlzI+sVTA50C4ilCRKo4IRE2LoaJmgGcEB1HTYqnYKlxFqEgVRwTSBZ1VaCLduCWOLtInUsURgQxpMVTgEBbEVLFUbBWuIlSkiiMC6YLvqOg4fcJUTBVLxVbhssBIlxap4ohA1OAhG17T2GcUgdLCVYQKHBx2YupJRKC0mCrggw2LQGnhKuCDiaYuY+oyHl3GozM4OoOjM0CgtNgqdCMd3UiHMxjoZX3i3Y4fv/uCF/AWxu/6gkM4hXFYpwSipMVQYSqmiqWiDque0Qz8weMnQgV+8Q98yPcXNcFD2ISn8BLewi4cwuJr4jvFd4rvFN8pvlN8p/hO8Z3iO8V3iu8S3yW+S3wROfWka6Df9omtAg8r7s+ECtzIxALdR2UQ91HZFXh6sCBMBWaAPYUwaoEZ3H/mKkIFfnsHfMjow708hE14CsNhQ9TGradjA++M3IEtjXxpYSqmChwJjh7J08JVhIpUUTOoZ2UDb5V8YqgwFVPFUlEzSBwPMqlFqEgVmAGOB5nUYqjADDBrZNLB3kAmtagZHOwnZFKLmsHBRJFJLQ4FOnifGCpMxVSxVGwVriJUpAqdwdAZDJ3B0BkMncHQGQydwdAZDJ3B0BkMnYHpDExnYDoD0xmYzsB0BqYzMJ2B6QxMZzB1BlNnMHUGU2cwdQa4SqonTgN/GPqJUJEq6iY4fh43wS8PYROewkt4C7twkHENVU+3Bl56uevp1sBbL5/AYTiEqwgVqeKIwJVSi6ECPgGhy+J6UhBRVyCiWgwVWJaEmCqWiq1CN0boDEI3RujGSN0YqRsjdWOkbgxE1J1o6sZI3RipGyP1HCCi6r7mwJszn6itUd+PBt6d+cRUsVTU9vhh6IqoJ0JFqjgUeIfmE0OFqcAMFsRS4Vx6vD3T69vwwJ+ffuKIGD8Vg8tow1RMFUvFVuEqQoUsvWkqmaaSaSqZppJpKpmmkmkqmaYS3rrp9W144LWbTwwVOL04bxOnF7OeS8VW4SpCRao4IhA+LYYK+ByIrcJVhIryqWd4A2/lbFEh9MRQgSsOHPa9drpiqdgqXEWoSBVyzYMG6ic+n4EVwUu2L2/h6gC6/z6EUxjHWB/7aJB+YqgwFVPFUlHuKCn0H10OYZxiTDGOiPyp+OwHVgV/p+PyFF7CW9iFQziFDxl/p+Oy+B7xPeJ7xPeI7xHfI75HfA998Xevm4ewCU/hJVwbGucUvdhPhAqc7Q1xRCCksA3Qi/2EqajvnQZewlvYhUM4yQaHgMCmSQgcCQ7LXEWoSBW4/Khdh47qJ4YKUzFV4BoEc0MItXAV+I1bcAofMr7U4WzhS91lE57CS3gLu3AIp/Ahb/Hd4rtx0Fj/jYO+/8tSsVW4ilCRKo4I/6kYKkyFzsB1Bq4zcJ2B6wxcZ+A6g9AZIK9wlwMN209MFUvFVuEqMIMFkSqOCESWYSPnUGEqMAPs3Uotn9iHFVtPuIpQkSqOiMouxxdm9G4/YSqmiqViq3AVoSJVHAr8Re8nhgpTgRlsiKViq0iet3UbKsEmPIWX8BZ24RBOYRxHbSC0cHs9qBvo4X7CVEwVS8VW4SpCRao4IqbOYOoMps5g6gwQZPV0cKCd+wlXESpSxRGBqykEG9q5nzAVFWdYMMTZ5S3swiGcwvDGBsEVVouhorzrodpAI/cTS8VW4SpCBY5+QBwRSLQWmAEmikRrMVVgBthCyK37vyCQNk4sAqnFVLFUbBWuAt1oOAQEUosjAoHUAjPAdBBILaYKzACHgEBq4SowA+wABFKLIwKB1AIzQLUhdjb2LWKnhasIFeXjWBLEDu4KoPfbcXccvd9PmIqpomZQD0YGer+fcBWhAjOoc4B2b6/HBQPt3o474XgDquPmLHq/HXdD0fz9xFbhKkJFqjgikFK4J4oO8CdkW6Lp+4mtwlWEilQB01pGNH0/MVTgsHFCEEwtloqtwlWEilRxRCCYWgwVOoOlM8AXwMSS4AtgC1cRKlLFEYF4SpwdxFMLUzFVYAbYO4inFq4CM8CsEU+4eYtm8BaIJ9y8RTP4EzUD3LxFM/gTS8VW4SpCRao4InDB1WKo0BmEziB0BqEzCJ1B6AxCZxA6g9QZpM4gdQapM0idQeoMUmeQOoPUGaTO4OgMjs7g6AyOzuDoDI7O4OgMjs7g6AyOzACvc31iqDAVU8VSsVW4ilCBGRjEEYEYbDFUfDPA8xK0nTcv4S3swiGcwodc8deMA5wQiDWHwGEsiFRxRCDWWgwVpmKqwOnaELosS0/K0pOCiGoxVWBZMGtEVAtXESpSTXUGWzfG1o2xdWNs3RhbNwYi6s4NEdUiVOjGQETdud2IumKo0BloRLlGlGtEuUaUa0S5RpS7bs3QVQhdhdBVuBGFuYWuQugqaES5RpRrRLlGlGtEuUaUa0R56j64EXWFrkLqKqTugxtRV+gqaES5RpRrRLlGlGtEuUaUa0S5RpQf3QdHViF+PxVDhanADAJiqcAMEsJVhIpUUTlRv90+0ED+xFBhKqaKpWKrcBWVUz8cAoKqRc2gAgl94jco0Cgev/u/LBVbhauQxQ5LFbLYMX8qhgpTMVXIYqPF/AlXESpShWz4WD8VQ4WpwJEuCFcRKnBCcd4WlhSz3j8VQ4WpmCqWiq3CVYQIl5s64UOFqZgqloqtAj5XhIpUgSOtTza0mD8xVNSR4skDWswDN8zRYv7EVuEqQkWqOCIqxJ4YKkyFzuC2XIG3sAvjWQc4hQ8ZTw2xAdDXcNmEp/AS3sIuHMIpfB7flvLLQxhndkLg/N3/BefPIY4IxE+LoQKjJQRGOxCp4ojAVU+LocJU1GrUa6UGur6f2CpcRahIFUdEpcwTmEFAmIqpYqnADAaEi1iYtUEsFVsFvjWCQziFDxkXQ5eHsAlP4SW8hcV3i+8W3y2+Lr4uvi6+Lr4uvi6+Lr4uvi6+Lr4hviG+Ib4hviG+IfeA8V7fJ0IFtscVR8SNC/AQNuEpjA2wIDASSqqKH5cH6NxuNuH6tSs4V/E3b+H6tSu4VfE3p/B5jL7u5iFswlN4CW9hF6YvurYDzyrQmx34gEBvduDhAHqzn3AVIQKBgEcA6MCO+qWSgQ7sJ7YKVxEqUgWuYeosogP7iaHCVEwVS8VW4Sowgx9Eqjgi1k8FZrAgTMXfDAxPodGAfZ8noAH7iaECP3/FVLG+wQK8hV04yI45Ym0dI93/5RsJAVZ91I9d+BsJdVRN1I8P+StuQ15WO/VjE57CS3gLu3AIp/Ahp/im+CbWGBu4PtMDTxDQQx3r/rMjoir7iaGiRsPNfvRDB+7Vox/6ifOEoTn6iaHCVNRq1D1NQ9/0E1uFqwgVqeKIQEW3wAwMwlRMFUsFZuAQrgIzyBL4iK/HAIZu6CeWiq3CVYSKVHFEoNZbDBU6g6/W60/VfryEt/C3zSqdrPqiH6dwbbNTvH7CQ9iEp/AS3sIuHMIpLL5bfJEAG5PDl4P6HRtDb3NsbKidKo4IpEALjIblxFeAuro1vDH4iVRxROArQIuhAquBzYGvAC2Wiq3CVYSKVHFE4DN9Y3/jQ72FqZgqMAOc0dwqagaO04vEaJEqjggkhmMVkBgtTMVUsVRsFa4iVKSKQ4EO5ye+nbkvm/AU/nYm9kB1Nz924W9n1q95WbU2Pz7kL1weD2ETnsJLeAu7sPgO8cUXCsfkkCn1uMvQmxx1kWjoTX4iVKQIJEc9FTP0GUf9Foihz/gJVxEqUsURgWuBuoQ0dBo/YSqmiqViq3AVoQLHkxBHBG5BtBgqMAOcUWRJC/jg9DpmjdPrpmKqWCq2ClcRKlLFEYEsaaEzqOuHibWq64fmJfxtp4UVqOuH5hCuYMeZqOuHy3X90DyETXgKL+Et7MIhLL4pvsiHwI5ECgSOBimQmDZSoEWqOBRoFY76vQ0zXDfkhHAVoSJVHBG4bmhRq1G/eGPoDn5iqlgqtgpXESpSBWZQ+xvdwU8MFaYCM9gQSwVmEBCuIlSkCsygVgF9w08MFaZiqlgqtgpXESpShc6gLjnwOVNtw49N+NuZjmWvS47mLfztTMc+qUuO5hQ+5LrkaB7CJjyFl/AWFt8tvrgKOVfgCRxmikw52HfIlBauIkQgOQ5WHdcadQvZ0Pf7xFbhKkJFqsBTPWwOXGu0GCpMxVSxVGwVrgIzQBngWqPFEYFrjRaYQUKYis8nfzi9lSVPhIpUcSjQ8/vEKDEgTMUsYRBLBWYwIVwFZrAgUgVmUMuIxt8nMAOHMBWYQUAsFZhBQrgKzOBApIqawcBhV/48UTMYOOzKnydqBgOHXfnzRM1g4LArf56oGQwcduXPE5gBDnv+VGAGOOxpKjADHPZcKupD8f4rFw7hFD7kip5meOP0LVMxVZS34bzUVcwTriJUpIojoq5inhgqTMVUoTPYOoMNH6yMYzQshmM0nH+fKpaKrcJV6PG4Ho/r8YQeT+jxhB5P6PGEHk/o8YSe0dAZhM4ghxx2Ljns1ONJPZ4MFaniiDh6PEeP5+jxHD2eo8dz9HiOHs/R4zl6PEfOKHp6nxgqFg8bb2S+h43O3XsIeCdzCyROi6HCVMjxoK33ia3CVYSKVKHHY3o8psdjpkJnYDoD5Mo9bKTHPeypxzP1eOZUsVRsFa4CPhsiVdRFBBgXL5eHsAnDwyEwUkB8I+ErVTXdPh7C30j4OlQdt4+XcF2OHLALh3AKH7L/hIewCU/hJSy+Lr43Eyox0XCbuB+FhtvEjSc03D6xVbiKGm1ikROjYY1yqlgqtgpXESpqNSbWCZV/BSq/xVBhKqaKpWKrwAywaVH5LVLFoUBbbda9bENb7ROYQUJMFUvFVuEqQkWqOCKQFi2GCp1B3f3AN7xqsX28hb/dEfffh3AKVzXgEO0nPIRNeAov4S3swiGcwuI7xRepge/eaJXNuk1uaJVN3DxGq+wTR0TdJXmiRsPNcLS9Ju5Yo+31iVRxROBaocVQUauB6xi0vT6xVGwVriJUpIojwjGDCTFUmIqpAjPALsD1RYuaAW7zou31iZoB7omh7TVxU6/aXg33Aqrr9bEJT+ElvIVdOIRT+JBTfFN8kUa45YpW1yeWiq3CVYSKVHFEII1aDBWYARYIadRiqdgqXEVQoDk18QUWzalPuIpQkSqOCOQHvsKjOfUJ/IxBHBG4PmiBn1kQpmKqqFUO8BZ24VrlBKfwIVfxJ87EHMImPIWX8BZ24RBO4UNe4rvEF981cBWBztPErV10niZueKLztAVSosVQUaPhqgJdpInLB3SRPnFEoOJbDBWmolYDd1nRRfrEVuEqQkWqOCLwjaIFjudAmIqpYqnADCaEq8AMcK7xjQKfROgibZE/FUOFqZgqloqtwlWECp1B3ULFPZBqIn08hL9tiTtC1UH6eAl/2xK3kKp99HEIp/B5XK2jj4ewCU/hJbyFXRhntpYG/Z+Je5zo/0zc2kX/5xNbhauo0XBjFW2eifuiaPN8YqnYKlxFqKjVQCGizbMFvnO0GCpMxVSxVGwVmAHODq4rWqSKIwLXFQg2tHk+gV+eAodwCmMoLAHiosVQYSqmiqViq3AVoSJV6AxcZ+A6A9cZuM7AdQauM3CdgesMXGfgOgNEzME2RMS0MBVTxVKxVbiKUJEqjojUGSBisFZImMtTGPkC3sIujA92cAof8r2uAA9hE57CS3gLu7D4HvqikTNxCxydnIkgwwuA89x/5ipCRYrA5QTuLKOTM3FjGG/2fcJVhIpUcUTgEqTelWPo8XzCVEwVS8VW4SpCBWbgEEcEIqbFUFFNcLhpjR7PJ6oNDrem0eP5hKsIFaniiKiIeWKoMBVThc6gnszgBnY1jD4O4e+DB7eyq2G0uW6FNH8fPLhFXg2jj6fwEt7CLhzCKXzIdSukWXxdfB1ndkLg/N3/BecPhxY/FUOFqcBo2HeB0bA54ojIn4qhwlRMFWiLxObIrcJVhIpUcUSgGbTFUIEZYLXQD9piqdgqMIMBESowg9pD3f25IEwF+j83xFKxVcDHIUJFqjgixk/FUGEqpoqlYqvQGQydwdAZDJ2B6QxMZ2A6A9MZmM7AdAamMzCdgekMTGcwMYOAGCpMxVSxVGwVn+mqXXluriTEUGEqpgqMfEVwj+Ntv09IxaDZ9IwrhgpTUT7VTG942+8bYKtwFTqDrTPYOgP/qRgqTMVUoTNwNUW44Bb4Qbi0GCrQmz0hpoqlYqsoH9z1xtt+n0gVRwQCCffD8bbfg/vb6Ed9YquAD/YEYqdFqjgibg/6FUOFqcAMsEMQOy22ClcRKlLFeWKiu/UJtLj/IGqAukc90Zz6xBGBPGkxVJgKdNIbxFKxVbiKUJEqjgjkSQvMYEKYiqliqdgqXEW8BZ5oaH3iiECetMDKYToIintGcaHSIlSkChzcKrH0JCI2WiwV8NkQriJUwAcTXbqMW5dx6zJuncHWGWydAQKlhavQjbR1I22dgaspvgHV5e+f2CpcRajA0BD3ew729f2ec8VUgUO4YqtwFTiEA5E6wBFxv+dcoTNInUHqDHKp2CpcRajQGRw1RVIsbCQkRYutog5uYY8iKVqkikOBDtVTt70n3sH7hKmYKjCDBQGfDZEqjggESt2Sn3jT7hOmYqpYKrYKV4EZBESqOCIQKC2GClMxVSwVGLq2C9pUT/W0T7wo94mpYqnYKlxFHUI9SJhoYH3iiMB1SIuhwlRMFUsFZoClR6C0CBWp4ohAoLQYssAIlBZTxVKBlcN0kBT3jOLSo8VQYSpwcNiJrifRQ0WqwCFgw+I6pMVQgZOIiYYuY+gyhi5j6AxCZxA6A1yHXIHrkBa6kVI3UuoMUk2RFIlZ5xGB2GgxVGBolMzh7cSJltYnQgUOAdsfsQGB9+I+gUNICN7QnHgv7hNLxVbhKkJFqjgi8JimxVChMxhqiqSo3yiY6G994ohAUtRDn4n+1idMxVRRO6SeAE30tz7hKkJFzaB+O2Cii/XUs6GJLtYnpgr44HgQKC1cRahIFUcEAqUFZuAQpmKqWCq2ClcRKlIEksKxXXCB4TjxCIcWoSJVHBGIjRZ1CPW06E+YiqliqdgqXEWoSBU1g8DSI1BaDBWmYqpYKrYsMAKlRahIEcgQx3SQFPeM4rtMi63CVeDgsBOPnkR8Y2lhKnAI2LC4DmmxVeAkYqJHl/HoMh5ZRvS1PjFUmIqpYqnYKlxFqFBTJAXW9Dastlgqtgoc3IbgY8d521JbDBXYBw4xVSwVOIkB4TpAqEgVOoOpM5g6g2kqpoqlYqvQGUw1RVLUQ7+JrtMnpoo6uMR5Q1K0cBWhonZIXp8jApceLYaKmkE9XZvoLT31zGnivbRPhAr4LIgjAoHSYqgwFVPFUoEZYIcgUFqEilRxRCBQWgwVpgJDY7vgAiNx4hEOLYYKUzFVLBU4BFQJYqNFqEgVRwQCpcVQYSpqBgdLj0BpsVW4ilCRKg4XGC2oTwwVpgIFeCCCZxT9qE8cEfgu06KGrqdgE12n9ySi6/QJV4FDMIhUcUTcPyGLiZosI7pOn5gqdAamMzCdAa5DWqQK2UjoVH1CZzDV9LaZLYhQkSqOCFx6nCvQfLUhloqtAvvgilCRKnASK1SXNKDNJQ1oc90GtCt0BltnsHUG21WEilRxRLjOwNUUSYEbHQtJ0SJU4OCwR5EUVyApWgwV9fSnnrLN6l+lWCq2inry9MNWrkay3w87sTrJnhgq4IM9mlPFUrFVuIpQkSowA+yQ81MxVJiKqWKp2CqcolpWv1/hh8AAAbFUbBWuIlSkChxCVUk1plIMFaZiqlgqtgpXgRkciFRxRNhPxVBhKiYXGD2qT2wVrgJ7FNOZQ87oNBVTxVJRQ9fjuVndqe8kziNi/VSUTz2Em/UiV4qponwGJrp0GZcu49JlXDqDpTPYOgM86G1hKnQjbd1IW2ew1RRJgbvUt1W1hamYKnBwV7BNfN6G1BZHRDWk/sYVQ4WpwEncEEsH2Cpchc4gdAahM8A91RZDhamYKnQGqaZIioGNhKRoMVTg4LBHkRQtloqtonbIQGFU/9kTqeJQOAKlns9NR6DUk67pCJQWW0X54PmCI1BapIojAoHSYqgwFZjBhFgqtgpXESpSxRGBQGmBoTcEBnCIVHFEzJ+KocJU4BACYqnYKlxFqEgVRwQCpQVmkBCmYqpYKrYKVxGywAiUFkcEAqUF9iimg6S4ZxR9IS1CRarA0NiJrifRp4qlonzwoKr6XSlCRfngWU71u74BQpcxdBlDZxA6g9AZ4DqkhavQjRS6kUJnkGqKSw88O3RceiAtHZceLUJFqjgiECgthgr8uhYW6/463RVLxVbhKkJFqjgUeOkpfntsonn1h+RD9+oTW4WrwJFuiFRxRCBQWgwVpmKq4K8uztv02sJVhIpUcUTYT8VQYSq2nBDTI0XutEgVR8TUI516pFOPdOqRIndabBWuQo906pFOPdKlR7r0SJceKb4ZtdBzvfRc31/QwwlZeqRIlxZDhanQI916pFuPdOuRbt1VW3fV1l3leqSuR+p6pK5H6nqkrkfquqtcz7XruY4hJyT0SEPrJ7R+Qusn9EhDjzT0SEOPNHVXpe6q1F2VeqSpR5p6pKlHmnqkqUeauquOnuuj5xovNsI3ZHTBPuEqQgWOtEIVnbB4+8KfMBVTBc5oQGwVrgJnNCFSBzgi8LKTFjqDoTMYOoP7rvgrtgpXESp0Bqam+DKEJoHEJU6LraIODs81EyHUIlUcEQghPIhPhFALUzFV1AzwID5xiYMbKolLnBZHBC5xcM8hcYnTwlRMFUvFVuEqMAOcKlzitDgiEEIthgpTMVUsFRga2wVdrngefNtcW0wVS8VW4SrQY/uDSBVHBC5xWgwVpmKqWCrQ44ulR7q0CBWp4ohAurQYssBIlxZTxVKBw8Z0cIlzzygucVoMFaYCB4edePQk4ptRi1SBQ6gNe/DNqMVQgZO4IGQZz2+p2CpcRahIFUcELnFaDBWmQmcw1PS+Fskgjoj7WqQrhgoc3IaoRMLt5/tS1RahAvvAIY4IxEYLnMSAMBngvvzoiqVCZzB1BlNncF9+dMURgReptRgqdAZLTZEUaBI4SIoWRwSSAs81D5KihamYKmqH4EE8Xrj6hKsIFTUDPIg/CBQ8iD8IlBZTBXywRxEoLVxFqEgVRwQCpQVmgB2CQGkxVSwVW4WrCBUpAknh2C74ZoTnwQfh0CJUpIojArHRAoeAKkFstJgqloqtwlWEilSB37n4ln79ECgthgpTMVUsFfst8PohUFqEihSBDKlmkfVDUtQZXT/cXWmxVbiKGroepq6f8SSuH27KtjAVOASDWCq2ivIJTNRCB0gVR8TUGUydwdQZ4DqkxVKxVbgKncFUUySF4yTilYstloqtAge3ICqR7jLixYothgrsgw0xVSwVOIkO4TpAqEgVOgPXGbjO4L6m8YqpYqnYKnQGrqZIisBGQlK0mCpwcDhvSIoWriJU1A7J63NE4NKjxVBRM0hsZQRKYiciUFqECvhgjyJQrkCgtBgqTMVUsVRgBtghCJQWoSJVHIqBQGkxVJgKDO0QGKBOPN68+sRQYSqmiqUCh5AQriJUpIojAoHSYqgwFZjBgVgqtgpXESpSxeECDwRKi6HCVGCPYjpIintG8V2mxRGB7zItauh6+r/G0pOIbywtXEX51PP6NXAd0uKIwHXIwUS3LuPWZdy6jFtnsHUGW2eA65AWqUI3kutGcp2Bq+l9OTROyH059BWp4ojApUc1FqxxXwGN0e4roK/YKuoQDrY/YqNFqsBJrFAd9xXQGOC+AvoKU6EzSJ1B6gzwWsYWoSJVHBFHZ3DUFElxcEKQFC1CBQ4OexRJAWFIihZDRe2QehC/DJceLZaKreKbwagH8asaXb/3RZeoQHliqLASBjFVLBVbhasIFakCM6gdUv2wFEOFqZgqloqtwkVMDL0hMIBDLBVbhasIFakCh1Crjde1PjFUmIqpYqnYKlwFZoClX6niiNg/FUOFqZiywPhDEi22CleBPYrp+JAz6qZiqlgqMDR2outJ9CMifirKZ2DD1nXIE1NF+QxMNHQZQ5cxdBlDZxA6g9QZ5FBhKnQjpW6k1Bmkmt4/L4Ftef+8xBWmYqrAwaFk5A9PLJM/PLFM/vDEqkbX793rEEOFqcBJvD+zdICtwlWEilShM7h/eOKKocJUTBU6g6GmSIpqElgTSdFiqMDBBcRUsVRsFbVD6kH8qhZYilRxRCBQ6kH8mgiUehC/JgKlxVZRPvUAduENrE+kiiMCgdJiqDAVmIFBLBVbhasIFaniiECgtMDQWBL8bRnDid+p4ojwn4qhwlTgEBxiqdgqXEWoSBVHBAKlBWaApUegtJgqloqtwlWELDACpcURgUBpgT2K6SAp7hlNVxEqUgWGxk48ehLPVLFUwAcb9riKUFE+ExM9sozr91MxVJiKqWKp2CpcRahIFTqDoaa49KgmgbVw6VEP4tfCpUeLUJEqjggESouhorKqniatdf+E1RVLxVbhKkJFqjgiJjYFeAovYRzmgnAVoSJVHBFIkxZDhamYKpYKncHSGSydwdIZLJ3B1hlsncHWGWydwdYZ4I9j3nXHDZQWoSJVYAbYOLhNclf3/hWsK5YKHKlDuIpQgSPFGuLLzx0A76RvMVToDEJnEDoDfC1q4SpCRarQGaSa4vKkHoQutMk+4Srq4OrZzUKb7BNHRN1AeaKWceFcI45aTBVLRc1gYW4IHVzsLIQOBHpmn4DPgjAVU8VSsVW4ilCBGWyIIwJfi1oMFaZiqlgqtgoMXdsFzbCjnnktNMM+sVRsFa4iVOAQDsQRgWuVFkOFqZgqloqtomZQDxvXRu60SBVHBHKnxVBhssDInRZLxVaBAsR0ECj3jCJQWpiKqaKGriecC52xfRJxFdPiiMBVTD2TXBtXMS1MRflsTNR1GV2X0XUZXWfgOgPXGeAqpsVQoRspdCOFziDUFJcnG9sflycbexTfd1qYiqliqdgqXEVllV2RKo4IfC1qMVSYiqliqSgfXJ1vfC1qcSgcfymrBY7UIWo0XNHj7a5PuArs+IBIFUcEYmPD5/5hXQyALz8tpgqdwdAZDJ2B/DHe5fLHeJfLH+NdLn+Md7npDExNESj7ilCRKurg6qHmQjftE0OFqajtUs8+F7ppn9gqXEXNAA/A0DM76tHlQs/sE6YCPhtiqdgqXEWoSBVHBNLFsUOQLi1MxVSxVGwVriJEIFDwyAo9swPPotAz+4SrCBWp4ohAbOCpDnpmnzAVU8VSsVW4ilBRM8DDRvTMtkC6tBgqTMVUsWSBkS4tXEWowGFjOrgOuWcU1yEtloqtAgeHnXjkJOJtr08MFTiECTFVLBU4iQvCdYBQkSp0BkNnMHQGuA5pMVUsFVuFzmCoKb784Gll4AqlxVSxVODgHMJVhIpU8WWVI4jx1tgnhgpTMVUsFVuFq8BOrFQOBEqLocJU4EgxAAKlxVbhKr5UXveEVJvsE0dEPUB+YqgwFVPFUoEzisXC5UqLIwKXKy2GClNRx4NnrIEMwTPWQIbgCVogQ1oMFTUanoqi5fWJOm94jomW1ydcRR1P4uCQIS2OCGRIi6HCVEwVmAH2GzKkhasIFaniiKgrlIWPw0Cg3POGQGmhZxSBgidogfssLVLFoUhETQscaUKYiqliqagZ4GklmmGfCBU1Azx5TETNFYiaFjUDPMNLRE2LqQIzOBCYwYLADDYEZuAQqeKIQO7gSQM6Y59YKrYK+OAc4HIFWxn9r08MFaZiqahyxkU93gT7xBGxsClwDqpD7QlTMVUsFVuFqwgVKQLXIXigh8bWJ6aKpeI7VYbnfnj16xOhIlXUkeL7Qr3+lWKoMBVTxVKxVbiKEFG3TRZuWuDdsE9YzQ3rg78i3mKp2CpwpHeAUJEqjgj8MfEWQ0Ud6cQq1NPkJ5aKrcJVhIpUcUQgaloMFTjSK7YKVxEqcKSoxnMo0Cb7xFCBI/1BTBVLxVbhKkJFqjgiBtZ0Q0wVS8VW4SpCxZ8P8qg6Zi9+X4QaB9GIk/jnitz6v7193a40uXHku+haF0UmmUn6VRaGMZbHCwEDyRhLCywMvftWF7vIOH1U0dlFnt2LdYekL04Uf5JkZjJ55M+eP3X8tPGzjJ+1/5T2RdpA020NKAJDcLRPfP6bCqDZlxMEBBGBIEgIMgJFYAhQQUIFGRVkVJBRQUYFGRVkVPC0L6WBCkA3BAFBa9HagCBICDICRWAICoIK4NjkxBZPbomyHUQEguBQ0NzzLVG2A0VgCAp0/dPyNPC0PE8QEEQEgiAhwPFWcLwdW5nYQsgtn7aDgKB9aZsMtX1pG9fN8pwgI1AE7UvbfGyW5wS1g9zyaTtoCqyBpqA2IAgSgoxAERiCgqACCBuCgAAVPGzSsSXIR9Lt+TOPn/vfPvbC+Ui3PX+W8XP/q8d2MB8puOfPMH7G8VPGzzR+5vFTx08bP8v4Of6ajL92eGJifIKjtWJT1+zQcXcrH4VkB6gAjoNTB42tdV5qbNqAISgIKoC8IQgIjraPbShkQZAQZASKwBAUBBVAszZHODVvzdqcICIQBE1BaSAjOBRIa95mbaQ1b7M2J6gAmrU5QUAQEQiChCAjUASo4GFtSpP5sDXPnw9Lc/58jMQ22B9W5vwp4+djJLZme9iX86eOnzZ+lvGz9p8Pe3P+DONnHD9l/Bx/rY6/1izJsQnKLV02HuG83NJl4xGNy6HZixMkBBlBYzu+v+XOtkfkc8ud7UAQJAQZgSI42v4IjOWWO9tBBXDEmzsICCICQZAQNAXWgCIwBAVBU3DYrZY720FTkBqICARBQpARKAJDUBA0BU1OsyknCAgiAkGQEGQEiuCxS2sN9bBC58/afz4s0PkzjJ9x/GzcbYg0O5JaDzc78gTtVNQMRCsm20FEIAgSgoxAERiCAqBZi9yENmuRWz82a3GChCAjUASGoCA4vvQ46ebQ9iYnCAgigqagTdS2NzlBRqAIDEFBUAG0XUtubdB2LbnZgLZrOYEgSAgyAkVg0KcVe7tCb7dU3A4CgohAECQEGQFYoZaKe4K2NzlBQNC+VBsAKxTRCrWE2w5ai1oDFUCzQidoLdr+TgQ72BJuO0gIUEFEBREVPK3QE1QAzQqdICBABYJ/tJmX/AQFQQXQzMsRisotFbeDiEAQHH/nCEXllorbgSIwBIeCI2KVW8JtPOIRuSXcdiAI2t/JDWQEisAQFAQVQNvMnKApaCOkbWZOIAgSgoxAERiCAqDZHW3DpVkXbQ3frMsJDEFBUAE063KC4xOOsFJuCbcdCIKEICNQBIagIDgUWOv6Zl1OEBBEBIIgIcjQwc26nMAQlAFakm48Ila5peI+W1Sa2ThBRqAI2scdI1ECNKI0s3GCiKB9gjSQEGQErRGb0GBIUBBAN7a83A5QQUQFzaCcICHICBQBKoj4R5ulaMcREUGQEGQE7eOeAM4mkjYEAUEbB08gCBKC1ojWgCKBISgIUAGejgRPR/I8HT2BIEgIMgJUkPGPNkthbSA1S3ECQXBQt4NkS8XtQBEYguPvtBNyS8U9QTv2nCAgOBS0Q3NLuI2ljcRmUE5gCNrfaWO0GZQnaAblBAFBRCAIEoKmoI2QZlBOYAgKggqgGZQTBAQRQaNuw6XtNtrBrCXcdhAQRASCICFon1AbUASGoCCoAJpBOUFAEBEcCtrGueXldpARKAJDUBDU0cEtL7eDgCAiaBOwyWmWorVoaluPE1QAbetxgoP6uJOXW8rt2YjNbJxAEbRPiA0UBBVAMyi1CU3YjQm7MWE3JlSQUEFCBc2gnKAgwIGUcSBlVJDxjzZLcbixc2pbjyNql1MzGyeoANrW4wSCoLFpA4agsbWGbyagNgVtotfWjW2in6AgeCiQrQ2XY6J3EBBE+DvHRO//TUKQESiC4wS2tT/aojUnqABatOYE2AZtf/D87LY/OAG2Tm1sxwhpGa9yhK9yy3iVI/qUW8ZrB4IgIcgIFIEhKAd4/tEKIGwImoLUQFOQG2gKtIGmwBo4zrTnv1EEBuBIUBN7gvZ3SgPt79QGBEFCkBEoAkNQEBxfenjvc0uM7SAgOBSE1gvHnkJCa7fDOEhorXMYBwntE460E2l7iiMxdoAC4IjiSDsvHOmvAwiC9nda86aM4PjS0JrqMAEdFATtS9tn5w1BQHB8aWxfetiDDhKCjEARHAqaa6Llz3ZQARyWooOAICIQBAlB+zutEY8osbRddMt4lbaraRmvHWQETXUbo2YImurWbs26PEGzLidoqlu7lYhAECQEGYEiMASHguZBbmVmT3BsIzoICCICQZCgdY7Th0jrrFoQ1AFaMdkO2t+JDUQEgiAheMx6aYfvljLbgSEoCCqA475gBwFBRHC0aHMFt2KyHRiCgqB96dEgrZhsBwFBRHDMxuYBPGrODpARKAJDUBBUAEe6WwetRXMDCUFG0L5UGzAEBUH70mNct/zZDtqXtj+aIgJB0BS0tm525wSKwBAUBBVAszsnOBQ0B3bLn+1AECQEGYEiONr62VmHH/Y5mY5k2nC22+GH7UAQJAQZgSIwBEefNrNxpNl20CzSCQKCpqCpNkGQEGQEisAQFAQVwFEFoYPj7zQb35Jppfn6WzJtB4rAEBQEFUCzSCdofdpMQLNIJxAECcHxpS0a2erUdmAICoI6wJGNO0BAEBEIgval0oAhKAjalx6jquXcdhAQtC/NDQiC9qXaQEagCJoCa6AgqACarTpBQBARCIKmoDSQESgCQ1AQVADNVrU1uCXgPkdVq1P7HAetTm0HisAQFAQwqlpqbgcwqlpqbgeCICGAUXWk5g5gCAoCHFUZR1XGUZVxVGUcVc8p0xrkOWWeoAJoU6ZFbKxNmRMcH9eCJy2rVJp3v2WVdpARKAJDUBDUAVpWaQcBQUQgCJoCayAjUARNQWmgIKgA2mRqi3jLKu0gIhAECUFGoAgMQUFQAURU0CZTc722fNMOBMGhoIUHWr5pB4rgUNAiAq0SawcVQDtwtB1+y0TtICJoClIDCUFG0NogN2AICoIKoE2zEwQEEYEgSAgyAlSQUEFCBQkVZFSQUUFGBRkVZFSQUUFGBRkVZFSQUUE7irQ4Rivy2kFEIAgSgoxAERiCgqACMFRgqMBQgaECQwWGCgwVGCowVGCooKCCggoKKiiooKCCggoKKiiooKCCggoqKqiooKKCigoqKqiooKKCigoqKqigoKW/dhAQRASCICHICBSBISgIUEFABQEVBFQQUEFABQEVBFQQUEFABQEVRFQQUUFEBREVRFQQUUFEBREVRFQQUYGgAkEFggoEFQgqEFQgqEBQgaACQQUJFSRUkFBBQgUJFTSb2EJytdnEExiCgqACaDbxBAFBRCAIEgJUkFFBRgUZFWRUoKhAUYGiAkUFigoUFSgqUFSgqEBRgaECQwWGCgwVGCowVGCowFCBoQJDBQUVFFRQUEFBBQUVFFRQUEFBBQUVFFRQUUFFBRUVVFRQUUFFBRUVVFRQUUEdCnTbNgQBQUQgCBKCjEARGIKCABUEVBBQQUAFARUEVBBQQUAFARUEVBBQQUQFERVEVBBRQUQFERVEVBBRQUQFERUIKhBUIKhAUIGgAkEFggoEFQgqEFSQUEFCBQkVJFSQUEFCBQkVJFSQUEFCBRkVZFSQUUFGBRkVZFSQUUFGBRkVZFSgqEBRgaICRQWKChQVKCpQVKCoQFHB0yZaAwFBRCAIEoKMoCmoDRiCguBQcGS1aKvI20FAkODfNPt25KFoq7vbQQXQ7NsJAoKIQBAkBBmBIkAFFRVUUNDq7nYQEEQEgiAhyAgUgSEoCFBBQAUBFQRUEFBBQAUBFQRUEFBBQAUBFURUEFFBRAURFURUEFFBRAURFURUEFGBoAJBBYIKBBUIKhBUIKhAUIGgAkEFCRUkVJBQQUIFCRUkVJBQQUIFCRUkVJBRQUYFGRVkVJBRQUYFGRVkVJBRQUYFigoUFSgqUFSgqEBRgaICRQWKChQVGCowVGCowFCBoQJDBYYKDBUYKjBUUFBBQQUFFRRUUFBBQQUFFaBNDGgTA9rEgDYxoE0MaBMD2sSANjGgTQxoEwPaxIA2MaBNjGgTI9rEiDYxok2MaBMj2sSINjGiTYxoEyPaxIg2MaJNjGgTI9rEiDYxok2MaBMj2sSINjGiTYxoEyPaxIg2MaJNjGgTI9rEiDYxok2MaBMj2sSINjGiTYxoEyPaxIg2MT5tojSgCAxBQVABPC3fEzS21EBj0wYMQUHQ2I4tQXzatycICCICQZAQZASKwBAUBKhAUYGiAkUFigoUFSgqUFSgqEBRgaICQwWGCgwVGCowVGCowFCBoQJDBYYKCiooqKCggoIKCiooqKCggoIKCiooqKCigooKKiqoqKCigooKKiqoqKCiggoKZNsQBAQRgSBICDICRWAICgJUEFBBQAUBFQRUEFBBQAUBFQRUEFBBQAURFURUEFFBRAURFURUEFFBRAURFURUIKhAUIGgAkEFggoEFQgqEFQgqEBQQUIFCRUkVJBQQUIFCRUkVJBQQUIFaBMFbaKgTRS0iYI2UdAmCtpEQZsoaBMFbaKgTRS0iYI2UdAmCtpEQZsoaBMFbaKgTRS0iYI2UdAmCtpEQZsoaBPlaRNLAxmBIjAEBUEF0GzikXauLTe8g4hAECQEGYEiMAQFQQVQUUFFBRUVVFRQUUFFBRUVVFRQUUEFBS25vIOAICIQBAlBU7A1oAgMQUFQATSbeIL2d2IDjU0aMAQFQQXwtG/WQEAQEQiChCAjaApyA4agAGhW7KgPpS1rXEojaLbqBIrAEDS20kAF0GzVCQKCiEAQNAW1gYxAERwKamv4ZqtOUAE0W1VbbzdbdYKIQBAkBBlB+zutg5vdqa0Rm905gSBICDICRWAICoIKoNmdE6ACQwWGCgwVGCowVGCowFCBoYKCCgoqKKigoIKCCgoqKKigoIKCCgoqqKigooKKCioqqKigooKKCioqqKiggoJnevsJAoKIQBAkBBmBIjAEBQEqCKggoIKACgIqCKggoIKACgIqCKggoIKICiIqiKggooKICiIqaLbquLahz8T3ExQEFUDbi50gIIgImgJtICFoCqwBRWAAmhU7QWMrDSQEja02UAAcdicd9zG0paqn42qEtoT0DvQAsQFDUBBUAMdOqN260JaQ3kFEIAgSgoxAERiCgqACMFRgqMBQgTUFrUssIVAE2G5Pu9PA0+48Qfs7beyUhCAjUASGoH1P69NSAdQNQfs7rYNrRCAIEoKmoAmtiqAM8MxOb6PqmZ1+AkFwUB93OPTITh9AERwfd9zu0FbQuYMK4DAbHQQEEYEgSAgyAkWACgIqCE3BMQ5a3noHYcyfZ976CQRBQpARKAJDUBBUAE+z8QSoQFCBoAJBBYIKBBUIKhBUIKggoYKEChIqQFOjaGqeGe0nQAUJFTw3P60XnpufJ4gIWm+nBlpvawMZgSIwBAVBBdCMUGhDuRmhEyQE+HcU/47i31H8O4p/pxmhEwQEEYEgwC81VGCowFCBoQJDBQUVFFRQUEFpClr/NMN1goxAERiCgqACaIbrBAFBRIAKKiqoqKCigooKKiqooKDVl+4gjlHVSkp3kBAcf/RIRNaW3t6BITj+6HFZS1t6+wmaSTtBQBARCIJDwVEITFt6eweKwBAUBBVAM2knCAgiAkGACiIqiKggooKICiIqEFQgqECagtbWIggSgoxAERiCgqACSBuCgAAVJFSQUEFCBQkVJFSQUEFCBRkVZFSQUUFGBRkVZFSQUUFGBRkVZFTQ9mLHPT1t1ao7iAiaAmsgIcgIFIEhKAgqgGYGTxAQRASowFCBoQJDBYYKDBUYKiiooKCCggqasYvNUjRjdwJD0KxL+zdP+/YEYNLavYJ03JvSdq+gA0NQBmi3B1oBV33eHmjujOftgRMkBBmBIigAmhE6LiFquxbQgSBICA6hxyVEbcn/HVQAzdScICCICARBQpARKAJUEFFBRAWCCgQVCCoQVCCoQFCBoAJBBYIKBBUkVNBMzXF/TlvyfwdNQW4gIcgImgJtwBAUBBVAMzUnCAgiAkGQEGQEqCCjgowKMipQVKCoQFGBogJFBYoKFBUoKlBUoKjAUIGhAkMFhgoMFRgqMFRgqMBQgaGCggoKKiiooKCCggoKKiiooKCCggoKKqiooKKCigoqKmg7rucYbYbrBIrAEBQEdYCW/J+Ou7FanybtCZqC0oAgSAiagtqAIjAEBUEF0LZfJwgIDgXHPVdtyf8dJAQZgSIwBOAnf2b12xMIgoQgI1AEjfqwvS13v4OAICJon9AImkk7QUbQPqH1TzNpJygIKoBm0k4QEEQEgiAhyAhQQUIFCRUkVJBRQUYFGRVkVJBRQUYFGRVkVJBRQUYFzaQd90/1mbtvz/8mIhAECUFGoAgMQUFQATxjek+ACgwVGCowVGCowFCBoQJDBYYKCiooqKCggoIKCiooqKCggoIKCiooqKCigooKKiqoqKCigooKKiqoqKCigjoU2DN3/wQBQUQgCBKCjEARGIKCABUEVBBQQUAFARUEVBBQQUAFARUE/KPPpPzagCBICNo0swYUQZtmz/9ZQVABNGN33Nu1lpTfQUQgCBKCjOBQcFRatZaU30FBMJKx7ZmUf4KAICIQBAlB+zvxAM1wHcVVrSXYp+OCpLUE+w4EQUKQESiC9nda/zTDddwptpZgf4JmuE4QEDQFrX/aXuwECUFTUBpQBIYAFSgqMFRgqMBQgaECQwWGCgwVGCpoe7Hz31QAbS92goAAFRRUUFBBQQUFFRRU0PZi2gZf24s9QduLnQDboO3FTiAIEoKM4FCgbYi1vdgJmoI23tperIGWlN/BoeC44mwtKb8DQZAQZASKwBAUBBVA24udABUEVBBQQUAFARUEVBBQQUAFARVEVBBRQUQFERVEVBBRQUQFERVEVBBRgaACQQWCCgQVCCoQVCCoQFCBoAJBBQkVJFSQUEFCBQkVJFSQUEFCBQkVtM1cG6MtKb+DgCAiEAQJQVMQGijD3IYMsz7ohiAgiAgEQUKQEcCsD2j5wtPyPUEFYGD9w9PyPUFEIAgSgoxAERiCpkD+8Y8//uG3v/7pl7/9+a9/+be//f7rr3/4l//p/8F//+Ff/tf//OG/fvn917/87Q//8pe///bbH//wf3757e/H/+i//+uXvxz/92+//L7/t7ud+vUv/7H/353wP//826+PX//44/jX2/U/DQ89z3++/y6DYjcaX0jCNUl5xH4Oiv0oMwgsfSGIRMX2iDw2EfuidUnBPmRfnkrn2D1/lx+SrkmOE8NBkUCFhS//Pl//+6MMxfHv93DYEJDN/RV76PqUsM/wLV1+hV2TxFRPjpg3bIjipRB9uPzbl+zRtUERvrZFJZ9iZ3fETTqBvBAE0hhlO1tz99ldM5CBWR+JaG1g1psMvUf3JTleUrCmLHJOsN2nGy6bMpBx2d4SaI0pMlpzX1++crCxKbmPzTwY1PwfYuND6nb9IYTjUejtyfGo0tY59KvBerjir6fII22jdUnO8ZKCDE0z7QMLxnbOboaSzs/YHaaXDJEMrLh1oxkfc/vkSPErBbGaRc8Ztnv4rkUIEWF2tmW0Mrpjn/73+sOu+4ONCttO8/8oN3ZF8Qh5Xdu8It3mpXBJYdN9Wub7tM72qdCFUDXDYjpkiCT/p4RuteK+67v6FCHD86hi3szFdknAjUXVPiyCXPWppGnzzSjS8Whk2xTsjo9LsyfK5ojGPkegMfYB85WDtUY5O0S3DAzlg5FR6hgZFXr1dWQIGaG73/ccorujdyiR/PVb0sbsztYnikWwGR/0Su5btQS7g9deSWzXWdI5vsIeYACOlw2jUOu3Qdd+Wd+/9kxK8+Mj5dnxQb8lH0/8PWVEi9ffwnafx2vxT8tRRs/E154p0+OjrrCCvEVylt4iupXLFslsqdd8jrO4q4IW+fo9mYxV2XTr1lSxVb9+TWZfU6yfsvZI5jUHGaklnqOswCr7jYGN037Uy5FoYNb0eDutfUdUGKXlg+HhNYW5zJvCXGeHOu3WOmZtJZ2igTVprqNJr4eXxtmOVZnuWNYYMfdDStSQr2XkBY2h041h843BjEboLhF5bCEvZVR2bBynPqlkwjIdsTs1JJZrHUZG6OPF4LNFt+26U7g5N+uz/lGR8NKcG2F51Ns4V9pYr5cEY9uXrR9B0x45uMdhw1tVYJB94yDD1LSbQTOBDXL8usc2MlDteIm9cSRwIH7jIJZUun8jhbFUx/jyJcyOhnrOuMfz1ZcchWxLczznfZbtHkPtmzA0PvGDXi39yPJ40fyyV4vM92pJ871a8myvFl3Qqzbdq/aTvfp4ubdbr6r37M7xzEyTIaVectTAjtQxDP/bTQ5L0o/lKd3ksMFh1xzUmj+K15zW/FGI41rJzx6b9tNF31c/8tWvdbDlPpRx1Nh36tvFTrBOH5vot5h0l/m+zOXr1S1s2482qlXtQsq2bUQI80HJiEKg2zuGFzfUJrPNynWkcB7fHkmIlzqou8LGhrB+mXevQphBzTJiQ1oIibE1KvbdS/niJjA/ST5SO5sJSFUISZ13nIQwPVrfNOsYZ/v+8GbfaBwkrG+CTIfdWLTJG3fL04E33ho9NiFbDKQ1mFU9bi8+w6kJm/Ql1sMiHCIjGCoYWP6EJG29SdJ+9rgmiduC4c4iTwuGu2wjprmVm6ZIxp5IQpJrkpimh3vM08OdRZ8WDPf9gN5zB4RZEB6AGt6PR2x4kMgLCYuOav+a/bhc7pGUsdEsmsM1iYQFw52FoZzDnVqR1IMNj3SZ67nLIhbtUcQzQqmEhLmmLHd7tncOkLzsZ1g0yrufYaNVZJhEk5sGQEof8ns855pE5tNM0nyeSQo/awCOSz2tNXa/0nVr0G1zHFGP3YwASfqApKZuRTbMCPtGwkbq4/GN4WuDD3r1IITEfP21O9vitqGbXv2zZj8n9gDM7ka4njUsJnXcWB7HPIjjvPYP81LlbWy/c7pWkjcat9z6QcDKdcOyoJTXRxSYY9frJArMZe/zEgUWlfK6iQINTLn8RJzC5SjiS3juuTBRhSycLDC1z+Bu4TdYsF5zclhgSnouS9quM1GCkoGquRsSVTjCv8bYAg1NbTXGEaoDR/drmI0atfb4+PMEHohlpAEq74ZE0/SGhJqRMgIq2xfX/4sZYSEqPWoMNSEJ8uCqfcBh/SCg6Mf7xsGOV2nrC1/GfLzXFlG6ae1WZN+/hmtLZMwRkHvqwuNp40HywS5Pe9bTvs0iuzyLdO2UNNZO2IO/LDVGvVYCYyQSJTTNpscxU8SU5tfEU8vz1ogFqpzWiMWp3NaIBao+sUbMuIa+hO8jlOxIWLBpd+D1zQQd82XFPqCs2AeU+X1AWbEPKPP7gDK/D+AGzdsvZUW/1Ol+qduCfqExI1+/UApfv9B9ROpBp5grORxVtgVIPY0qZ2iPb2a1LjCrdd6s1hVmtf5/MKtxuCW+LFcvZjVudLDGkcAIuRmvkyZuC8xq3BaY1bhNm9W4LTCrcZs2q5zCaVZZwktK5/S1DJPmZcMaNx4P6G4r8Fq9DrHKwt/dlfB473pwpBcZLGwlWxoBEogXv5Lw9gh17JtDvWyPQAOTPbgZvgTz88swZXGr3LPsM8RHv1Ok+YNEZJEr70EiBp09SLzR4TQgYcH6H8P0+h/jgvU/xun1n1O4DAgdp6U78Ar6vV/HKYtZefftMa4YH1EXjA92b8o7PsqK8VHnx0edHx/MGGqXsR8kw/UIEZrtPyzZVhmJLBhmzJ/hHmbM/+4eZixq5RxmYguGmZTpYUYpFuxjVGvvl3i9brOgVdLuZUoK90G+rZc0Kyn1sObuHR1fU1/WOnqmknFhHX2zsb7cvUw0vlr6XdaEocD0qoSM1EfVrLNrarm+FcKXiH4V9VHX4Hry8ltUzkMIC1m5Jy87U7knLwtZOScvvUXlnbwsYOWcvJTCt0ZQ8x7qOKYmux4hOS8YIXlB/n/MtmKElPkRsuAKQNTpOwCcwjdCuDHrV1P3ARKvjZnKgqMMjVb5jjK64DpC1BVbVZ3fquqKrarOb1V1fqvKXZnDgaiwYn5bdlmsyt25LFbl7lwWq3J2ruUFnctCVc7OpRQLOnds7vZxZKRz2SDbeg5P3nCh0g92mTWeW6pUjXhlWJSq9JFasl1bQxajyj10n3G1lNfyHiuGaZkfpmXFMC3zw7QsGKbMI7P1/K5dxkZGx4JYWWQxKnfnsgCTs3NrXNC5VaY7l1L4Dqm0fkuve5BVL2vysIsmGnp7Gtqfl8TKyAJUj9sD5247CJLIByRx6xnvUSIhobdVXKWrhEWnfLWrKIWv0JHQ+0y+SkfCAlPeUkdsm+ysX+XvlesCVnx4hH43SyJJdxd2I8qXhywsNOXLQ+YUvpJJvDly904Jy/4XVnrPrPtR9p/pMkjOSUo8P2fnqIRE5uctC0455y29l+Wbtyww5Z23zKw7520o8/PW3ytGeoUNj9pjuVZhZ/lteNBSfr7ac0Jr+fn6lhbzc/YtC005+5YFpvyVl97QuIuVseCUt0SPxPlyVNwOaTdmpd40ZiXUYUTsOhtT6KWqnMYVIjj1v1YC5Qa+9o2uVLveU4ksMKsyb1Zl3qzKArMq82ZVVphVmTerb4ZHz4JO25cs6JfhkcL88GDRKefwSPOWmXpzncODRaacwyPpguHh7pXbw2Mck7et3DuRpeGbSlsiY4zFpZz1iCUvGKd5fpzm+XGaF4zTPD9O84pxmufH6ZvRMe3AqH37sTtQr2tmC71GFfvNUE1Cln12jaoG2E1tl6s+u3Y4rusGDLC/BC2FhYI09ZmvGU6XwV5qN7KQVBjlNPGAml5bY0FGiuh0RorogowU0emMFE7hcvbxT4kj/0KgX76RGN2c9mDBvk+1uyQ6pn6pN0lk6yT74YCQ0CJq/XSZ9B5F7Tf98B7YRxRhg9x6zXfbY1Qfkny3Z6SPs0dllpskSz4n9IU/hFRuDnnrW5A9vEmmHotLLSEJ2ssDP146vkkyirIFzEr/TpKnhzyjcA75kheMEdoedZiAGkl70BVvFKRV/fI6zmu1YrYDsF4ry7CYfnitH1+dky9BcRh5SdUTFp0qowhZMdxnlnRrHwHVGF73EewC1R7J6xmDWPP4+7fQ13qGDwPyBV8C5Hyo9qhQjXdHe1dRLU9PGEZBlxnfh1AK34c4FztGwffsNvbs5ea+3/ceSaKhqXEZZQ+Ap2uOPH2yTKysjO9kSSl8J8u0zb+Mkrbpp1FS2OZPlv5esXhvdIy6dBEPDx9x5B7Xjlkun0dJLKSUa69slavWmxw904hy8NniCqEkFpdyjvQw/QRQYrelvCOdXZdyjnQWk9ItnYNDNyj9/m2kx9kXfBK/cFX6eX8LG5GRVoSCUszzoaAUp2un8RHie1op0YjUfM9Yj9J9qcD8vWfcJPUmSek36veft0msO3ILlIL+jGRs+HON6eZoDalnTD9+CxmtaUUY9Q2Ndefh/lvDbZo6DlQFfPafTUHrrqpq8KbF9ynoJql3ScabpVbzPZKwx7ZGH22F0dDGrePgHbaQ7vZRgUNvwTzID2ngMdYiZPz6V/TLyEpK9HbKSAAi0Qh6GnA9IZfYLap0JNM1Py96Al8DTYlW7BrVmKKlayG07p/zOEDL/vk2STlMb5LyfKpKytOpKoleofIeB9y9Qo4DfHTo2FWUdItDwqiXHard5dimOWTsTQQiTZ9x9M7d6a456HNUzqMN5/Adbei3pH6Va4/Ol3mOm2NMYnf/SSrXfUvfpII9iUUy66gQy32A7Bb+Wkhd0Ln1hzvXwvgWMnFptb+tlzAOAaJvHzZq7QnIhYwyeoHKVQwq2Zuqvz0OsZEdNC06GMYr7EKag67ZPQSY5Mv7Wi9rNqv153Xh2XzKfyrTKf+Uwrlml/mU/1SmU/5TWZDy7+8VYk/p6HC68CiH04VXyrwZ4yPd536r86O0zo/SumCU1vlRWte4rOoKl1Wdd1nxO2k+l1WddlnVNZ6VuuaAW9ec2usaP09d4+epa/w8dYWfp67w89QVfp66xs9T1zho/Mb6cquX6XUEj2eF77DSeH1Ug1zusDIvpua58ZZZ9Ml34+3Np4wi14k4eLgO37U5LqSOspBhi0RImW/TOtumnGJBc+TQn5nbm540R4w/OdJz6meJnKsSGfRM089WUK0rbvmFIs+u41xFXyPwZPVdBctoDn3bu8dS7FKFUTsoo0JWyds9kprHKl4xO/sjkjLSAPGmyieN2jclqZKuZQWhFlA8Vu6xRpVw+SmcxNkznMTZM29IXD3DZ67C0ejLi7kvM5ddqvI+uZWlTs9dqmOkaIX65b5L/ORjejw+VDzcvJLQG1G+FYZVp3GuMJTCt8LQ5vA+DJXpE1VqI09UDSLY+hGJ63WpnPjbQa7XpTLzJHpfl8osKOKtyJJprMp5SSOza1G+SxqZRquclzQyC1f5LmlwCtclDT5CnA8HZVbvL5exIarb5aM/lMP5+BDn0PH4kEK++isHvVvVa6irJlh5ywcyfG8gZRZokqPSwTPgZZjg/SKEpZo/XnQ/+0XB1ywf6HCWUM+6oIR61ukS6nSwex/ZybTen7OKcl7xmEu2BQWqsk0XqMq2oEBVtukCVZzCZw41r+gXXdEvNt8vZUW/1Pl+qT+6THnfcck0YOUskJvLgtqluaQFI4Rd8nCOEFavzz1Cik2PEErhGyG85rDrHZfMwk2ud1wyfU/K+Y5LrrTYv+8dF94evndcMvVPO99xycxX7nvHJdNHqbyboWrTmyGqw7sZqgseptRt+mHKNzp8hkxXPEil8w9S6YoHqXT+QSqdf5CKzhffezK6Ldii6rZifIQFW1QN01tUDQu2qBqmt6icwjk+mFF2viejrOyf9z0ZZZej3MMslBXDbMGTFBqnn6TQuOBJCo3TT1JwigX7Kd97MsoCVN73ZJRdsHK+J6MsrON9T0bpFSvnezLKHpTyvifDlwjfezIqYf4wpLKg1r/KgiLqKtNF1FUWFFFXmS6izilck5ebd+d7MkpDVN4Rkhb4/TUt8Ptrmvb7a1rg99c07ffnFL4Rwo2Z7z0ZTbbgKENjsq6jzBsdzkGWV2xV8/xWNa/Yqub5rWqW+UHGll3nezK64kUqXfEilc6/SKUrXqTS+RepdP5FKt65zvdklEaofO/J8F2m8z0ZZY5/33sySgNUrvdkVFcMU50fprpimNr8MLUFw5S6H33vyagtcPqrLXD6q007/dV0RefafOfOO/1Zuk6ynjSQTOp1WIiSaM8qfXlT5iuJ0veoXClQysJTvhQoTrEgyXbvjF4oJhi73U5JRudKSjdJpN+n2Bf360dDtNh8x5T5jik/3DG561ANpDlozb88CuU97mZepZW9I+lr//4bajK+krA6iDoCdptG8jks1TaOTP0vceHXVZfe5qhjm7qFy4vQSkNDrquyygJUmtPIXoKV6tU1pOxSVdgqXCmpkNH1ejOF04QRTt1/q13S0CFrI3Bnkq6H7FFe73K98lXKMBanct66NRam8t1npBS++4zGIkzO+4xG6/e57jPaRivd+m7d+nvFSK/Q0eGqlEE5nJUy3nFs0xy+ShlvOFyVMmxBEUBbUASQf4uvUoaf4+YYc1bKMBai8lbK4EJ8lTKM1zTzdS7nWNC5vkoZ9qYKmatSxhshrkoZFqeXf6NXj5yVMqgOX6WMt5s7hc1dutjcmWzzO0RK4rtZxrd21qte7j+vB+qCV6ls/lUqm3+Vyha8SmXzr1LZilepbMGrVG82/n29DbVem9M0bwr5zt8ZFKYkNlyphqeYj0h01O9UK3KTZDhTtZjcPshgwQy4ZvvpQWakD+yHmkxoaLv0uiy7jy/ebdxxgC+bEpIFFp4fIbZhBsqtqbOfu3uxm0BWbxZhci6aOS1YNJkOb5PSru1BzL2X480hHzaBAiLp9tk9ZNgV2e2ZE8bTOyFkMnNYinlvF3gUMr3e2eH3IFNvFLXLy8Om9DUU32VKSuK86E6vUtaeDB1qvH2V0hd1Nx6scmVD01uQUUYcIV2/hsJJnI/dGA1XrSDxvpjDSZwv5pjRpGrPizmUwvdijvEqhL4Xc3h7OF/MoamIoWifeY/f9dK8vrlA2HNe9228Xg35NyHefplBsR74JxSuiUfvdXknHiXxzpkVT1XZiqeqbMVTVTb/VJXNP1VlK56qshVPVb25ZeKZMZzCNWPeUHhmDL8e4pwxnMQ72OtPk7hnDL/c5Zwx9NDpmzHVpmdMtQUzhraHd6mil90U6svAUeLrzqywoEiSkc4kUFrx9fbfm8s7vj1iYQPeOfHovRvvxAsLVpmy2Q+TeCceJ3FOvMIvVnkmHqXwTTxK4Z14vD1WTLza/TM15+uJF9jcDWlUl8O6Tq8Tj9+IcE68MH1VlV9m8E48SuKdM3H7YRL3xKMk3okXZXriMQrnxGMU7olH28O7R2RXTeIgifg536Yeu42w+//6mhcgr/Hb1OM3CZ1TT+Y3m/QSoHfqURLvrBH5YRL31KMk3qknOj31GIVz6jEK99Sj7bFi6snwwUvQ61tehcWvUun1UFNFN/zr1EsLXJIlTVer4he0vFMvrZg1SX+YxD31KIl36qU6PfUYhXPqUfe5d+rR9vBOPXopWXrOeBAo0fJyKbmw2FXqqQkJM1c1+ylyn7sYAv+Mor9GnuGVxI8odBsJ49s8Rb5J0dtC77aFjpfZ77bFeCja7rYFUtxsC6xxfbMtrLeF3W2L0j+k3G0LpLjZFkU7hd1VYb0kS7mpovYnA+vdtkCKuyp6sd9KTA4tYOBOM6FVEJyp7oXepwq9WyzGQkhoiQr7J0b426U9+jHe3BBO4ky8oSTexBt+H9vl9Odltl1O/zeVuj2bwbzC95hX+B5L+mES92awLHD6lzLt9KcUzs1gWeD05+3h3QzyG+rO0w8r+ucd8HXFgF+QS1Fq/mES94DnCcDOAc9SoZwDnlE4BzzPiHQOeJ7y6j390Kv/edR1gMzM16v/lVb9C/35AglYblNfOKg5g/RuaJJgLxykRY5KK23NzHKPoWcRK2Qzf8aw9T3VpQZaSCHVniKTt1yvW5NM/ZTrKNeFtTpvc8gVh7uyhG3X1bpqoHfLxusYScrlx7BqfToKse7R1usGCfSNujiEhIiPMEywkEoZ1GtRR5uQUmo0f2n4C2q43DDXUKb33LpiqVuRNlhXOOopiXep4yTOpa7GNLvUUQrfUlf5vS7fUsfbw73U0fIh/br8blfBEbK9KqGvdfcBD5f/X2ZdZWEp6afDhK/S6Mu5jtcw8e1Sq8zvUmn5Ee/UtQXu9boivE1J3FNXFuxSq0zvUimFc+rKgl0qbw9vSoj7aZt0/bRNZcGgUMY9xgJva6bXF0MWJGMdrT838/g7He684QUOkZrKD5O4Zx4l8c48/i6Va+YxCufMYxTumZfKgplXViw1eT5RvixYajiJd6yu8KpQEveAzwtuqFSdvqFCKZwDXhfcUOHtsWKpERnl1L/k7H57Z48mQY2A8NeCSC/rlf40iR5BpDOOcHXjjlOMMlNao92jGJ6Zmq8p2CDrh+Ya747TXl6mWp4e6oSCGyHpFwejYAHzj0jiKGAuG5n6tsDtzkmCjKulqdwl6V0TQrmrBFwiUu8qyeOmbIYKgh+S6ChoUOrdzxnWTCL5nDLvAyjzPoCSfnqgSbchQbLd/BifFaEUPivibFJGQTeZvg+hFL4PcW51mTmkhxCvOeTHIac5rAuyQTmJ1xxyEqc5rLrAHFISrznkJE5zyD/HZw7Dtk2n/HMOn0HkHGvGmtMivvkclyV5w+EyJe5mZeaI+rx8RpFS+Iyi0/NGKLhP1GkU33hnfUYxbGHBFeY3LE6z+I7FZxffsDgN4xsWp2V8x+Izje++yGsbY5y3jTHO28YYf3zEuY1jjPPGMcZ54xinz508luczjnF+6xunt7481us1jjzq7DWOklYMVcriNo6cxWscKYvbOFIWt3HkLF7jyL/IaxxTmDeOKcwbxxR+fMS5jWMK88YxhXnjmKZPoTynz/UpnML1Jd7MQmYc8wrjmJcYxywrhiplcRtHzuI1jpTFbRwpi9s4chavceRf5DWOus0bR93mjaNuPz7i3MaRfo/TOFIOp3F0tiszSzTD32ccKYXPODrvGVDjGFcYxwW+xrDZkkMOZXEbR87iNY6UxW0cKYvbOHIWr3HkX+Q1jlbnjaPVeeNo9cdHnNs40u9xGkfK4TSOznZlNoXfbhulhjRfv3lKKcYzDqqXd+z4nUNn0WJO4itqzWsD+BaLNN2z3goFtGNlwWLBq1h4F4u6xAdbl/hg6xIfbF3ig61LfLB1iQ+2rvDBhm3eB0s5nIsF5Vg04ryLBf8e32LBOXyLhbddmVmiNYt8xpFS+Iyjs3ISM470qozXOPLqWk7jGMIKHyxn8RrHNyxO48hZvMaRs3iN4xsWp3F880Ve4xjnfbCUw2scY/jxEec2jnHeB8s5nMYxzvtg43QiAqfwGcc4nYbAa216jSOv+uk1jrLCB8tZ3MZRVvhgOYvbOMoKH+wbFq9xlBU+2JDmfbCUw2sc0/bjI85tHNO8D5ZzOI1jmvfBhulP4RQ+4ximP4RXAPcax7DCBxvyikMOZ3Ebx7zCB8tZ3MYxr/DBvmHxGse8wgcb8rwPlnJ4jWOuPz7i3MYxz/tgOYfTOOZpVx1/d8L1KZzC9SXe1y+YcaTvkniNI38hxWscbckhh7K4jSNn8RpHyuI2jpTFbRw5i9c48i/yGkcr88bRyrxxtPLjI85tHK3MG0cr88bR5jOC+JtLrgAVp/AEqDKriSdB+7XaCAGq19rk+/xmQ7WP1MsXKPmTXr6FglL4Fgrnw2L01lSZXyjePD7nXSjqEv9rXeJ/rUv8r3WJ/7Uu8b/WJf7XusL/Grd5/yvlcC4UlGPRiPMuFPx7fAsF5/AtFN52ZTaFP2fpWSjeUHgWCv7cqc9E23Swz/voKmvOvCB/4M3DvE4THZfc4YpL7nDFJXe44pI7XHHJHa645A5XXHKHKy64wxUX3OGKS+5wxSV3uOKCO1xxwR2uOH+HKwtt1lrhWfnt6vFzTrL/wzpIoE305WuELsK1bCDlHovzIfZoC9qEkvjbJC9pkzzbJok+oVh71a5asWpXrp+QjAFbS7wkyRv1eG693uX+Gwz+RzS+MkacwlXG6A2Fp4xRiit6Ji7omZTiip6hNL6e4RSunnlD4esZYopylfHgr8DD9Bo/IYmjpjLU3X4lEZoXlXoJspjC2EXr9mJFaJAg1bErgZp730lYuQw7hRSBatc5f8BR0mkSiwbGwZIhtnrOmhjArL6U7txJyOGk6GlWSzUmhD49bH0/blAh/rV/P+gbu+wbPkikrxL7INF7HLk/d7N3oVyPEaVDfpz5qta7JDD5rkmE7n1dg1UiPZwkG6eTRN7d4TRbCf0xg63IbZpqsLMBS/AhjUl/4W4zDbdp6tjTl60QGhYls1j7Nliv164PSOpdkjo29TUTEt7VcNIpEkmrUJNfurMgw9n62yQy51NxlzZSAvPw1f54r1U0kvJqJI0+UwlPeSRiEWi5N+/6RUNbzvWLcXjXr7ItWL9KmF+/Slyxfrn7xljf0Mc7+1srYT/BXZOwUIpz3XinpHtNIr6D910JaRPpPZw22jusTKrz5TiuJIX+wIAKG/RKB+w2Bmy5165xPGocQyH7WBo4dLZrpXmatQ813RIZ9UyJr12pfS2hP7lSAnTwq33l65bzCPmGxHeEFO568R4h95atP8/jO4u+4XAdRt9xeE6jwVggxUYsplxaWPZCkPcUKew1K+8qfBTNnlyFKYdzFZatzK/CwnxAzlVYWBqtexX2943dGyO+QySlcJ4hhd2F8Z4h35C49gLMoDmPkNuSE+S25Mi2LTmx1QUHNjdHvcnhPK4tWWh4u7rP5XXJSKlLXA31x7/IP2rrilGby/yo9XPUmxy+UZvLklFbV3gq+K7C56gQ0VlHBTH1aQvjGbYv70GFVxnsqY/YVz8R3CF9wiE9+L//7y63esKuB/kCfqw95Hj46tkeELT/3h4siFK21Fc/GO3fOdj1yV5CpNbbHJrGaI+XJGyEOZuUbAXGu+caIafj5a1AytC3rIq5GK8MtHB6TyEKGR+02aqfI8WxS4xyybEfQdmSV2Pv2P03dO1LhE2oW7D3635AgkH6AcdufnqTpAI5O7uv4fV7ZH7qUw7n1M/zsX76IH13Kew/yxVDnh3plME10lOaH+mUwz3SNSwY6SxKGLd+rIrwyGd8sWCUI/dG3UOjhIP6vaT0NLmcQiGzRfP8bKEcztmiNj1b/C0CeT6vLcKePYkae/8qbLnjiyXzc9g8Bz6K98rBLFA/8qYCczckN0PuZv1LDuUnDNbdZWm7ZiBzv3SXaMl2j6E/7Fsw6/Eeg8olA7u7lKSnGSYp1xwsBdvXnzSJ29Wf/GFxT38ya9EiHG2aRnza8DaH3uOQrZ+ZZCs3OXTkKpvc48jjlJ/TzfaQ4S9MkCZ5n6Pe4zhy254cEm5yjPczk+pdjvEtdnOcpm54HlvTmxy174vztt2bcbn0cEG6x1Bid57KTYatM6RJBt1uauiOdWWzlTAcdScag9RZDcz6xWkbHqdteJy24WGBDQ8LbHhYYMPDAhse5m043SHUftpLtZRbHKLdhbf/vB7jfOeZe3BR7XrnGRIr4+LyA1IZZn0DXDZhMljeVLazYwxN1+sZKQV6vinjfIORQXslYd7VkRMj6Pr6TsLvMqQRWMDbN58ccUo/TMfy5fj5wfGkdEfe/lMvOfiBTfvCtEc52RGWJmbXbpT38EaFhv062Fh6XRo9nKRul0IYxx4h7fnhAqlxrxyV5cpq7hyayz2OGkasNF570XjX1DTO0nsE9y7L2FLqtl1rqdM+rDrtw6p03hW4/VO3y/yTxG5E1dAX/xqu/SScI/YVr8ZY7vhJtITukNNSbvatbT2ZZv8dM5m8Mu9/4hw+/1OSn/U/fW0Rud+uabCkcJelX/jef6uS3mHPL3l7h3I4e4d9z5LewRYxvd07AiwkRsGKrvhMGqfw+eXpt2hfsILZJmyM1NkoBef4qkVhU/IZi+UxAzFJ4UOWYesNc7g+GW1HlZgnRyGzmJdqt9pL64Sybds9mhh7jmyUDc+M8SZJiDdJck9NjVnDPRLZenLNfuYTQmLTgWjKkUPubpFYsI/tAxIJPR1UvmzXXg8G7EjvNdSUw2moNc0a6jcN0i+q7HGtzBqE+Xq2njGoW66MhWnpqVMatuvDIxfSXYCKmakffs4o0KFBw22WfvLTUPJ9ltJZqpBhX5kXS2rvZUYS5tfRML2O0k/xBrg5iTfCnejtHWeEO7C3gnafQM+DRikhyKuUOm+RKIfTIpXpMhRvGkQhBGmkQcp8XgrLlBftIQkxdHV884mxi1XOXLBU2DsjvlwwzuFcgvkbs04OWrx+BGkiOG/Di9N0D+YQQyLDvQfmzNIHOrT2PWPRjejICywAJdnjHF1KLlDhSuL2CU2REf4q4BP7mGYYWAzAf0ozWmZ3km2EhvqCtp6QuU9WTIT+tlEiG+GtL10Rs1y/k9AvGnd699941eujhoG90uMOXbmmybR23yKeL3cLRa/bhrMcxYkaS4QD5T9hSdzxN/x+8S6LjEuKCS8pfsaS+v2kPd6U77bLCHdFKaRdlOZq+m4Js6OCc/NGKXybN/ol3s0bbw7n5i0HWWC66btszgv6OSy4GpjD/NVAyuG8GpjDgquBOcxfDTyKDhJHme9qoL9vyNSjg8R5Pz+z15S89/PZWqqjqJp+ue/8eiuekdjWPSiGd/w/InHfz6ckpUdntRgjoVeC6th87b9hAXy9MU1pdi/nWLp2L8dtmh5OfFCS+9u8eftVUrUU7/aR7xHbUOn1EVcJhcpLVrkqKFAOZwGFzC6AOAsoZBb4chdQyLKgVWnv+t45fjNcN4Hbjriz/mzUhzwmT7DbczCMKrQhZDJ56DYn950SZh9/tlPqjj9MInyleLOL7TqC2O29cOrepUdax4odNWN5c/Dp9WP337h0fDuwpHlXF+fwubpyDj/L4XSXvTmWjqqtiqVSvzdrno8lUI6H22FIYWOWsmjfYQRMHf2QpeQ+Zku+raX27M24beEmi9v/wLWMLL/w1WS/stDkSfcZm6dxes/YlMV9xubt0kdu+OI9+/CLvPaWf5HX3rpbl7HEBQ5f5ou33DfHe4Bfr33x1KEfxn0eiemuQ99pbi1O2zihteP61rrg2w7fPoYVDnc6YyiFzxlDC497nTGUxO2MoS9WeZ0xtLqD1xnDCgy6nTEsCuZ1xtAihU5nDJszbmdMSfPOGBYE8ztj3H1jrG8WOGNYeUGvM0a3Bc4YRuJ2xlAlXmcMJfE6YzQsccbwLY7bGfOGxuuM4c3rdMZwEqczhj0Q6nQb5DLvjKEcTmeMssCK0xmjNOHP64yhSpytynvX6Yzhw9XtjOE0bmfMGxqvM4Zuc3zOGL5TcjljQp7fSgdaI0l6NknMmOeTPyAZlV+kbvkeyX5eS33ufEnWex2y7K6X0w0TF6zn7DqScytNKXxbafol3q00bw7nVlrjggJDQajbEFK7g10PEfqIz3gvKtSEh8f4AYmNW2tfCqm/kmhke1hfEpbSt2J8SVicw5tAxXawauOFJcXEtNeUAnpBvJ+mc4Wlr5qfQ8ctAlXwJH3jkG3aOiutHNdvWIlAseLwPTOBXdPWkSKr6C/8whGpSfQLSbNC6KRJ1r1QyaTem3lJY788b4nNPBbw8s48VhrQO/Moh3PmsZ6Jue9G4r6VJwsnS6L0tggrMOhtEcrhbBHjO+hxC2/fTV89GcefK3cf12gly9QtSUpf8jm/NQp9lkj6lRlL1+4BpRba6UNSFqJy+pAoh9OHpPTuudOHpOydJqcPSekLrl4fkr9vaC4dHSU9RX2Xku6RSOjfI6HabZJtngSyqfE+/ockOs4DhZCwg7C3fPkbEqd3jn5O6hdYZY9SLSC5O9j2g5Z1kkK6mJZG0lH42CKbglSK9ZiqmBLrSG95ufvYfrqPLYzPYdPYeG14cJfk2y3bb0VIYcPN5l94UVvxwova9Asv77YWAhcI8qWHQemLRDBQHizlFoszbmgLMoXV6oKNBYuieDcWjMO7saAvaHk3FizC5d1YlLRiY+HuG2LrbUGmsJYFptFWZArbikxhW5EpbCsyhW1NprCtSfG1FSm+tiLF1+aTUW1Biq8tSPFV9t6UcwW1bVuxgtb5WJ2tSPG1NSm+tibF19ak+L5xoY5bhUpKlxgrnfDYSBVgybdYvHmX1OU/og81souALGdl3HY2LeQOqoUw7bykyZJ4lRCrO8byAYn1tWd36WzXJBZ+nKWdVs9hUu6y2HhYyGpkLGxN7guhYazrIw548DCXmxxhgyd0YOZ82CZ1REJqJG3CwhhhD4WM/FFFf+o3Q8m8Drm/ErhvzfVq5FOKEczcf6Z7FK75x67Wu+cfJXHPnGg/zeKff5TFPf9YuMs7/xiHd/7xl9e884+2iXP+xaCzE4dTuCbOGwpX+C8umDicxD3kpf40i3/iSF0xcVi0yjtxaMTLOXEYh3/i0DZxTxx2JVjHOR+K1+bX/RrzOybp++kkmM6e7GXM5hVbRxas8s7AsmIGlhVzJ8efZvHPQMrinoHsbRnvDGQc3hnIOPwzkLbJihlYuw/mS9HmbzOQRqtCjxHlXfL1DGQHWv8M1PkUmBwWzEBejN47dzT/NIt/BlIW9wxkiU7eGcg4vDNQy4oZqHnBDGRZW3GQRPyg73OQBb12Z19fBQNec3udgywBxT8HmRvTOQfFFsxBWXL0svLTLP45SFncc5Be7XLOQcbhnYMlrJiD/N7dgjkow/MuQY3MQVafMJV+uzlVdL6/zsGsK+Ygvd7lXAfrinVwySmuhp9m8c9ByuKegzXNz0HG4Z2DjMM/B2mbeOcgPZZKT9YNAk+w1VffIY059RSFBH0TNH/AkfssxiD4hxy9xH2GV7s+4ziubLXYF9aSvs2R73L09tDb7aG9PfR2e1j/FrvdHshxtz3wpaq77TGeQLDb7VH6t5Tb7YEcd9ujaOew2zrstGVf3pf5iKNup3mvt9sDOW7r6Nd9KrFBkVXE8eadUBLNaVxu2bZLklBYIUMLvWsM3w/6zsJ8wkntn9hlkQ/axJsu8obEl4vDSZy5OJEV2HLGDCiFL2ag0zd1oq7wWOqKU1aJ9adZ3PtEzuLdJxaZjxlQDuc+kXK494m8Tbz7RIsLDkiFOQecA5+ma3kHvq1w8R35qj/L4h/4lMU98Flte+/AZxzegU9r7LsHftpWHJDY7aEx8KPi+7c1v0phV01Dv9IsIeEe55WEGjdIBcdHRV/uzZZM7832d26wmMBHFD3ZWCHr+UOKre+0LlVEljadak++yV+KEby2KK1dmPvtiYSPLE+QyBXJm1HWc6+jQbnA76Mss7SKNC7OJynkcwo7vI6b1VtlbcKGaohDSohwCWOKxq4bl/o46mgWmDcvPo5Yosu1UMPlVjoUVn/euR0vK1a/smT1Y+lva1j8qx9lca9+WudXP8bhXf0Yh3/1o23iXv1YWu54LHW3suAzea1MUNiby9KPxAkujL+6GAvbsUk/QaaINunl7Ffqii2szW9ha1wwieuKPJFStp9m8U/ismQLWxZsYcuCLWxZsoUtC7awgT79Wvr3CF7E+FaQo7DgVoBXogq8GvR67a6suCtQ6nyucllxV6CsyPIvVX6axT8Fq6yYguztBu8UZBzeKcg4/FOQtol3Hd1WDPy6TV+SiduCgc9JvEO2/jyLe+BzFu/Ar9v8JRnK4Rz4lMM98HmbrFh7RLrDXb7kCb+uPYwkbSPAvGm8JqlBfppFD1/AGYa4vADIOUbxI63RbnIMR07N1xx0rPXDdY23x2uvaFMtz495wsFNkvSrjFGglv9nJMf54UmyMSsQV3jtOct4SjqEVG6z9O4J+JT0hyzgQJF6W0seV3Az1IX7lEVHuYRSb3/RsG0S6RfNOwwoh9fex/rjI066RQmS7e73OG0K5XDaFGe7Wr67CfV9C+fwfYt3M0w5FtjHN6cmr31MKzJQOYvbPnIWr31MYYV9pCxu+8hZvPaRf5HXPqb5eweUw2sfU/nxEee2j/R7nPaRcjjto7NdqU2hfjKnfaQcTvvo9Nex/SN1p3r3j9yx67WPuuKKNWdx20fO4rWPlMVtHymL2z5yFq995F/ktY+6wF+gC/wFaj8+4tz2URecSXXBmVRt3j7q/F6Yczjto07vhXnM2GsfefTaax9tyWmHsrjtI2fx2kfK4raPlMVtHzmL1z7yL/LaxzIfSKAcXvtY9MdHnNs+lvkzKedw2sey4ky6YP+YFuwf0/z+0VbYR1tiH+uS0w5/FNtrHzmL1z5SFrd9pCxu+8hZvPaRf5HPPsYj/2bOPnIOn33kHItGnNM+vvkel015w+GyKe52pXaJ3iFw2kfK4bSPzrsMrD3oVROvfeSXXnz2cQ/FLzjtvGFx2sd3LD77+IbFaR/fsDjt4zsWn31890Ve+xjTvH2Mad4+xvTjI85tH+n3OO0j5XDaR2e7UptCr9GNCkj4pPZHN/HGmxL4jtgLBb/c6KuW/IbEW1C7TvftGw7feuGtkcD6lpaw8K4XvJiGd71I24rZmxb4Y9+xeNeLtMAf+4bFvV6kBf7Yd1/kXS+Sza8XyebXi2Q/PuLc60Wy+fUi2fx6keb9sbx+ktM+Ug6nfXTWcWLtQctsee0jL/jltY+5rhiteYE/9h2L1z7mBf7YNyxu+5gX+GPffZHXPqrO20fVefuo+uMjzm0fVefto+q8fdR5fyyv8ei0jzqfm+CtNUn3j2HF/jGssI9WVoxWW+CPfcfitY+2wB/7hsVtH22BP/bdF3ntY1ngjy0L/LEl//iIc9vHssAfWxb4Y8u8P5ZXoXbax5zn7WOe/pYYV/hj4xJ/bF1y2qlL/LF1iT+2LvHH1iX+2LrEH1tX+GPDNu+PpRxO+0g5Fo04r33k3+Ozj5zDZx+97UrtUpqPV3EOp310vtdB7eO2wj5uC+xjCCtOO5zFax/fsDjtI2fx2kfO4rWPb1ic9vHNF3ntY5R5+xhl3j5G+fER57aPUebtY5R5+xjnc4T4U1GueBWncMWrAjFKcjxqd1DsIxWuwb7WSw/ChmofqaNj02vNaPoYmXOtoBzOtcL5KBq/vzq/Vrx5Pc+7VsgKXyxnca8VssIXy1nca4Ws8MW+YfGuFbLCF3s88DO7VqR5XyzlWDTi3GtFmvfFcg7nWpEW+GK32bXiDYVnrXjzZKvTSof52xjep2MZR15xAzYvuAG7L+IrMgrCihte71i8VnrFDa83LG4rveKG17sv8lrp+RtenMNrpVfc8HrXJl4rPX/D6w2H00ovuOEVSYBIc3+kQ0ddtbh9QjGqrYKN/kbBdvROFZTCp2Jjl19zOQvyxi/T7rW8DiXR2stTaZWbJGUY6brleyS7de8Vm7dIPiexGLNs/aAkW5GbLM6aQ5zDV3PoDYer5hDtG4NCx1Bx+bMO/kKS7pLEQSLXXRMDKyoqsZehFgnpoknecEhfsESKXXKwx6BWcKTQvyXFcLN7e43jaFiN7bOe6QXGo9W7lgSV3CYpfQu9/7xN0jcBb0jmbfw2b+OTsMy1GPqiGYkV4Ry9BOH+s15w1DzbGJTB1RaV1mLsK1U2mPj7JtrPMR6C2n/KTY7xcFrRcpNDho5Ub3L0xxxziXd1lPGAW73bHja+pV73i9GK/tILVmd8reEuR95uctg5TJPCXvkjDu17h2RkjBl/HbM/vqZ2Xb00Ut/1vrXo9Rd1A3/EbhM/UOKqo7ormX6n0+jNAl8ZVVvwblKMMfw0i7eK6hsWZxXVnWU+SyAuuLUVl9za4m3irKJKa5q75x+riOedf2+UOOefTNcxZtUHvPOv6IqZI+mnWfzzT9KK+SfzPivK4Z1/ssJnxdvEOf/oGlrLeOC2Xu9tIn2GJsf+6FGO8JLUdxJW9tfiuG0ITt8PdgR5E3g5KbOvySu+Rn/2a8J4jjHEe3u1/Vt0fEu9yTF0xLiAQ+QmR+69G/Gl3I84+oMtO93dNq1xtGm5xyFb55CgZKTKvL+Zc/j8zV6bSDjoiuUMYfGV0xnBiksiWHFJBCsuiWDFJRGsuCSCFZdEsOKSCFZcEMGKCyJYcUkEKy6JYMUFEay4IIIV5yNYb05Kzm9ZUA8izteDsAUlA2xFxYC4okLhGxa3dVxRofANi9s6rqhQ+I7Fax1XVCiMcb5CIefwWscVFQrftYnXOs5XKHzD4bQo8xUKldd172MkfQkkp5sc9R5HirlzSLjJMTwMSfUux/gW225ydA/SbtTkJkd/cTfkjehgp/FxTMII0CcMpR9Oqtxk6EfomiYZdLupoYcYdCu3GDT0M7zUWQ3pujfZjUhfb1IGV29yBk9v+hhYb1IGV28yBl9vOjWQ3ky0LknqO7mYsSXCV/svIU+nZnAOX1qFsNzVFRy+1AzaptKXw91LsZE2ZTfacncwa9iu3HVURhq5HQk3kt9lLHClSpx3pdKvyd1ht//Ml1/DOXJvkazXLRKEFbKLOW2dJW83WZyJZpzDl2j2hsOTaJamU0TSdIoIc/j5NFAGl4bMSqnUvt3aIxfhMujHOcZOumKFwxeOIDQQs239De/9NxxFP+PxjlFZMEZleowKdaIWOLUVua4d+YYlBGCRa5Y6P044h3ecxEXjJC4YJ3HBOInT44Sm/p1Lv0L2oNTsJbC+pTPRWwR9A2Owf3kliJKnk0uZiN6dBqvkPxHB3tpOsfvU9t+YLlfSKw8do6WMMVoFb9F+42GFeuLWW+Xxu97mCTJ4gkzwGPDYfZ59u995Ysj3eXoC7uO33uapPQ//8Vvu8sgWuhdl/x3u86QyeFK9z9O304/fdByy8bz/PwNfM9OjRE+CU/QGTreg9QOWPCZFDpBS809Y2L7aevB4j4PHy2MXVRLSUGJ693v2DVs/rSj7Hnad81ESqs+F/fd1kWiuRi33UtNm281vUutuTS3hNguu0WiNv7Hw0atpjF6ls5s9v/LKYzd5YCsFHHF7HXlGD/z98JACHte/s5T5OUCVxJ6sl9ACf1dStp9WYrkrMb3bstJ9BykF2j+sj2H9x6jN90ZhAzf37eX+U2+zxOENRyfEhyxjhcywkHzIomPdV7n7RTGU7lYJdQVLTLdZknSWlOw2Sz/TxC/Rl28snxg6ZqAqq++TtjQCSpteT8ea5qf0GyUlQnhsu8kSug9t/63hLksZIbJQ0+dnlJJOGfvCduekVXttHoxZ3iOotxSErRee2CPJ5R7F2ExuWu9RbDpJUfTcdBUIM37SlD1BoEZy4Eybzn8HZ5k+O5f+76sQEe+mB0Syr2XEFKgrod9kgBU8xQ8ofK3x/mNsfEy8thjcqpfhTcA7ph+tDXtg5lwzJbENY2KRKm+rUCWx70f2yMm24HtyuL3uZumrS7bCWqX+bKvsR7auRMPtHYCO8giG2WnfvocFvpZ8j42WtXy3l7+ysFEb86w58Ddsvj0Jt345SoKk25toGalptzeLX1hyvnvOibWfczAB/9PTUncsJkn3z1w9TroTssHCag76POlvOFxRgXc6PFGBvY9lxSm0zH8N51jwNc6eeeMLiuNb0IP9oUepDCV43fmVJbGrWs5dSlpgqfnH9Lvs+8fYbfejjGSJrKxJlO0NXNk0nMOXCZNS+VkOb99Qd2yR4bzZfzN3LHfrjsuw+2/Y/33KY93LvP+O6TZP6fm7+2+8bfz9QUN+FzUOHoMqCh/rqXCpNU20Ty8a9NBzv33c3/WmfT5oZ7LDLd0nWsB7Iho+shA2LEQhzvzEsnK9yzPlcC7PXMflgvavO/jlT3/+/d9+++uffvnbn//6l//e/90/HlS///mXf//t1yf8z7//5U/w3/7t//7X+d/8++9//u23P//vf/uv3//6p1//4++///pgevx3f9ie/9//2h2pGv+4//8l/usf/yCP/8QeJ+dge4B3/0/C83+0R2Ee/9Pw+I/C8b/aA7eP/1XI//qPh9T/Bw==","names":["get_balance"],"brillig_names":["get_balance"]},{"name":"mint","hash":"9443415756919044964","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"anchor_block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::abis::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::abis::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"sponge_blob_hash","type":{"kind":"field"}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"note_hash_read_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_read_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"key_validation_requests_and_generators","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hashes","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifiers","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"private_call_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_call_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"private_logs","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_class_logs_hashes","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"anchor_block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::abis::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::abis::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"sponge_blob_hash","type":{"kind":"field"}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"344423948968719440":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"361444214588792908":{"error_kind":"string","string":"attempt to multiply with overflow"},"992401946138144806":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"1998584279744703196":{"error_kind":"string","string":"attempt to subtract with overflow"},"3080037330898348111":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"4261968856572588300":{"error_kind":"string","string":"Value does not fit in field"},"4440399188109668273":{"error_kind":"string","string":"Input length must be a multiple of 32"},"6565645037161677025":{"error_kind":"fmtstring","length":101,"item_types":[]},"7564993426627941149":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"7995966536718645961":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"8992688621799713766":{"error_kind":"string","string":"Invalid public keys hint for address"},"9791669845391776238":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"9885968605480832328":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"9921926525851912681":{"error_kind":"fmtstring","length":98,"item_types":[]},"10791800398362570014":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"11021520179822076911":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"12469291177396340830":{"error_kind":"string","string":"call to assert_max_bit_size"},"12913276134398371456":{"error_kind":"string","string":"push out of bounds"},"13450089406971132036":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"13455385521185560676":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"14067204867181196045":{"error_kind":"fmtstring","length":75,"item_types":[]},"14990209321349310352":{"error_kind":"string","string":"attempt to add with overflow"},"15764276373176857197":{"error_kind":"string","string":"Stack too deep"},"15835548349546956319":{"error_kind":"string","string":"Field failed to decompose into specified 32 limbs"},"16431471497789672479":{"error_kind":"string","string":"Index out of bounds"},"16792019527863081935":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17154023812102399658":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17803644318014042523":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]}}},"bytecode":"","debug_symbols":"TJ1Lri3NbpznctturHyQmfRU3DD8FAQIEuBHS/DcvYuRZERH54ur/2SwKouxalfxrP3v//jv/+O//t9/+s///K//89/+9z/+43/693/81//1z//yL//8T//5X/7tv/2X//PP//avf//rv//j9/2fsf/xH+fy+f/+wz/Gp/ff/zr+wz/2wB8Tfyz8sfGH4Q/HHwd/XPwR+YdhFcMqhlUMqxhWMaxiWMWwimEVwyqOVRyrOFZxrOJYxbGKYxXHKo5VHKscrHKwysEqB6scrHKwysEqB6scrHKwysUqF6tcrHKxysUqF6tcrHKxysUqF6sEVgmsElglsEpglcAqgVUCqwRWCawyfr/353h/zvfnen/u96e9P/39ed6f9/351htvvfHWG2+98dYbb73x1htvvfG3nn1/3vdn4M/5e3+O9+d8f673535/2vvT359vvfnWm3/r+d+f6/f+HO/P+f5c78/9/rT359968f35He/64BbEg7zOE0bBLPiO+nywC6zAC76V7we3IB7ktf+dnbz6E2bB38pzf7ALrMALTsEtiAdfPwBGwSyolb1W9lr56435nZWvOwC3IB58PQIYBbNgFewCK6iVT618auVTK99a+dbKt1a+tfKtlW+tfGvlWyvfWvnWylErR6389dP8tuDrKMAusAIvOAW3IADzay/AKJgFq2AXWIEXnIJbUCuPWnnUyqNWHrXyqJVHrTxq5VErj1p51MqzVp618qyVZ608a+VZK89aedbKs1aetfKqlVetvGrlVSuvWnnVyqtWXrXyqpVXrbxr5V0r71p518q7Vt618q6Vd628a+VdK1utbLWy1cpWK1utbLWy1cpWK389uMYH8eDrQcAomAWrYBdYgRecglrZa+VTK389uPYHs2AVfCvHB1bgBafgFsSDrwcBo2AWrIJa+dbKt1a+L5HmvQUvkWb8CkbBLFgFu8AKvKBWjlo53srr68E9PxgFs2AV7AIr8IJTcAviwaiVR608auVRK389uNcHVuAFp+AWxIOvBwGjYBasglp51sqzVs5Pv98HtyAefD0IGAWzYBXsAivwglp51cqrVt618q6Vd628a+VdK+9aedfKu1betfKula1WtlrZamWrla1WtlrZamWrla1WtlrZa2Wvlb1W9lrZa2Wvlb1W9lrZa2WvlU+tfGrlUyufWvnUyqdWPrXyqZVPrXxq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AoxGZAlwECdxETfRiE6km9HN6OZ0c7o53ZxuTjenm9PN6eZ0c7oduh26Hboduh26Hboduh26Hbodul26Xbpdul26Xbpdul26Xbpdul26Bd2CbkG3oFvQLegWdAu6Bd2i3e7vRxzESVzETTSiEw/xEuk26DboNug26DboNug26DboNug26DbpNuk26TbpNuk26TbpNuk26Tbptui26Lbotui26Lbotui26Lbotui26bbptum26bbptum26cYsucySyyy5zJLLLLnMksssucySyyy5zJLLLLnMksssucySyyy5zJLLLLnMksssucySyyy5zJLLLLnMksssucySyyy5zJLLLLnMksssucySyyy5zJLLLLnMksssucySyyy5zJLLLLnMksssucySyyy5zJLLLLnMksssucySyyy5zJLLLAlmSTBLglkSzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySYJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmCeZe81clYe714SFeYjTivgQ4iJO4iJtIt0W3RbdFt0W3TbdNt023TbdNt023TbdNt023TTejm9HN6GZ0M7oZ3YxuRjejm9HN6eZ0c7o53ZxuTjenm9PN6eZ0O3Q7dDt0O3Q7dDt0O3Q7dDt0O3S7dLt0u3S7dLt0u3TLLFmWeIiXmG7nw8ySh4M4iYu4iUZ04iFeYrktzL0+HMRJXMRNNKITD/ES6TboNug26DboNug26DboNug26DboNuk26TbpNuk26TbpNuk26TbpNum26Lbotui26Lbotui26Lbotui26Lbptum26bbptum26bbptum26bbpZnQzuhndjG5GN6Ob0c3oZnQzujndnG5ON6eb083p5nRzujndnG6Hboduh26Hboduh26Hboduh26Hbpdul26Xbpdul26Xbpdul26XbpduQbegW9At6BZ0C7oF3YJuQTdmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxmyWCWDGbJYJYMZslglgxm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rORwmH8jTZbDYYVOPMRLjMYvHwoHcRIXkW6DboNug24j3U5iNM4fcRAncRHTbSca0Yl5JkfiJUbjSrebmOvm6VubaEQnHuIlRuP+EQdxEum26bbptum26bbptulmdDO6Gd2MbkY3o5vRzehmdDO6Od2cbk43p5vTzenmdHO6Od2cboduh26Hboduh26Hboduh26Hbodul26Xbpdul26Xbpdul26Xbpdul25Bt6Bb0C3oFnQLugXdgm5Bt2i3nD8rHMRJXMRNNKITD/ES6TboNug26DboNug26DboNug26DboNuk26TbpNuk26TbpNuk26TbpNum26LbotujGLNnMks0s2cySzSzZzJLNLNnMkvy+PM97ufy+vMJF3EQjOvEQLzEaM0se0s3oZnQzuhndjG6ZJXslXmI0ZpY8HMRJTLdf4iYa0YmHeInRmFnycBAnkW6Hbpkl2xKdeIifm+URZ5YAM0sefm6WB5Spgb+W+fC9l7YcsyuMxsyHh4M4iV+936tkyzG7QiM68XPzLCfz4WEU5nfg+fem2PI78AonMd124iYa0Ynp9h1mDt95PrjL4bvCSVzEXPcm5rqR+K37vWew/La7wkuMxkyCb4jWclCvcBIX8XPLJ4Y5nef5XC6n8zx/UMjpPM+HWzmd5/kYK6fzCgdxEhdxE434ueVzrpzOK4y6NHIkr3AQJ3ERN9GITjzES6Sb0c3oZnQzumXP52O3HNQrdGIeEP7bS4zG7PmHgziJi7iJRnQi3Zxu2fP5iC6/165wECdxETfxc8snWjnqV3iIl/i55RO4HPUrHMTPLR/15KifR15cmQQP0+0kOjHdspzMh4fRmPnwcBAncRE30YhOpFvQLdotv9eucBAncRE30YhOPMRLpNug26DboNug26DboNug26DboNug26TbpNuk26TbpNuk26TbpNuk26Tbotui26JbBkj+KJffa1doRCfmp8hMvMT+HMrZxcJBnMRF3EQj/q178ifW/K46fJLlaOL5jcRF3EQjOvEQb+OXBCcfJOS44TsPziN2HnH2/MNLjG+FrOzr+cJBnETu5qHb4W4e7ubhbh7u5uFuouezBvQ8cBK5m3d3DdeITqQbe97Z886ed/a8s+edPe/Bayd4JoNnMngm43YN0Wcyv3+usN0Oe/6w5w97/rDnD3v+sOfPr/ftoOcTx484iL1vOdxY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4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwG+GuCrAb4a4KsBvhrgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrCb6a4KsJvprgqwm+muCrQ98+7u+GyKFvH/e3QuTQt4/7e0By6NvH/Y0eOfTtt6//bs/D/tsff/rff/7rv/z5f/zln//jT//t/9yS/+u//vWf/vNf/u1fP5L/+f/+++O//I+//stf/vIv/88//vtf/+2f/vl//tdf//kf//Jv/3T/b3/a7v9zH47/vdgftfzD7Y/Lx+//vdxij/LH7X+b/MMff2rHL03vv4jefjn+2S1wuf1x/9/9p3L8lcz7X+nur36HaPef7g7r+KONhyuRP2Te/7Osf1Hlj7r/pOunJn+0/Sdzv/OPKvef+sp6G7cMjEe2yy3T1bNc7Y/Simf3llnb8zVO/vvpWep/1LrX5vZ3fltVXNst6zofnmtrf9SjQu6eq92Spv/wt7/97R/+9v8B","names":["mint"],"brillig_names":["assert_compatible_oracle_version_wrapper","discover_new_messages","random","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","get_random_bytes","get_random_bytes","get_sender_for_tags","increment_app_tagging_secret_index_as_sender_wrapper","get_app_tag_as_sender","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"process_message","hash":"10672892447339681016","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"message_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":17,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"message_context","type":{"kind":"struct","path":"aztec::messages::processing::message_context::MessageContext","fields":[{"name":"tx_hash","type":{"kind":"field"}},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"first_nullifier_in_tx","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"private"}],"return_type":null,"error_types":{"344423948968719440":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"361444214588792908":{"error_kind":"string","string":"attempt to multiply with overflow"},"992401946138144806":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"1998584279744703196":{"error_kind":"string","string":"attempt to subtract with overflow"},"3080037330898348111":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"4261968856572588300":{"error_kind":"string","string":"Value does not fit in field"},"4440399188109668273":{"error_kind":"string","string":"Input length must be a multiple of 32"},"7564993426627941149":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"7995966536718645961":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"8992688621799713766":{"error_kind":"string","string":"Invalid public keys hint for address"},"9791669845391776238":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"9885968605480832328":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"9921926525851912681":{"error_kind":"fmtstring","length":98,"item_types":[]},"10791800398362570014":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"11021520179822076911":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"12469291177396340830":{"error_kind":"string","string":"call to assert_max_bit_size"},"12913276134398371456":{"error_kind":"string","string":"push out of bounds"},"13450089406971132036":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"14067204867181196045":{"error_kind":"fmtstring","length":75,"item_types":[]},"14990209321349310352":{"error_kind":"string","string":"attempt to add with overflow"},"15764276373176857197":{"error_kind":"string","string":"Stack too deep"},"16431471497789672479":{"error_kind":"string","string":"Index out of bounds"},"16792019527863081935":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17154023812102399658":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17803644318014042523":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["process_message"],"brillig_names":["process_message"]},{"name":"sync_private_state","hash":"4114572773033305096","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"344423948968719440":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"361444214588792908":{"error_kind":"string","string":"attempt to multiply with overflow"},"992401946138144806":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"1998584279744703196":{"error_kind":"string","string":"attempt to subtract with overflow"},"3080037330898348111":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"4261968856572588300":{"error_kind":"string","string":"Value does not fit in field"},"4440399188109668273":{"error_kind":"string","string":"Input length must be a multiple of 32"},"7564993426627941149":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"7995966536718645961":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"8992688621799713766":{"error_kind":"string","string":"Invalid public keys hint for address"},"9791669845391776238":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"9885968605480832328":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"9921926525851912681":{"error_kind":"fmtstring","length":98,"item_types":[]},"10791800398362570014":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"11021520179822076911":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"12469291177396340830":{"error_kind":"string","string":"call to assert_max_bit_size"},"12913276134398371456":{"error_kind":"string","string":"push out of bounds"},"13450089406971132036":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"14067204867181196045":{"error_kind":"fmtstring","length":75,"item_types":[]},"14990209321349310352":{"error_kind":"string","string":"attempt to add with overflow"},"15764276373176857197":{"error_kind":"string","string":"Stack too deep"},"16431471497789672479":{"error_kind":"string","string":"Index out of bounds"},"16792019527863081935":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17154023812102399658":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17803644318014042523":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_private_state"],"brillig_names":["sync_private_state"]},{"name":"transfer","hash":"3172524039141363268","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"anchor_block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::abis::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::abis::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"sponge_blob_hash","type":{"kind":"field"}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"note_hash_read_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_read_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"key_validation_requests_and_generators","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hashes","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifiers","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"private_call_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_call_requests","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"private_logs","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_class_logs_hashes","type":{"kind":"struct","path":"aztec::protocol_types::utils::arrays::ClaimedLengthArray","fields":[{"name":"array","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"anchor_block_header","type":{"kind":"struct","path":"aztec::protocol_types::abis::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::abis::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::abis::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"sponge_blob_hash","type":{"kind":"field"}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"344423948968719440":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"361444214588792908":{"error_kind":"string","string":"attempt to multiply with overflow"},"992401946138144806":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"1998584279744703196":{"error_kind":"string","string":"attempt to subtract with overflow"},"3080037330898348111":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"4261968856572588300":{"error_kind":"string","string":"Value does not fit in field"},"4440399188109668273":{"error_kind":"string","string":"Input length must be a multiple of 32"},"5955197699778714817":{"error_kind":"string","string":"Wrong collapsed vec order"},"6565645037161677025":{"error_kind":"fmtstring","length":101,"item_types":[]},"7564993426627941149":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"7995966536718645961":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"8754864405609694316":{"error_kind":"string","string":"Wrong collapsed vec content"},"8992688621799713766":{"error_kind":"string","string":"Invalid public keys hint for address"},"9460929337190338452":{"error_kind":"string","string":"Note contract address mismatch."},"9791669845391776238":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"9885968605480832328":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"9921926525851912681":{"error_kind":"fmtstring","length":98,"item_types":[]},"10791800398362570014":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"10835759466430049078":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"11021520179822076911":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"12236415031589006904":{"error_kind":"string","string":"Obtained invalid key validation request"},"12469291177396340830":{"error_kind":"string","string":"call to assert_max_bit_size"},"12913276134398371456":{"error_kind":"string","string":"push out of bounds"},"13049348927268151465":{"error_kind":"string","string":"Dirty collapsed vec storage"},"13450089406971132036":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"13455385521185560676":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"13671158251341025138":{"error_kind":"string","string":"Got more notes than limit."},"14067204867181196045":{"error_kind":"fmtstring","length":75,"item_types":[]},"14990209321349310352":{"error_kind":"string","string":"attempt to add with overflow"},"15764276373176857197":{"error_kind":"string","string":"Stack too deep"},"15835548349546956319":{"error_kind":"string","string":"Field failed to decompose into specified 32 limbs"},"16431471497789672479":{"error_kind":"string","string":"Index out of bounds"},"16792019527863081935":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17044658090447215604":{"error_kind":"fmtstring","length":17,"item_types":[]},"17154023812102399658":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"17803644318014042523":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"18160147074902047180":{"error_kind":"string","string":"Out of bounds index hint"},"18195344559583857168":{"error_kind":"string","string":"Wrong collapsed vec length"}}},"bytecode":"","debug_symbols":"","names":["transfer"],"brillig_names":["assert_compatible_oracle_version_wrapper","discover_new_messages","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","get_random_bytes","get_random_bytes","get_sender_for_tags","increment_app_tagging_secret_index_as_sender_wrapper","get_app_tag_as_sender","directive_invert","directive_integer_quotient","directive_to_radix"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"PrivateToken::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateToken::constructor_parameters","fields":[{"name":"initial_supply","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"PrivateToken::get_balance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateToken::get_balance_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"PrivateToken::mint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateToken::mint_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"PrivateToken::process_message_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateToken::process_message_parameters","fields":[{"name":"message_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":17,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"message_context","type":{"kind":"struct","path":"aztec::messages::processing::message_context::MessageContext","fields":[{"name":"tx_hash","type":{"kind":"field"}},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"first_nullifier_in_tx","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}}]},{"kind":"struct","path":"PrivateToken::sync_private_state_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateToken::sync_private_state_parameters","fields":[]}}]},{"kind":"struct","path":"PrivateToken::transfer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateToken::transfer_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"PrivateToken"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        if result {\n            for i in 0..self.len() {\n                result &= self[i].eq(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let self_len = self.len();\n        let other_len = other.len();\n        let min_len = if self_len < other_len {\n            self_len\n        } else {\n            other_len\n        };\n\n        let mut result = Ordering::equal();\n        for i in 0..min_len {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self_len.cmp(other_len)\n        }\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use super::{Eq, max, min, Ord};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n\n    #[test]\n    fn correctly_handles_unequal_length_slices() {\n        let slice_1 = &[0, 1, 2, 3];\n        let slice_2 = &[0, 1, 2];\n        assert(!slice_1.eq(slice_2));\n    }\n\n    #[test]\n    fn lexicographic_ordering_for_slices() {\n        assert(&[2_u32].cmp(&[1_u32, 1_u32, 1_u32]) == super::Ordering::greater());\n        assert(&[1_u32, 2_u32].cmp(&[1_u32, 2_u32, 3_u32]) == super::Ordering::less());\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0, \"cannot pop from an empty vector\");\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            let _ = vec.get(0);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_beyond_length() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            let _ = vec.get(3);\n        }\n\n        #[test]\n        fn get_works_within_bounds() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(2), 3);\n            assert_eq(vec.get(4), 5);\n        }\n\n        #[test]\n        fn get_unchecked_works() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(0), 1);\n            assert_eq(vec.get_unchecked(2), 3);\n        }\n\n        #[test]\n        fn get_unchecked_works_past_len() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(4), 0);\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_setting_beyond_length() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            vec.set(3, 4);\n        }\n\n        #[test]\n        fn set_unchecked_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(0, 10);\n            assert_eq(vec.get(0), 10);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn set_unchecked_operations_past_len() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(3, 40);\n            assert_eq(vec.get(3), 40);\n        }\n\n        #[test]\n        fn set_preserves_other_elements() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            vec.set(2, 30);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 30);\n            assert_eq(vec.get(3), 4);\n            assert_eq(vec.get(4), 5);\n        }\n    }\n\n    mod any {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn returns_false_if_predicate_not_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, false, false]);\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn returns_true_if_predicate_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, true, true]);\n            let result = vec.any(|value| value);\n\n            assert(result);\n        }\n\n        #[test]\n        fn returns_false_on_empty_boundedvec() {\n            let vec: BoundedVec<bool, 0> = BoundedVec::new();\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn any_with_complex_predicates() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            assert(vec.any(|x| x > 3));\n            assert(!vec.any(|x| x > 10));\n            assert(vec.any(|x| x % 2 == 0)); // has a even number\n            assert(vec.any(|x| x == 3)); // has a specific value\n        }\n\n        #[test]\n        fn any_with_partial_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            assert(vec.any(|x| x == 1));\n            assert(vec.any(|x| x == 2));\n            assert(!vec.any(|x| x == 3));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn map_with_conditional_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.map(|x| if x % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([1, 4, 3, 8]);\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn map_preserves_length() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|x| x * 2);\n\n            assert_eq(result.len(), vec.len());\n            assert_eq(result.max_len(), vec.max_len());\n        }\n\n        #[test]\n        fn map_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let result = vec.map(|x| x * 2);\n            assert_eq(result, vec);\n            assert_eq(result.len(), 0);\n            assert_eq(result.max_len(), 5);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn mapi_with_index_branching_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.mapi(|i, x| if i % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([2, 2, 6, 4]);\n            assert_eq(result, expected);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_each_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_each(|_| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_each_with_side_effects() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let mut seen = BoundedVec::<u32, 3>::new();\n            let seen_ref = &mut seen;\n            vec.for_each(|x| seen_ref.push(x));\n            assert_eq(seen, vec);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_eachi_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_eachi(|_, _| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_eachi_with_index_tracking() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([10, 20, 30]);\n            let mut indices = BoundedVec::<u32, 3>::new();\n            let indices_ref = &mut indices;\n            vec.for_eachi(|i, _| indices_ref.push(i));\n\n            let expected = BoundedVec::from_array([0, 1, 2]);\n            assert_eq(indices, expected);\n        }\n\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n\n        #[test]\n        fn from_array_preserves_order() {\n            let array = [5, 3, 1, 4, 2];\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array(array);\n            for i in 0..array.len() {\n                assert_eq(vec.get(i), array[i]);\n            }\n        }\n\n        #[test]\n        fn from_array_with_different_types() {\n            let bool_array = [true, false, true];\n            let bool_vec: BoundedVec<bool, 3> = BoundedVec::from_array(bool_array);\n            assert_eq(bool_vec.len(), 3);\n            assert_eq(bool_vec.get(0), true);\n            assert_eq(bool_vec.get(1), false);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n\n    mod push_pop {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn push_and_pop_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            assert_eq(vec.len(), 0);\n\n            vec.push(1);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 1);\n\n            vec.push(2);\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.get(1), 2);\n\n            let popped = vec.pop();\n            assert_eq(popped, 2);\n            assert_eq(vec.len(), 1);\n\n            let popped2 = vec.pop();\n            assert_eq(popped2, 1);\n            assert_eq(vec.len(), 0);\n        }\n\n        #[test(should_fail_with = \"push out of bounds\")]\n        fn push_to_full_vector() {\n            let mut vec: BoundedVec<u32, 2> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n            vec.push(3); // should panic\n        }\n\n        #[test(should_fail_with = \"cannot pop from an empty vector\")]\n        fn pop_from_empty_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let _ = vec.pop(); // should panic\n        }\n\n        #[test]\n        fn push_pop_cycle() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n\n            // push to full\n            vec.push(1);\n            vec.push(2);\n            vec.push(3);\n            assert_eq(vec.len(), 3);\n\n            // pop all\n            assert_eq(vec.pop(), 3);\n            assert_eq(vec.pop(), 2);\n            assert_eq(vec.pop(), 1);\n            assert_eq(vec.len(), 0);\n\n            // push again\n            vec.push(4);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 4);\n        }\n    }\n\n    mod extend {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn extend_from_array() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_slice() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_bounded_vec() {\n            let mut vec1: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut vec2: BoundedVec<u32, 3> = BoundedVec::new();\n\n            vec1.push(1);\n            vec2.push(2);\n            vec2.push(3);\n\n            vec1.extend_from_bounded_vec(vec2);\n\n            assert_eq(vec1.len(), 3);\n            assert_eq(vec1.get(0), 1);\n            assert_eq(vec1.get(1), 2);\n            assert_eq(vec1.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"extend_from_array out of bounds\")]\n        fn extend_array_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3, 4]); // should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_slice out of bounds\")]\n        fn extend_slice_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3, 4]); // S]should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_bounded_vec out of bounds\")]\n        fn extend_bounded_vec_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            let other: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            vec.extend_from_bounded_vec(other); // should panic\n        }\n\n        #[test]\n        fn extend_with_empty_collections() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let original_len = vec.len();\n\n            vec.extend_from_array([]);\n            assert_eq(vec.len(), original_len);\n\n            vec.extend_from_slice(&[]);\n            assert_eq(vec.len(), original_len);\n\n            let empty: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.extend_from_bounded_vec(empty);\n            assert_eq(vec.len(), original_len);\n        }\n    }\n\n    mod storage {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn storage_consistency() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            // test initial storage state\n            assert_eq(vec.storage(), [0, 0, 0, 0, 0]);\n\n            vec.push(1);\n            vec.push(2);\n\n            // test storage after modifications\n            assert_eq(vec.storage(), [1, 2, 0, 0, 0]);\n\n            // storage doesn't change length\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.max_len(), 5);\n        }\n\n        #[test]\n        fn storage_after_pop() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n\n            let _ = vec.pop();\n            // after pop, the last element should be zeroed\n            assert_eq(vec.storage(), [1, 2, 0]);\n            assert_eq(vec.len(), 2);\n        }\n\n        #[test]\n        fn vector_immutable() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let storage = vec.storage();\n\n            assert_eq(storage, [1, 2, 3]);\n\n            // Verify that the original vector is unchanged\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u16 {\n    fn from(value: u8) -> u16 {\n        value as u16\n    }\n}\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u16> for u32 {\n    fn from(value: u16) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u16> for u64 {\n    fn from(value: u16) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u16> for u128 {\n    fn from(value: u16) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u16> for Field {\n    fn from(value: u16) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i16 {\n    fn from(value: i8) -> i16 {\n        value as i16\n    }\n}\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i16> for i32 {\n    fn from(value: i16) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i16> for i64 {\n    fn from(value: i16) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u16 {\n    fn from(value: bool) -> u16 {\n        value as u16\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for u128 {\n    fn from(value: bool) -> u128 {\n        value as u128\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i16 {\n    fn from(value: bool) -> i16 {\n        value as i16\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n\n    let u_types =\n        [quote { bool }, quote { u8 }, quote { u16 }, quote { u32 }, quote { u64 }, quote { u128 }];\n\n    for type2 in u_types {\n        let body = quote { self as Field };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<Field> for $type2 {\n                    fn as_(self) -> Field {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    for type1 in u_types {\n        let body = if type1 == quote { bool } {\n            quote { self != 0 }\n        } else {\n            quote { self as $type1 }\n        };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<$type1> for Field {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n\n    #[test]\n    fn check_decompose_edge_cases() {\n        assert_eq(decompose(0), (0, 0));\n        assert_eq(decompose(TWO_POW_128 - 1), (TWO_POW_128 - 1, 0));\n        assert_eq(decompose(TWO_POW_128 + 1), (1, 1));\n        assert_eq(decompose(TWO_POW_128 * 2), (0, 2));\n        assert_eq(decompose(TWO_POW_128 * 2 + 0x1234567890), (0x1234567890, 2));\n    }\n\n    #[test]\n    fn check_decompose_large_values() {\n        let large_field = 0xffffffffffffffff;\n        let (lo, hi) = decompose(large_field);\n        assert_eq(large_field, lo + TWO_POW_128 * hi);\n\n        let large_value = large_field - TWO_POW_128;\n        let (lo2, hi2) = decompose(large_value);\n        assert_eq(large_value, lo2 + TWO_POW_128 * hi2);\n    }\n\n    #[test]\n    fn check_lt_comprehensive() {\n        assert(lt(0, 1));\n        assert(!lt(1, 0));\n        assert(!lt(0, 0));\n        assert(!lt(42, 42));\n\n        assert(lt(TWO_POW_128 - 1, TWO_POW_128));\n        assert(!lt(TWO_POW_128, TWO_POW_128 - 1));\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // Updated test to account for Brillig restriction that radix must be greater than 2\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_brillig_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 1;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n\n    #[test]\n    unconstrained fn test_large_field_values_unconstrained() {\n        let large_field = 0xffffffffffffffff;\n\n        let bits: [u1; 64] = large_field.to_le_bits();\n        assert_eq(bits[0], 1);\n\n        let bytes: [u8; 8] = large_field.to_le_bytes();\n        assert_eq(Field::from_le_bytes::<8>(bytes), large_field);\n\n        let radix_bytes: [u8; 8] = large_field.to_le_radix(256);\n        assert_eq(Field::from_le_bytes::<8>(radix_bytes), large_field);\n    }\n\n    #[test]\n    fn test_large_field_values() {\n        let large_val = 0xffffffffffffffff;\n\n        let bits: [u1; 64] = large_val.to_le_bits();\n        assert_eq(bits[0], 1);\n\n        let bytes: [u8; 8] = large_val.to_le_bytes();\n        assert_eq(Field::from_le_bytes::<8>(bytes), large_val);\n\n        let radix_bytes: [u8; 8] = large_val.to_le_radix(256);\n        assert_eq(Field::from_le_bytes::<8>(radix_bytes), large_val);\n    }\n\n    #[test]\n    fn test_decomposition_edge_cases() {\n        let zero_bits: [u1; 8] = 0.to_le_bits();\n        assert_eq(zero_bits, [0; 8]);\n\n        let zero_bytes: [u8; 8] = 0.to_le_bytes();\n        assert_eq(zero_bytes, [0; 8]);\n\n        let one_bits: [u1; 8] = 1.to_le_bits();\n        let expected: [u1; 8] = [1, 0, 0, 0, 0, 0, 0, 0];\n        assert_eq(one_bits, expected);\n\n        let pow2_bits: [u1; 8] = 4.to_le_bits();\n        let expected: [u1; 8] = [0, 0, 1, 0, 0, 0, 0, 0];\n        assert_eq(pow2_bits, expected);\n    }\n\n    #[test]\n    fn test_pow_32() {\n        assert_eq(2.pow_32(3), 8);\n        assert_eq(3.pow_32(2), 9);\n        assert_eq(5.pow_32(0), 1);\n        assert_eq(7.pow_32(1), 7);\n\n        assert_eq(2.pow_32(10), 1024);\n\n        assert_eq(0.pow_32(5), 0);\n        assert_eq(0.pow_32(0), 1);\n\n        assert_eq(1.pow_32(100), 1);\n    }\n\n    #[test]\n    fn test_sgn0() {\n        assert_eq(0.sgn0(), 0);\n        assert_eq(2.sgn0(), 0);\n        assert_eq(4.sgn0(), 0);\n        assert_eq(100.sgn0(), 0);\n\n        assert_eq(1.sgn0(), 1);\n        assert_eq(3.sgn0(), 1);\n        assert_eq(5.sgn0(), 1);\n        assert_eq(101.sgn0(), 1);\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 8 limbs\")]\n    fn test_bit_decomposition_overflow() {\n        // 8 bits can't represent large field values\n        let large_val = 0x1000000000000000;\n        let _: [u1; 8] = large_val.to_le_bits();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 4 limbs\")]\n    fn test_byte_decomposition_overflow() {\n        // 4 bytes can't represent large field values\n        let large_val = 0x1000000000000000;\n        let _: [u8; 4] = large_val.to_le_bytes();\n    }\n\n}\n","path":"std/field/mod.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"// docs:start:private_token_contract\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract PrivateToken {\n    use dep::aztec::macros::{functions::{initializer, private, utility}, storage::storage};\n    use dep::aztec::{protocol_types::address::AztecAddress, state_vars::Map};\n    use dep::easy_private_state::EasyPrivateUint;\n\n    #[storage]\n    struct Storage<Context> {\n        balances: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n\n    /**\n     * initialize the contract's initial state variables.\n     */\n    #[private]\n    #[initializer]\n    fn constructor(initial_supply: u64, owner: AztecAddress) {\n        let balances = storage.balances;\n\n        balances.at(owner).add(initial_supply, owner);\n    }\n\n    // Mints `amount` of tokens to `owner`.\n    #[private]\n    fn mint(amount: u64, owner: AztecAddress) {\n        let balances = storage.balances;\n\n        balances.at(owner).add(amount, owner);\n    }\n\n    // Transfers `amount` of tokens from `sender` to a `recipient`.\n    #[private]\n    fn transfer(amount: u64, sender: AztecAddress, recipient: AztecAddress) {\n        let balances = storage.balances;\n\n        balances.at(sender).sub(amount, sender);\n        balances.at(recipient).add(amount, recipient);\n    }\n\n    // Helper function to get the balance of a user.\n    #[utility]\n    unconstrained fn get_balance(owner: AztecAddress) -> Field {\n        storage.balances.at(owner).get_value()\n    }\n}\n// docs:end:private_token_contract\n","path":"/Users/jli/Desktop/noir-lang/aztec-contracts/contract-benchmarks/private_token_contract/src/main.nr"},"60":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T)\n    where\n        T: Serialize,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T\n    where\n        T: Deserialize,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n\n    global SLOT: Field = 1230;\n\n    #[test]\n    unconstrained fn empty_array() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            let _: Field = array.get(0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            assert_eq(array.len(), 1);\n            assert_eq(array.get(0), 5);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            let _ = array.get(1);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(5);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            assert_eq(array.len(), 3);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 8);\n            assert_eq(array.get(2), 9);\n\n            array.remove(1);\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 9);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            array.remove(1);\n            array.remove(1);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n            // we do not care about the order in which each tuple was passed to the closure.\n            let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n            array.for_each(|index, value| { called_with.push((index, value)); });\n\n            assert_eq(called_with.len(), 3);\n            assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n            assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n            assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| {\n                if index == 1 {\n                    array.remove(index);\n                }\n            });\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 4);\n            assert_eq(array.get(1), 6);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all_no_copy() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We test that the utilityCopyCapsule was never called, which is the expensive operation we want to avoid.\n            let mock = std::test::OracleMock::mock(\"utilityCopyCapsule\");\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(mock.times_called(), 0);\n        });\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"68":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        logs::notify_created_contract_class_log,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        block_header::BlockHeader,\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, MAX_CONTRACT_CLASS_LOGS_PER_CALL,\n        MAX_ENQUEUED_CALLS_PER_CALL, MAX_INCLUDE_BY_TIMESTAMP_DURATION,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    hash::poseidon2_hash,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::{ClaimedLengthArray, trimmed_array_length_hint},\n};\n\n/// # PrivateContext\n///\n/// The **main interface** between a #[private] function and the Aztec blockchain.\n///\n/// An instance of the PrivateContext is initialized automatically at the outset\n/// of every private function, within the #[private] macro, so you'll never\n/// need to consciously instantiate this yourself.\n///\n/// The instance is always named `context`, and it is always be available within\n/// the body of every #[private] function in your smart contract.\n///\n/// > For those used to \"vanilla\" Noir, it might be jarring to have access to\n/// > `context` without seeing a declaration `let context = PrivateContext::new(...)`\n/// > within the body of your function. This is just a consequence of using\n/// > macros to tidy-up verbose boilerplate. You can use `nargo expand` to\n/// > expand all macros, if you dare.\n///\n/// Typical usage for a smart contract developer will be to call getter\n/// methods of the PrivateContext.\n///\n/// _Pushing_ data and requests to the context is mostly handled within\n/// aztec-nr's own functions, so typically a smart contract developer won't\n/// need to call any setter methods directly.\n///\n/// > Advanced users might occasionally wish to push data to the context\n/// > directly for lower-level control. If you find yourself doing this, please\n/// > open an issue on GitHub to describe your use case: it might be that\n/// > new functionality should be added to aztec-nr.\n///\n/// ## Responsibilities\n/// - Exposes contextual data to a private function:\n///   - Data relating to how this private function was called.\n///     - msg_sender\n///     - this_address - (the contract address of the private function being\n///                      executed)\n///     - See `CallContext` for more data.\n///   - Data relating to the transaction in which this private function is\n///     being executed.\n///     - chain_id\n///     - version\n///     - gas_settings\n/// - Provides state access:\n///   - Access to the \"Anchor block\" header.\n///     Recall, a private function cannot read from the \"current\" block header,\n///     but must read from some historical block header, because as soon as\n///     private function execution begins (asynchronously, on a user's device),\n///     the public state of the chain (the \"current state\") will have progressed\n///     forward. We call this reference the \"Anchor block\".\n///     See `BlockHeader`.\n///   - Enables consumption of L1->L2 messages.\n/// - Enables calls to functions of other smart contracts:\n///   - Private function calls\n///   - Enqueueing of public function call requests\n///     (Since public functions are executed at a later time, by a block\n///     proposer, we say they are \"enqueued\").\n/// - Writes data to the blockchain:\n///   - New notes\n///   - New nullifiers\n///   - Private logs (for sending encrypted note contents or encrypted events)\n///   - New L2->L1 messages.\n/// - Provides args to the private function (handled by the #[private] macro).\n/// - Returns the return values of this private function (handled by the\n///   #[private] macro).\n/// - Makes Key Validation Requests.\n///   - Private functions are not allowed to see master secret keys, because we\n///     do not trust them. They are instead given \"app-siloed\" secret keys with\n///     a claim that they relate to a master public key. They can then request\n///     validation of this claim, by making a \"key validation request\" to the\n///     protocol's kernel circuits (which _are_ allowed to see certain master\n///     secret keys).\n///\n/// ## Advanced Responsibilities\n///\n/// - Ultimately, the PrivateContext is responsible for constructing the\n///   PrivateCircuitPublicInputs of the private function being executed.\n///   All private functions on Aztec must have public inputs which adhere\n///   to the rigid layout of the PrivateCircuitPublicInputs, in order to be\n///   compatible with the protocol's kernel circuits.\n///   A well-known misnomer:\n///   - \"public inputs\" contain both inputs and outputs of this function.\n///     - By \"outputs\" we mean a lot more side-effects than just the\n///       \"return values\" of the function.\n///   - Most of the so-called \"public inputs\" are kept _private_, and never leak\n///     to the outside world, because they are 'swallowed' by the protocol's\n///     kernel circuits before the tx is sent to the network. Only the\n///     following are exposed to the outside world:\n///     - New note_hashes\n///     - New nullifiers\n///     - New private logs\n///     - New L2->L1 messages\n///     - New enqueued public function call requests\n///     All the above-listed arrays of side-effects can be padded by the\n///     user's wallet (through instructions to the kernel circuits, via the\n///     PXE) to obscure their true lengths.\n///\n/// ## Syntax Justification\n///\n/// Both user-defined functions _and_ most functions in aztec-nr need access to\n/// the PrivateContext instance to read/write data. This is why you'll see the\n/// arguably-ugly pervasiveness of the \"context\" throughout your smart contract\n/// and the aztec-nr library.\n/// For example, `&mut context` is prevalent. In some languages, you can access\n/// and mutate a global variable (such as a PrivateContext instance) from a\n/// function without polluting the function's parameters. With Noir, a function\n/// must explicitly pass control of a mutable variable to another function, by\n/// reference. Since many functions in aztec-nr need to be able to push new data\n/// to the PrivateContext, they need to be handed a mutable reference _to_ the\n/// context as a parameter.\n/// For example, `Context` is prevalent as a generic parameter, to give better\n/// type safety at compile time. Many `aztec-nr` functions don't make sense if\n/// they're called in a particular runtime (private, public or utility), and so\n/// are intentionally only implemented over certain\n/// [Private|Public|Utility]Context structs. This gives smart contract\n/// developers a much faster feedback loop if they're making a mistake, as an\n/// error will be thrown by the LSP or when they compile their contract.\n///\n#[derive(Eq)]\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: u64,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub anchor_block_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let max_allowed_include_by_timestamp = inputs.anchor_block_header.global_variables.timestamp\n            + MAX_INCLUDE_BY_TIMESTAMP_DURATION;\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: max_allowed_include_by_timestamp,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            anchor_block_header: inputs.anchor_block_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    /// Returns the contract address that initiated this function call.\n    ///\n    /// This is similar to `msg.sender` in Solidity (hence the name).\n    ///\n    /// Important Note: Since Aztec doesn't have a concept of an EoA (\n    /// Externally-owned Account), the msg_sender is \"undefined\" for the first\n    /// function call of every transaction. A value of `-1` is returned in such\n    /// cases.\n    /// The first function call of a tx is likely to be a call to the user's\n    /// account contract, so this quirk will most often be handled by account\n    /// contract developers.\n    ///\n    /// TODO(https://github.com/AztecProtocol/aztec-packages/issues/14025) - we\n    /// are considering making msg_sender: Option<AztecAddress>, since\n    /// a returned value of `Option:none` will be clearer to developers.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The address of the smart contract that called\n    ///   this function (be it an app contract or a user's account contract).\n    ///   Returns `-1` for the first function call of the tx.\n    ///\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    /// Returns the contract address of the current function being executed.\n    ///\n    /// This is equivalent to `address(this)` in Solidity (hence the name).\n    /// Use this to identify the current contract's address, commonly needed for\n    /// access control or when interacting with other contracts.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The contract address of the current function being\n    ///                    executed.\n    ///\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    /// Returns the chain ID of the current network.\n    ///\n    /// This is similar to `block.chainid` in Solidity. Returns the unique\n    /// identifier for the blockchain network this transaction is executing on.\n    ///\n    /// Helps prevent cross-chain replay attacks. Useful if implementing\n    /// multi-chain contract logic.\n    ///\n    /// # Returns\n    /// * `Field` - The chain ID as a field element\n    ///\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    /// Returns the Aztec protocol version that this transaction is executing\n    /// under. Different versions may have different rules, opcodes, or\n    /// cryptographic primitives.\n    ///\n    /// This is similar to how Ethereum has different EVM versions.\n    ///\n    /// Useful for forward/backward compatibility checks\n    ///\n    /// Not to be confused with contract versions; this is the protocol version.\n    ///\n    /// # Returns\n    /// * `Field` - The protocol version as a field element\n    ///\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    /// Returns the gas settings for the current transaction.\n    ///\n    /// This provides information about gas limits and pricing for the\n    /// transaction, similar to `tx.gasprice` and gas limits in Ethereum.\n    /// However, Aztec has a more sophisticated gas model with separate\n    /// accounting for L2 computation and data availability (DA) costs.\n    ///\n    /// # Returns\n    /// * `GasSettings` - Struct containing gas limits and fee information\n    ///\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    /// Returns the function selector of the currently executing function.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to access this.\n    ///\n    /// This is similar to `msg.sig` in Solidity, which returns the first 4\n    /// bytes of the function signature. In Aztec, the selector uniquely\n    /// identifies which function within the contract is being called.\n    ///\n    /// # Returns\n    /// * `FunctionSelector` - The 4-byte function identifier\n    ///\n    /// # Advanced\n    /// Only #[private] functions have a function selector as a protocol-\n    /// enshrined concept. The function selectors of private functions are\n    /// baked into the preimage of the contract address, and are used by the\n    /// protocol's kernel circuits to identify each private function and ensure\n    /// the correct one is being executed.\n    ///\n    /// Used internally for function dispatch and call verification.\n    ///\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    /// Returns the hash of the arguments passed to the current function.\n    ///\n    /// Very low-level function: You shouldn't need to call this. The #[private]\n    /// macro calls this, and it makes the arguments neatly available to the\n    /// body of your private function.\n    ///\n    /// # Returns\n    /// * `Field` - Hash of the function arguments\n    ///\n    /// # Advanced\n    /// * Arguments are hashed to reduce proof size and verification time\n    /// * Enables efficient argument passing in recursive function calls\n    /// * The hash can be used to retrieve the original arguments from the PXE.\n    ///\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    /// Pushes a new note_hash to the Aztec blockchain's global Note Hash Tree\n    /// (a state tree).\n    ///\n    /// A note_hash is a commitment to a piece of private state.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note hashes.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The new note_hash.\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// note_hash into the protocol's \"note hash tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `note_hash` with the contract address of this function,\n    ///   to yield a `siloed_note_hash`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure uniqueness of the `siloed_note_hash`, to prevent Faerie-Gold\n    ///   attacks, by hashing the `siloed_note_hash` with a unique value, to\n    ///   yield a `unique_siloed_note_hash` (see the protocol spec for more).\n    ///\n    /// In addition to calling this function, aztec-nr provides the contents\n    /// of the newly-created note to the PXE, via the `notify_created_note`\n    /// oracle.\n    ///\n    /// > Advanced users might occasionally wish to push data to the context\n    /// > directly for lower-level control. If you find yourself doing this,\n    /// > please open an issue on GitHub to describe your use case: it might be\n    /// > that new functionality should be added to aztec-nr.\n    ///\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    /// Pushes a new nullifier to the Aztec blockchain's global Nullifier Tree\n    /// (a state tree).\n    ///\n    /// See also: `push_nullifier_for_note_hash`.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// A nullifier can only be emitted once. Duplicate nullifier insertions are\n    /// rejected by the protocol.\n    ///\n    /// Generally, a nullifier is emitted to prevent an action from happening\n    /// more than once, in such a way that the action cannot be linked (by an\n    /// observer of the blockchain) to any earlier transactions.\n    ///\n    /// I.e. a nullifier is a random-looking, but deterministic record of a\n    /// private, one-time action, which does not leak what action has been\n    /// taken, and which preserves the property of \"tx unlinkability\".\n    ///\n    /// Usually, a nullifier will be emitted to \"spend\" a note (a piece of\n    /// private state), without revealing which specific note is being spent.\n    ///\n    /// (Important: in such cases, use the below `push_nullifier_for_note_hash`).\n    ///\n    /// Sometimes, a nullifier might be emitted completely unrelated to any\n    /// notes. Examples include initialization of a new contract; initialization\n    /// of a PrivateMutable, or signalling in Semaphore-like applications.\n    /// This `push_nullifier` function serves such use cases.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// nullifier into the protocol's \"nullifier tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `nullifier` with the contract address of this function,\n    ///   to yield a `siloed_nullifier`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure the `siloed_nullifier` is unique (the nullifier tree is an\n    ///   indexed merkle tree which supports efficient non-membership proofs).\n    ///\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    /// Pushes a nullifier that corresponds to a specific note hash.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// This is a specialized version of `push_nullifier` that links a nullifier\n    /// to the specific note hash it's nullifying. This is the most common\n    /// usage pattern for nullifiers.\n    /// See `push_nullifier` for more explanation on nullifiers.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    /// * `nullified_note_hash` - The note hash of the note being nullified\n    ///\n    /// # Advanced\n    /// Important: usage of this function doesn't mean that the world will _see_\n    /// that this nullifier relates to the given nullified_note_hash (as that\n    /// would violate \"tx unlinkability\"); it simply informs the user's PXE\n    /// about the relationship (via `notify_nullified_note`). The PXE can then\n    /// use this information to feed hints to the kernel circuits for\n    /// \"squashing\" purposes: If a note is nullified during the same tx which\n    /// created it, we can \"squash\" (delete) the note and nullifier (and any\n    /// private logs associated with the note), to save on data emission costs.\n    ///\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    /// Returns the anchor block header - the historical block header that this\n    /// private function is reading from.\n    ///\n    /// A private function CANNOT read from the \"current\" block header,\n    /// but must read from some older block header, because as soon as\n    /// private function execution begins (asynchronously, on a user's device),\n    /// the public state of the chain (the \"current state\") will have progressed\n    /// forward.\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The anchor block header.\n    ///\n    /// # Advanced\n    /// * All private functions of a tx read from the same anchor block header.\n    /// * The protocol asserts that the `include_by_timestamp` of every tx\n    ///   is at most 24 hours beyond the timestamp of the tx's chosen anchor\n    ///   block header. This enables the network's nodes to safely prune old txs\n    ///   from the mempool. Therefore, the chosen block header _must_ be one\n    ///   from within the last 24 hours.\n    ///\n    pub fn get_anchor_block_header(self) -> BlockHeader {\n        self.anchor_block_header\n    }\n\n    /// Returns the header of any historical block at or before the anchor\n    /// block.\n    ///\n    /// This enables private contracts to access information from even older\n    /// blocks than the anchor block header.\n    ///\n    /// Useful for time-based contract logic that needs to compare against\n    /// multiple historical points.\n    ///\n    /// # Arguments\n    /// * `block_number` - The block number to retrieve (must be <= anchor\n    ///                    block number)\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The header of the requested historical block\n    ///\n    /// # Advanced\n    /// This function uses an oracle to fetch block header data from the user's\n    /// PXE. Depending on how much blockchain data the user's PXE has been set\n    /// up to store, this might require a query from the PXE to another Aztec\n    /// node to get the data.\n    /// > This is generally true of all oracle getters (see `../oracle`).\n    ///\n    /// Each block header gets hashed and stored as a leaf in the protocol's\n    /// Archive Tree. In fact, the i-th block header gets stored at the i-th\n    /// leaf index of the Archive Tree. Behind the scenes, this\n    /// `get_block_header_at` function will add Archive Tree merkle-membership\n    /// constraints (~3k) to your smart contract function's circuit, to prove\n    /// existence of the block header in the Archive Tree.\n    ///\n    /// Note: we don't do any caching, so avoid making duplicate calls for the\n    /// same block header, because each call will add duplicate constraints.\n    ///\n    /// Calling this function is more expensive (constraint-wise) than getting\n    /// the anchor block header (via `get_block_header`). This is because the\n    /// anchor block's merkle membership proof is handled by Aztec's protocol\n    /// circuits, and is only performed once for the entire tx because all\n    /// private functions of a tx share a common anchor block header. Therefore,\n    /// the cost (constraint-wise) of calling `get_block_header` is effectively\n    /// free.\n    ///\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    /// Sets the hash of the return values for this private function.\n    ///\n    /// Very low-level function: this is called by the #[private] macro.\n    ///\n    /// # Arguments\n    /// * `returns_hasher` - A hasher containing the return values to hash\n    ///\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    /// Builds the PrivateCircuitPublicInputs for this private function, to\n    /// ensure compatibility with the protocol's kernel circuits.\n    ///\n    /// Very low-level function: This function is automatically called by the\n    /// #[private] macro.\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.note_hash_read_requests,\n            ),\n            nullifier_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.nullifier_read_requests,\n            ),\n            key_validation_requests_and_generators: ClaimedLengthArray::from_bounded_vec(\n                self.key_validation_requests_and_generators,\n            ),\n            note_hashes: ClaimedLengthArray::from_bounded_vec(self.note_hashes),\n            nullifiers: ClaimedLengthArray::from_bounded_vec(self.nullifiers),\n            private_call_requests: ClaimedLengthArray::from_bounded_vec(self.private_call_requests),\n            public_call_requests: ClaimedLengthArray::from_bounded_vec(self.public_call_requests),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: ClaimedLengthArray::from_bounded_vec(self.l2_to_l1_msgs),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: ClaimedLengthArray::from_bounded_vec(self.private_logs),\n            contract_class_logs_hashes: ClaimedLengthArray::from_bounded_vec(\n                self.contract_class_logs_hashes,\n            ),\n            anchor_block_header: self.anchor_block_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    /// Designates this contract as the fee payer for the transaction.\n    ///\n    /// Unlike Ethereum, where the transaction sender always pays fees, Aztec\n    /// allows any contract to voluntarily pay transaction fees. This enables\n    /// patterns like sponsored transactions or fee abstraction where users\n    /// don't need to hold fee-juice themselves. (Fee juice is a fee-paying\n    /// asset for Aztec).\n    ///\n    /// Only one contract per transaction can declare itself as the fee payer,\n    /// and it must have sufficient fee-juice balance (>= the gas limits\n    /// specified in the TxContext) by the time we reach the public setup phase\n    /// of the tx.\n    ///\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    /// Declares the end of the \"setup phase\" of this tx.\n    ///\n    /// Only one function per tx can declare the end of the setup phase.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase enables such a payment to\n    /// be made, because the setup phase _cannot revert_: a reverting function\n    /// within the setup phase would result in an invalid block which cannot\n    /// be proven. Any side-effects generated during that phase are guaranteed\n    /// to be inserted into Aztec's state trees (except for squashed notes &\n    /// nullifiers, of course).\n    ///\n    /// Even though the end of the setup phase is declared within a private\n    /// function, you might have noticed that _public_ functions can also\n    /// execute within the setup phase. This is because any public function\n    /// calls which were enqueued _within the setup phase_ by a private\n    /// function are considered part of the setup phase.\n    ///\n    /// # Advanced\n    /// * Sets the minimum revertible side effect counter of this tx to be the\n    /// PrivateContext's _current_ side effect counter.\n    ///\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    /// Sets a deadline (an \"include-by timestamp\") for when this transaction\n    /// must be included in a block.\n    ///\n    /// Other functions in this tx might call this setter with differing\n    /// values for the include-by timestamp. To ensure that all functions'\n    /// deadlines are met, the _minimum_ of all these include-by timestamps will\n    /// be exposed when this tx is submitted to the network.\n    ///\n    /// If the transaction is not included in a block by its include-by\n    /// timestamp, it becomes invalid and it will never be included.\n    ///\n    /// This expiry timestamp is publicly visible. See the \"Advanced\" section\n    /// for privacy concerns.\n    ///\n    /// # Arguments\n    /// * `include_by_timestamp` - Unix timestamp (seconds) deadline for inclusion.\n    ///                            The include-by timestamp of this tx will be\n    ///                            _at most_ the timestamp specified.\n    ///\n    /// # Advanced\n    /// * If multiple functions set differing `include_by_timestamp`s, the\n    ///   kernel circuits will set it to be the _minimum_ of the two. This\n    ///   ensures the tx expiry requirements of all functions in the tx are met.\n    /// * Rollup circuits will reject expired txs.\n    /// * The protocol enforces that all transactions must be included within\n    ///   24 hours of their chosen anchor block's timestamp, to enable safe\n    ///   mempool pruning.\n    /// * The DelayedPublicMutable design makes heavy use of this functionality,\n    ///   to enable private functions to read public state.\n    /// * A sophisticated Wallet should cleverly set an include-by timestamp\n    ///   to improve the privacy of the user and the network as a whole.\n    ///   For example, if a contract interaction sets include-by to some\n    ///   publicly-known value (e.g. the time when a contract upgrades), then\n    ///   the wallet might wish to set an even lower one to avoid revealing that\n    ///   this tx is interacting with said contract.\n    ///   Ideally, all wallets should standardise on an approach in order to\n    ///   provide users with a large anonymity set -- although the exact apprach\n    ///   will need to be discussed. Wallets that deviate from a standard might\n    ///   accidentally reveal which wallet each transaction originates from.\n    ///\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp = std::cmp::min(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    /// Makes a request to the protocol's kernel circuit to ensure a note_hash\n    /// actually exists.\n    ///\n    /// \"Read requests\" are used to prove that a note hash exists without\n    /// revealing which specific note was read.\n    ///\n    /// This can be used to prove existence of both settled notes (created in\n    /// prior transactions) and transient notes (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled note _at a specific block\n    /// number_, use `note_inclusion::prove_note_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note_hash read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The note hash to read and verify\n    ///\n    /// # Advanced\n    /// In \"traditional\" circuits for non-Aztec privacy applications, the merkle\n    /// membership proofs to check existence of a note are performed _within_\n    /// the application circuit.\n    ///\n    /// All Aztec private functions have access to the following constraint\n    /// optimisation:\n    /// In cases where the note being read was created earlier in the same tx,\n    /// the note wouldn't yet exist in the Note Hash Tree, so a hard-coded\n    /// merkle membership check which then gets ignored would be a waste of\n    /// constraints.\n    /// Instead, we can send read requests for all notes to the protocol's\n    /// kernel circuits, where we can conditionally assess which notes actually\n    /// need merkle membership proofs, and select an appropriately-sized\n    /// kernel circuit.\n    ///\n    /// For \"settled notes\" (which already existed in the Note Hash Tree of the\n    /// anchor block (i.e. before the tx began)), the kernel does a merkle\n    /// membership check.\n    ///\n    /// For \"pending notes\" (which were created earlier in _this_ tx), the\n    /// kernel will check that the note existed _before_ this read request was\n    /// made, by checking the side-effect counters of the note_hash and this\n    /// read request.\n    ///\n    /// This approach improves latency between writes and reads:\n    /// a function can read a note which was created earlier in the tx (rather\n    /// than performing the read in a later tx, after waiting for the earlier tx\n    /// to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    /// Requests to read a specific nullifier from the nullifier tree.\n    ///\n    /// Nullifier read requests are used to prove that a nullifier exists without\n    /// revealing which specific nullifier preimage was read.\n    ///\n    /// This can be used to prove existence of both settled nullifiers (created in\n    /// prior transactions) and transient nullifiers (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled nullifier _at a specific block\n    /// number_, use `nullifier_inclusion::prove_nullifier_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifier read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `nullifier` - The nullifier to read and verify\n    ///\n    /// # Advanced\n    /// This approach improves latency between writes and reads:\n    /// a function can read a nullifier which was created earlier in the tx\n    /// (rather than performing the read in a later tx, after waiting for the\n    /// earlier tx to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// Advanced function: Only needed if you're designing your own notes and/or\n    /// nullifiers.\n    ///\n    /// Contracts are not allowed to compute nullifiers for other contracts, as\n    /// that would let them read parts of their private state. Because of this,\n    /// a contract is only given an \"app-siloed secret key\", which is\n    /// constructed by hashing the user's master nullifier secret key with the\n    /// contract's address.\n    /// However, because contracts cannot be trusted with a user's master\n    /// nullifier secret key (because we don't know which contracts are honest\n    /// or malicious), the PXE refuses to provide any master secret keys to\n    /// any app smart contract function. This means app functions are unable to\n    /// prove that the derivation of an app-siloed nullifier secret key has been\n    /// computed correctly. Instead, an app function can request to the kernel\n    /// (via `request_nsk_app`) that it validates the siloed derivation, since\n    /// the kernel has been vetted to not leak any master secret keys.\n    ///\n    /// A common nullification scheme is to inject a nullifier secret key into\n    /// the preimage of a nullifier, to make the nullifier deterministic but\n    /// random-looking. This function enables that flow.\n    ///\n    /// # Arguments\n    /// * `npk_m_hash` - A hash of the master nullifier public key of the user\n    ///                  whose PXE is executing this function.\n    ///\n    /// # Returns\n    /// * The app-siloed nullifier secret key that corresponds to the given\n    ///   `npk_m_hash`.\n    ///\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// See `request_nsk_app` and `request_sk_app` for more info.\n    ///\n    /// The intention of the \"outgoing\" keypair is to provide a second secret\n    /// key for all of a user's outgoing activity (i.e. for notes that a user\n    /// creates, as opposed to notes that a user receives from others). The\n    /// separation of incoming and outgoing data was a distinction made by\n    /// zcash, with the intention of enabling a user to optionally share with a\n    /// 3rd party a controlled view of only incoming or outgoing notes.\n    /// Similar functionality of sharing select data can be achieved with\n    /// offchain zero-knowledge proofs. It is up to an app developer whether\n    /// they choose to make use of a user's outgoing keypair within their\n    /// application logic, or instead simply use the same keypair (the address\n    /// keypair (which is effectively the same as the \"incooming\" keypair)) for\n    /// all incoming & outgoing messages to a user.\n    ///\n    /// Currently, all of the exposed encryption functions in aztec-nr ignore\n    /// the outgoing viewing keys, and instead encrypt all note logs and event\n    /// logs to a user's address public key.\n    ///\n    /// # Arguments\n    /// * `ovpk_m_hash` - Hash of the outgoing viewing public key master\n    ///\n    /// # Returns\n    /// * The application-specific outgoing viewing secret key\n    ///\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    /// Pushes a Key Validation Request to the kernel.\n    ///\n    /// Private functions are not allowed to see a user's master secret keys,\n    /// because we do not trust them. They are instead given \"app-siloed\" secret\n    /// keys with a claim that they relate to a master public key.\n    /// They can then request validation of this claim, by making a \"key\n    /// validation request\" to the protocol's kernel circuits (which _are_\n    /// allowed to see certain master secret keys).\n    ///\n    /// When a Key Validation Request tuple of (sk_app, Pk_m, app_address) is\n    /// submitted to the kernel, it will perform the following derivations\n    /// to validate the relationship between the claimed sk_app and the user's\n    /// Pk_m:\n    ///\n    ///       (sk_m) ----> * G ----> Pk_m\n    ///         |                     |\n    ///         v                       We use the kernel to prove this\n    ///  h(sk_m, app_address)         | sk_app-Pk_m relationship, because app\n    ///         |                       circuits must not be trusted to see sk_m.\n    ///         v                     |\n    ///      sk_app - -  - - - - - - -\n    ///\n    /// The function is named \"request_\" instead of \"get_\" to remind the user\n    /// that a Key Validation Request will be emitted to the kernel.\n    ///\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    /// Sends an \"L2 -> L1 message\" from this function (Aztec, L2) to a smart\n    /// contract on Ethereum (L1). L1 contracts which are designed to\n    /// send/receive messages to/from Aztec are called \"Portal Contracts\".\n    ///\n    /// Common use cases include withdrawals, cross-chain asset transfers, and\n    /// triggering L1 actions based on L2 state changes.\n    ///\n    /// The message will be inserted into an Aztec \"Outbox\" contract on L1,\n    /// when this transaction's block is proposed to L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target portal contract. The message will need to be manually\n    /// consumed from the Outbox through a separate Ethereum transaction: a user\n    /// will need to call a function of the portal contract -- a function\n    /// specifically designed to make a call to the Outbox to consume the\n    /// message.\n    /// The message will only be available for consumption once the _epoch_\n    /// proof has been submitted. Given that there are multiple Aztec blocks\n    /// within an epoch, it might take some time for this epoch proof to be\n    /// submitted -- especially if the block was near the start of an epoch.\n    ///\n    /// # Arguments\n    /// * `recipient` - Ethereum address that will receive the message\n    /// * `content` - Message content (32 bytes as a Field element).\n    ///               This content has a very specific layout.\n    /// docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    /// Consumes a message sent from Ethereum (L1) to Aztec (L2).\n    ///\n    /// Common use cases include token bridging, cross-chain governance, and\n    /// triggering L2 actions based on L1 events.\n    ///\n    /// Use this function if you only want the message to ever be \"referred to\"\n    /// once. Once consumed using this method, the message cannot be consumed\n    /// again, because a nullifier is emitted.\n    /// If your use case wants for the message to be read unlimited times, then\n    /// you can always read any historic message from the L1-to-L2 messages tree;\n    /// messages never technically get deleted from that tree.\n    ///\n    /// The message will first be inserted into an Aztec \"Inbox\" smart contract\n    /// on L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target L2 contract. The message will need to be manually\n    /// consumed by the target contract through a separate Aztec transaction.\n    /// The message will not be available for consumption immediately. Messages\n    /// get copied over from the L1 Inbox to L2 by the next Proposer in batches.\n    /// So you will need to wait until the messages are copied before you can\n    /// consume them.\n    ///\n    /// # Arguments\n    /// * `content` - The message content that was sent from L1\n    /// * `secret` - Secret value used for message privacy (if needed)\n    /// * `sender` - Ethereum address that sent the message\n    /// * `leaf_index` - Index of the message in the L1-to-L2 message tree\n    ///\n    /// # Advanced\n    /// Validates message existence in the L1-to-L2 message tree and nullifies\n    /// the message to prevent double-consumption.\n    ///\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.anchor_block_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    /// Emits a private log (an array of Fields) that will be published to an\n    /// Ethereum blob.\n    ///\n    /// Private logs are intended for the broadcasting of ciphertexts: that is,\n    /// encrypted events or encrypted note contents.\n    /// Since the data in the logs is meant to be _encrypted_, private_logs are\n    /// broadcast to publicly-visible Ethereum blobs.\n    /// The intended recipients of such encrypted messages can then discover and\n    /// decrypt these encrypted logs using their viewing secret key.\n    /// (See `../messages/discovery` for more details).\n    ///\n    /// Important note: This function DOES NOT _do_ any encryption of the input\n    /// `log` fields. This function blindly publishes whatever input `log` data\n    /// is fed into it, so the caller of this function should have already\n    /// performed the encryption, and the `log` should be the result of that\n    /// encryption.\n    ///\n    /// The protocol does not dictate what encryption scheme should be used:\n    /// a smart contract developer can choose whatever encryption scheme they\n    /// like.\n    /// Aztec-nr includes some off-the-shelf encryption libraries that\n    /// developers might wish to use, for convenience. These libraries not only\n    /// encrypt a plaintext (to produce a ciphertext); they also prepend the\n    /// ciphertext with a `tag` and `ephemeral public key` for easier message\n    /// discovery. This is a very dense topic, and we will be writing more\n    /// libraries and docs soon.\n    ///\n    /// > Currently, AES128 CBC encryption is the main scheme included in\n    /// > aztec.nr.\n    /// > We are currently making significant changes to the interfaces of the\n    /// > encryption library.\n    ///\n    /// In some niche use cases, an app might be tempted to publish\n    /// _un-encrypted_ data via a private log, because _public logs_ are not\n    /// available to private functions. Be warned that emitting public data via\n    /// private logs is strongly discouraged, and is considered a \"privacy\n    /// anti-pattern\", because it reveals identifiable information about _which_\n    /// function has been executed. A tx which leaks such information does not\n    /// contribute to the privacy set of the network.\n    ///\n    /// * Unlike `emit_raw_note_log`, this log is not tied to any specific note\n    ///\n    /// # Arguments\n    /// * `log` - The log data that will be publicly broadcast (so make sure\n    ///           it's already been encrypted before you call this function).\n    ///   Private logs are bounded in size (PRIVATE_LOG_SIZE_IN_FIELDS), to\n    ///   encourage all logs from all smart contracts look identical.\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields). Although the input log has a max size of\n    ///   PRIVATE_LOG_SIZE_IN_FIELDS, the latter values of the array might all\n    ///   be 0's for small logs. This `length` should reflect the trimmed length\n    ///   of the array. The protocol's kernel circuits can then append random\n    ///   fields as \"padding\" after the `length`, so that the logs of this\n    ///   smart contract look indistinguishable from (the same length as) the\n    ///   logs of all other applications. It's up to wallets how much padding\n    ///   to apply, so ideally all wallets should agree on standards for this.\n    ///\n    /// # Advanced\n    ///\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    // TODO: rename.\n    /// Emits a private log that is explicitly tied to a newly-emitted note_hash,\n    /// to convey to the kernel: \"this log relates to this note\".\n    ///\n    /// This linkage is important in case the note gets squashed (due to being\n    /// read later in this same tx), since we can then squash the log as well.\n    ///\n    /// See `emit_private_log` for more info about private log emission.\n    ///\n    /// # Arguments\n    /// * `log` - The log data as an array of Field elements\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields).\n    /// * `note_hash_counter` - The side-effect counter that was assigned to the\n    ///                         new note_hash when it was pushed to this\n    //                          `PrivateContext`.\n    ///\n    /// Important: If your application logic requires the log to always be\n    /// emitted regardless of note squashing, consider using `emit_private_log`\n    /// instead, or emitting additional events.\n    ///\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_contract_class_log<let N: u32>(&mut self, log: [Field; N]) {\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n\n        let log_to_emit: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS] =\n            log.concat([0; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS - N]);\n        // Note: the length is not always N, it is the number of fields we want to broadcast, omitting trailing zeros to save blob space.\n        // Safety: The below length is constrained in the base rollup, which will make sure that all the fields beyond length are zero.\n        let length = unsafe { trimmed_array_length_hint(log_to_emit) };\n        // We hash the entire padded log to ensure a user cannot pass a shorter length and so emit incorrect shorter bytecode.\n        let log_hash = poseidon2_hash(log_to_emit);\n        // Safety: the below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\n        unsafe {\n            notify_created_contract_class_log(contract_address, log_to_emit, length, counter);\n        }\n\n        self.contract_class_logs_hashes.push(LogHash { value: log_hash, length: length }.count(\n            counter,\n        ));\n    }\n\n    /// Calls a private function on another contract (or the same contract).\n    ///\n    /// Very low-level function.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    /// This enables contracts to interact with each other while maintaining\n    /// privacy. This \"composability\" of private contract functions is a key\n    /// feature of the Aztec network.\n    ///\n    /// If a user's transaction includes multiple private function calls, then\n    /// by the design of Aztec, the following information will remain private[1]:\n    /// - The function selectors and contract addresses of all private function\n    ///   calls will remain private, so an observer of the public mempool will\n    ///   not be able to look at a tx and deduce which private functions have\n    ///   been executed.\n    /// - The arguments and return values of all private function calls will\n    ///   remain private.\n    /// - The person who initiated the tx will remain private.\n    /// - The notes and nullifiers and private logs that are emitted by all\n    ///   private function calls will (if designed well) not leak any user\n    ///   secrets, nor leak which functions have been executed.\n    ///\n    /// [1] Caveats: Some of these privacy guarantees depend on how app\n    /// developers design their smart contracts. Some actions _can_ leak\n    /// information, such as:\n    /// - Calling an internal public function.\n    /// - Calling a public function and not setting msg_sender to Option::none\n    ///   (feature not built yet - see github).\n    /// - Calling any public function will always leak details about the nature\n    ///   of the transaction, so devs should be careful in their contract\n    ///   designs. If it can be done in a private function, then that will give\n    ///   the best privacy.\n    /// - Not padding the side-effects of a tx to some standardised, uniform\n    ///   size. The kernel circuits can take hints to pad side-effects, so a\n    ///   wallet should be able to request for a particular amount of padding.\n    ///   Wallets should ideally agree on some standard.\n    ///   - Padding should include:\n    ///     - Padding the lengths of note & nullifier arrays\n    ///     - Padding private logs with random fields, up to some standardised\n    ///       size.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Advanced\n    /// * The call is added to the private call stack and executed by kernel\n    ///   circuits after this function completes\n    /// * The called function can modify its own contract's private state\n    /// * Side effects from the called function are included in this transaction\n    /// * The call inherits the current transaction's context and gas limits\n    ///\n    pub fn call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    /// Makes a read-only call to a private function on another contract.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See `call_private_function` for more general info on private function\n    /// calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    /// Calls a private function that takes no arguments.\n    ///\n    /// This is a convenience function for calling private functions that don't\n    /// require any input parameters. It's equivalent to `call_private_function`\n    /// but slightly more efficient to use when no arguments are needed.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    /// Makes a read-only call to a private function which takes no arguments.\n    ///\n    /// This combines the optimisation of `call_private_function_no_args` with\n    /// the safety of `static_call_private_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    /// Low-level private function call.\n    ///\n    /// This is the underlying implementation used by all other private function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args_hash` - Pre-computed hash of the function arguments\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values\n    ///\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1; // TODO: call `next_counter` instead, for consistency\n        ReturnsHash::new(returns_hash)\n    }\n\n    /// Enqueues a call to a public function to be executed later.\n    ///\n    /// Unlike private functions which execute immediately on the user's device,\n    /// public function calls are \"enqueued\" and executed some time later by a\n    /// block proposer.\n    ///\n    /// This means a public function cannot return any values back to a private\n    /// function, because by the time the public function is being executed,\n    /// the private function which called it has already completed execution.\n    /// (In fact, the private function has been executed and proven, along with\n    /// all other private function calls of the user's tx. A single proof of the\n    /// tx has been submitted to the Aztec network, and some time later a\n    /// proposer has picked the tx up from the mempool and begun executing all\n    /// of the enqueued public functions).\n    ///\n    /// # Privacy warning\n    /// Enqueueing a public function call is an inherently leaky action.\n    /// Many interesting applications will require some interaction with public\n    /// state, but smart contract developers should try to use public function\n    /// calls sparingly, and carefully.\n    /// _Internal_ public function calls are especially leaky, because they\n    /// completely leak which private contract made the call.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See also `call_public_function` for more important information about\n    /// making private -> public function calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn static_call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Enqueues a call to a public function that takes no arguments.\n    ///\n    /// This is an optimisation for calling public functions that don't\n    /// take any input parameters. It's otherwise equivalent to\n    /// `call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function with no arguments.\n    ///\n    /// This combines the optimisation of `call_public_function_no_args` with\n    /// the safety of `static_call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Low-level public function call.\n    ///\n    /// This is the underlying implementation used by all other public function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use `call_public_function`\n    /// or `static_call_public_function` instead. This function is exposed for\n    /// performance optimization and advanced use cases.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    /// Enqueues a public function call, and designates it to be the teardown\n    /// function for this tx. Only one teardown function call can be made by a\n    /// tx.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase ensures the fee payer\n    /// has sufficient balance to pay the proposer their fees.\n    /// The teardown phase is primarily intended to: calculate exactly\n    /// how much the user owes, based on gas consumption, and refund the user\n    /// any change.\n    ///\n    /// Note: in some cases, the cost of refunding the user (i.e. DA costs of\n    /// tx side-effects) might exceed the refund amount. For app logic with\n    /// fairly stable and predictable gas consumption, a material refund amount\n    /// is unlikely. For app logic with unpredictable gas consumption, a\n    /// refund might be important to the user (e.g. if a heft function reverts\n    /// very early). Wallet/FPC/Paymaster developers should be mindful of this.\n    ///\n    pub fn set_public_teardown_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Low-level function to set the public teardown function.\n    ///\n    /// This is the underlying implementation for setting the teardown function\n    /// call that will execute at the end of the transaction. Instead of taking\n    /// raw arguments, it accepts a hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use\n    /// `set_public_teardown_function` instead.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the teardown\n    ///                        function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    /// Increments the side-effect counter.\n    ///\n    /// Very low-level function.\n    ///\n    /// # Advanced\n    ///\n    /// Every side-effect of a private function is given a \"side-effect counter\",\n    /// based on when it is created. This PrivateContext is in charge of\n    /// assigning the counters.\n    ///\n    /// The reason we have side-effect counters is complicated. Consider this\n    /// illustrative pseudocode of inter-contract function calls:\n    /// ```\n    /// contract A {\n    ///    let x = 5; // pseudocode for storage var x.\n    ///    fn a1 {\n    ///        read x; // value: 5, counter: 1.\n    ///        x = x + 1;\n    ///        write x; // value: 6, counter: 2.\n    ///\n    ///        B.b(); // start_counter: 2, end_counter: 4\n    ///\n    ///        read x; // value: 36, counter: 5.\n    ///        x = x + 1;\n    ///        write x; // value: 37, counter: 6.\n    ///    }\n    ///\n    ///    fn a2 {\n    ///        read x; // value: 6, counter: 3.\n    ///        x = x * x;\n    ///        write x; // value: 36, counter: 4.\n    ///    }\n    /// }\n    ///\n    /// contract B {\n    ///     fn b() {\n    ///         A.a2();\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// Suppose a1 is the first function called. The comments show the execution\n    /// counter of each side-effect, and what the new value of `x` is.\n    ///\n    /// These (private) functions are processed by Aztec's kernel circuits in an\n    /// order that is different from execution order:\n    /// All of A.a1 is proven before B.b is proven, before A.a2 is proven.\n    /// So when we're in the 2nd execution frame of A.a1 (after the call to\n    /// B.b), the circuit needs to justify why x went from being `6` to `36`.\n    /// But the circuit doesn't know why, and given the order of proving, the\n    /// kernel hasn't _seen_ a value of 36 get written yet.\n    /// The kernel needs to track big arrays of all side-effects of all\n    /// private functions in a tx. Then, as it recurses and processes B.b(), it\n    /// will eventually see a value of 36 get written.\n    ///\n    /// Suppose side-effect counters weren't exposed:\n    /// The kernel would only see this ordering (in order of proof verification):\n    /// [ A.a1.read, A.a1.write, A.a1.read, A.a1.write, A.a2.read, A.a2.write ]\n    /// [         5,          6,        36,         37,         6,         36 ]\n    /// The kernel wouldn't know _when_ B.b() was called within A.a1(), because\n    /// it can't see what's going on within an app circuit. So the kernel\n    /// wouldn't know that the ordering of reads and writes should actually be:\n    /// [ A.a1.read, A.a1.write, A.a2.read, A.a2.write, A.a1.read, A.a1.write ]\n    /// [         5,          6,        6,         36,         36,         37 ]\n    ///\n    /// And so, we introduced side-effect counters: every private function must\n    /// assign side-effect counters alongside every side-effect that it emits,\n    /// and also expose to the kernel the counters that it started and ended\n    /// with.\n    /// This gives the kernel enough information to arrange all side-effects in\n    /// the correct order.\n    /// It can then catch (for example) if a function tries to read state\n    /// before it has been written (e.g. if A.a2() maliciously tried to read\n    /// a value of x=37) (e.g. if A.a1() maliciously tried to read x=6).\n    ///\n    /// If a malicious app contract _lies_ and does not count correctly:\n    /// - It cannot lie about its start and end counters because the kernel\n    ///   will catch this.\n    /// - It _could_ lie about its intermediate counters:\n    ///   - 1. It could not increment its side-effects correctly\n    ///   - 2. It could label its side-effects with counters outside of its\n    ///        start and end counters' range.\n    ///   The kernel will catch 2.\n    ///   The kernel will not catch 1., but this would only cause corruption\n    ///   to the private state of the malicious contract, and not any other\n    ///   contracts (because a contract can only modify its own state). If\n    ///   a \"good\" contract is given _read access_ to a maliciously-counting\n    ///   contract (via an external getter function, or by reading historic\n    ///   state from the archive tree directly), and they then make state\n    ///   changes to their _own_ state accordingly, that could be dangerous.\n    ///   Developers should be mindful not to trust the claimed innards of\n    ///   external contracts unless they have audited/vetted the contracts\n    ///   including vetting the side-effect counter incrementation.\n    ///   This is a similar paradigm to Ethereum smart contract development:\n    ///   you must vet external contracts that your contract relies upon, and\n    ///   you must not make any presumptions about their claimed behaviour.\n    ///   (Hopefully if a contract imports a version of aztec-nr, we will get\n    ///   contract verification tooling that can validate the authenticity\n    ///   of the imported aztec-nr package, and hence infer that the side-\n    ///   effect counting will be correct, without having to re-audit such logic\n    ///   for every contract).\n    ///\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: 0,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            anchor_block_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"71":{"source":"use crate::oracle::{execution::get_utility_context, storage::storage_read};\nuse protocol_types::{address::AztecAddress, traits::Packable};\n\n// If you'll modify this struct don't forget to update utility_context.ts as well.\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        get_utility_context()\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        // We get a context with default contract address, and then we construct the final context with the provided\n        // contract address.\n        let default_context = get_utility_context();\n\n        Self {\n            block_number: default_context.block_number,\n            timestamp: default_context.timestamp,\n            contract_address,\n            version: default_context.version,\n            chain_id: default_context.chain_id,\n        }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        // We get a context with default contract address and block number, and then we construct the final context\n        // with the provided contract address and block number.\n        let default_context = get_utility_context();\n\n        Self {\n            block_number,\n            timestamp: default_context.timestamp,\n            contract_address,\n            version: default_context.version,\n            chain_id: default_context.chain_id,\n        }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T>(self, storage_slot: Field) -> T\n    where\n        T: Packable,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"74":{"source":"use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/event/event_selector.nr"},"76":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn public_bytecode_commitment() {\n    let mut input = [0; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS];\n    let len = 99;\n    for i in 1..len + 1 {\n        input[i] = i as Field;\n    }\n    input[0] = (len as Field) * 31;\n    let hash = compute_public_bytecode_commitment(input);\n    dep::std::println(hash);\n    assert(hash == 0x16d621c3387156ef53754679e7b2c9be8f0bceeb44aa59a74991df3b0b42a0bf);\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/hash.nr"},"91":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"92":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"93":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n\nmod test {\n    use super::get_public_keys;\n\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use protocol_types::traits::Serialize;\n    use std::test::OracleMock;\n\n    global KEY_ORACLE_RESPONSE_LENGTH: u32 = 13; // 12 fields for the keys, one field for the partial address\n\n    #[test(should_fail_with = \"Invalid public keys hint for address\")]\n    unconstrained fn get_public_keys_fails_with_bad_hint() {\n        let mut env = TestEnvironment::new();\n        let account = env.create_light_account();\n\n        // Instead of querying for some unknown account, which would result in the oracle erroring out, we mock a bad oracle\n        // response to check that the circuit properly checks the address derivation.\n        let mut random_keys_and_partial_address = [0; KEY_ORACLE_RESPONSE_LENGTH];\n        // We use randomly generated points on the curve, and a random partial address to ensure that\n        // this combination does not derive the address and we should see the assertion fail.\n        // npk_m\n        random_keys_and_partial_address[0] =\n            0x292364b852c6c6f01472951e76a39cbcf074591fd0e063a81965e7b51ad868a5;\n        random_keys_and_partial_address[1] =\n            0x0a687b46cdc9238f1c311f126aaaa4acbd7a737bff2efd7aeabdb8d805843a27;\n        random_keys_and_partial_address[2] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ivpk_m\n        random_keys_and_partial_address[3] =\n            0x173c5229a00c5425255680dd6edc27e278c48883991f348fe6985de43b4ec25f;\n        random_keys_and_partial_address[4] =\n            0x1698608e23b5f6c2f43c49a559108bb64e2247b8fc2da842296a416817f40b7f;\n        random_keys_and_partial_address[5] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ovpk_m\n        random_keys_and_partial_address[6] =\n            0x1bad2f7d1ad960a1bd0fe4d2c8d17f5ab4a86ef8b103e0a9e7f67ec0d3b4795e;\n        random_keys_and_partial_address[7] =\n            0x206db87110abbecc9fbaef2c865189d94ef2c106202f734ee4eba9257fd28bf1;\n        random_keys_and_partial_address[8] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // tpk_m\n        random_keys_and_partial_address[9] =\n            0x05e3bd9cfe6b47daa139613619cf7d7fd8bb0112b6f2908caa6d9b536ed948ed;\n        random_keys_and_partial_address[10] =\n            0x051066f877c9df47552d02e7dc32127ff4edefc8498e813bca1cbd3f5d1be429;\n        random_keys_and_partial_address[11] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // partial address\n        random_keys_and_partial_address[12] =\n            0x236703e2cb00a182e024e98e9f759231b556d25ff19f98896cebb69e9e678cc9;\n\n        let _ = OracleMock::mock(\"utilityGetPublicKeysAndPartialAddress\").returns(\n            random_keys_and_partial_address.serialize(),\n        );\n        let _ = get_public_keys(account);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"97":{"source":"use crate::macros::{\n    dispatch::generate_public_dispatch,\n    functions::{stub_registry, utils::check_each_fn_macroified},\n    notes::NOTES,\n    storage::STORAGE_LAYOUT_NAME,\n    utils::{get_trait_impl_method, module_has_storage},\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    // We generate `_compute_note_hash_and_nullifier`, `sync_private_state` and `process_message`\n    // functions only if they are not already implemented. If they are implemented we just insert empty\n    // quotes.\n    let contract_library_method_compute_note_hash_and_nullifier = if !m.functions().any(|f| {\n        f.name() == quote { _compute_note_hash_and_nullifier }\n    }) {\n        generate_contract_library_method_compute_note_hash_and_nullifier()\n    } else {\n        quote {}\n    };\n    let sync_private_state = if !m.functions().any(|f| f.name() == quote { sync_private_state }) {\n        generate_sync_private_state()\n    } else {\n        quote {}\n    };\n    let process_message = if !m.functions().any(|f| f.name() == quote { process_message }) {\n        generate_process_message()\n    } else {\n        quote {}\n    };\n    let public_dispatch = generate_public_dispatch(m);\n\n    quote {\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    if NOTES.len() > 0 {\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..NOTES.len() {\n            let typ = NOTES.get(i);\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret its raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = <$typ as $crate::protocol_types::traits::Packable>::N;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::messages::encoding::MESSAGE_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::process_message_ciphertext(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"103":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"106":{"source":"use crate::macros::{\n    functions::{\n        auth_registry::AUTHORIZE_ONCE_REGISTRY, call_interface_stubs::stub_fn, stub_registry,\n    },\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_authorize_once, fn_has_noinitcheck, get_fn_visibility,\n        is_fn_contract_library_method, is_fn_initializer, is_fn_internal, is_fn_private,\n        is_fn_public, is_fn_test, is_fn_utility, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse std::meta::{ctstring::AsCtString, type_of};\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n\n    let args_len_quote = if original_params.len() == 0 {\n        // If the function has no parameters, we set the args_len to 0.\n        quote { 0 }\n    } else {\n        // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n        original_params\n            .map(|(_, param_type): (Quoted, Type)| {\n                quote {\n            <$param_type as $crate::protocol_types::traits::Serialize>::N\n        }\n            })\n            .join(quote {+})\n    };\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len_quote] = dep::aztec::context::public_context::calldata_copy(1, $args_len_quote);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage(f.module()) {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Injects an authwit verification check of the form:\n/// ```\n///   if (!from.eq(context.msg_sender())) {\n///         assert_current_call_valid_authwit::<N>(&mut context, from);\n///     } else {\n///         assert(authwit_nonce, \"Invalid authwit nonce. When 'from' and 'msg_sender' are the same, authwit_nonce must be zero\");\n///     }\n/// ```\n/// where `from` and `authwit_nonce` are the names of the parameters that are expected to be present in the function definition.\n/// This check is injected by the `#[authorize_once(\"from_arg_name\", \"nonce_arg_name\")]`, which allows the user to define\n/// which parameters to use.\npub(crate) comptime fn create_authorize_once_check(f: FunctionDefinition) -> Quoted {\n    let maybe_authorize_once_args = AUTHORIZE_ONCE_REGISTRY.get(f);\n    let authorize_once_args = if maybe_authorize_once_args.is_some() {\n        maybe_authorize_once_args.unwrap()\n    } else {\n        // We need to for authorize_once to have already executed so that we can retrieve its params - this depends on\n        // the order in which the attributes are applied.\n        panic(\n            f\"Functions marked with #[authorize_once] must have the #[private] or #[public] attribute placed last\",\n        )\n    };\n\n    let (from_arg_name, nonce_arg_name) = authorize_once_args;\n    let name: Quoted = f.name();\n\n    let from_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{from_arg_name}\".quoted_contents());\n    let (from_arg_name_quoted, from_arg_type) = if from_arg_candidates.len() == 1 {\n        from_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {from_arg_name} parameter. Please specify which one to use in #[authorize_once(\\\"...\\\", \\\"authwit_nonce\\\")]\",\n        )\n    };\n    if from_arg_type\n        != quote { dep::protocol_types::address::aztec_address::AztecAddress }.as_type() {\n        panic(\n            f\"Argument {from_arg_name_quoted} in function {name} must be of type AztecAddress, but is of type {from_arg_type}\",\n        )\n    }\n\n    let nonce_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{nonce_arg_name}\".quoted_contents());\n    let (nonce_arg_name_quoted, nonce_arg_type) = if nonce_arg_candidates.len() == 1 {\n        nonce_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {nonce_arg_name}. Please specify which one to use in #[authorize_once(\\\"from\\\", \\\"...\\\")]\",\n        )\n    };\n    if nonce_arg_type != quote { Field }.as_type() {\n        panic(\n            f\"Argument {nonce_arg_name_quoted} in function {name} must be of type Field, but is of type {nonce_arg_type}\",\n        );\n    }\n\n    let nonce_check_quote = f\"{nonce_arg_name_quoted} == 0\".quoted_contents();\n\n    let fn_call = if is_fn_private(f) {\n        // At this point, the original args of the fn have already been altered by the macro\n        // to include PrivateContextInputs, so we need to adjust the args_len accordingly.\n        let args_len = f.parameters().len() - 1;\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit::<$args_len> }\n    } else {\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit_public }\n    };\n    let invalid_nonce_message = f\"Invalid authwit nonce. When '{from_arg_name}' and 'msg_sender' are the same, '{nonce_arg_name}' must be zero\"\n        .as_ctstring()\n        .as_quoted_str();\n    quote {         \n        if (!$from_arg_name_quoted.eq(context.msg_sender())) {\n            $fn_call(&mut context, $from_arg_name_quoted);\n        } else {\n            assert($nonce_check_quote, $invalid_nonce_message);\n        }\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"108":{"source":"use crate::note::note_getter_options::PropertySelector;\nuse std::{collections::bounded_vec::BoundedVec, meta::{ctstring::AsCtString, type_of}};\n\n/// Maximum number of note types within 1 contract.\ncomptime global MAX_NOTE_TYPES: u32 = 128;\n\n/// A BoundedVec containing all the note types within this contract.\npub comptime mut global NOTES: BoundedVec<Type, MAX_NOTE_TYPES> = BoundedVec::new();\n\ncomptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < MAX_NOTE_TYPES,\n        f\"A contract can contain at most {MAX_NOTE_TYPES} different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_type_impl(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let note_type_name: str<_> = f\"{name}\".as_ctstring().as_quoted_str!();\n    let max_note_packed_len = crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                // This static assertion ensures the note's packed length doesn't exceed the maximum allowed size.\n                // While this check would ideally live in the Packable trait implementation, we place it here since\n                // this function is always generated by our macros and the Packable trait implementation is not.\n                // Note: We set the note type name and max packed length as local variables because injecting them\n                // directly into the error message doesn't work.\n                let note_type_name = $note_type_name;\n                let max_note_packed_len: u32 = $max_note_packed_len; // Casting to u32 to avoid the value to be printed in hex.\n                let note_packed_len = <$typ as Packable>::N;\n                std::static_assert(note_packed_len <= $max_note_packed_len, f\"{note_type_name} has a packed length of {note_packed_len} fields, which exceeds the maximum allowed length of {max_note_packed_len} fields\");\n\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::traits::Packable::pack(self).concat( [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::context::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates the core note functionality for a struct:\n///\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - NoteHash trait implementation: Handles note hash and nullifier computation\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Have an `owner` field\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Generated Code\n///\n/// For detailed documentation on the generated implementations, see:\n/// - `generate_note_properties()`\n/// - `generate_note_type_impl()`\n/// - `generate_note_hash_trait_impl()`\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n\n    quote {\n        $note_properties\n        $note_type_impl\n        $note_hash_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// Unlike the `#[note]` macro, there is no requirement for an `owner` field.\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_type_id = get_next_note_type_id();\n    let note_properties = generate_note_properties(s);\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_type_impl\n    }\n}\n\n/// Asserts that the given note implements the `Packable` trait.\n///\n/// We require that notes have the `Packable` trait implemented because it is used when emitting a note in a log or as\n/// an offchain message.\ncomptime fn assert_has_packable(note: TypeDefinition) {\n    let packable_constraint =\n        quote { crate::protocol_types::traits::Packable }.as_trait_constraint();\n    let note_name = note.name();\n\n    assert(\n        note.as_type().implements(packable_constraint),\n        f\"{note_name} does not implement Packable trait. Either implement it manually or place #[derive(Packable)] on the note struct before #[note] macro invocation.\",\n    );\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    let note_name = note.name();\n\n    assert(\n        has_owner,\n        f\"{note_name} does not have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"109":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields = storage_layout_fields.push_back(\n            quote { pub $name: dep::aztec::state_vars::storage::Storable },\n        );\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::state_vars::storage::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"111":{"source":"use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{\n            private_notes::MAX_NOTE_PACKED_LEN, process_message::process_message_ciphertext,\n        },\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\npub type ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private logs are downloaded and inspected to find new private\n/// notes, partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Note that the state is synchronized up to the latest block synchronized by PXE. That should be close to the chain\n/// tip as block synchronization is performed before contract function simulation is done.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        process_message_ciphertext(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"112":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"113":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"114":{"source":"use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__EVENT_COMMITMENT,\n    hash::poseidon2_hash_with_separator_bounded_vec, traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr"},"115":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"116":{"source":"use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::{decode_message, MESSAGE_CIPHERTEXT_LEN, MESSAGE_PLAINTEXT_LEN},\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn process_message_ciphertext<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, MESSAGE_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    process_message_plaintext(\n        contract_address,\n        compute_note_hash_and_nullifier,\n        AES128::decrypt_log(message_ciphertext, message_context.recipient),\n        message_context,\n    );\n}\n\npub unconstrained fn process_message_plaintext<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_plaintext: BoundedVec<Field, MESSAGE_PLAINTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr"},"117":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::utils::array;\nuse protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN;\n\n// We reassign to the constant here to communicate the distinction between a log and a message. In Aztec.nr, unlike in\n// protocol circuits, we have a concept of a message that can be emitted either as a private log or as an offchain\n// message. Message is a piece of data that is to be eventually delivered to a contract via the `process_message(...)`\n// utility function function that is injected by the #[aztec] macro.\npub global MESSAGE_CIPHERTEXT_LEN: u32 = PRIVATE_LOG_CIPHERTEXT_LEN;\n\n// TODO(#12750): The global variables below should not be here as they are AES128 specific.\n// ciphertext_length (2) + 14 bytes pkcs#7 AES padding.\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 16;\n\npub global EPH_PK_X_SIZE_IN_FIELDS: u32 = 1;\npub global EPH_PK_SIGN_BYTE_SIZE_IN_BYTES: u32 = 1;\n\n// (17 - 1) * 31 - 16 - 1 = 479\nglobal MESSAGE_PLAINTEXT_SIZE_IN_BYTES: u32 = (MESSAGE_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS)\n    * 31\n    - HEADER_CIPHERTEXT_SIZE_IN_BYTES\n    - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES;\n// Each field of the original note log was serialized to 32 bytes. Below we convert the bytes back to fields.\n// 479 / 32 = 15\npub global MESSAGE_PLAINTEXT_LEN: u32 = MESSAGE_PLAINTEXT_SIZE_IN_BYTES / 32;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MESSAGE_PLAINTEXT_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MESSAGE_PLAINTEXT_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"118":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encoding::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, MESSAGE_CIPHERTEXT_LEN, MESSAGE_PLAINTEXT_LEN,\n        },\n        encryption::log_encryption::LogEncryption,\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\n/**\n * Computes N close-to-uniformly-random 256 bits from a given ECDH shared_secret.\n *\n * NEVER re-use the same iv and sym_key.\n * DO NOT call this function more than once with the same shared_secret.\n *\n * This function is only known to be safe if shared_secret is computed by combining a \n * random ephemeral key with an address point. See big comment within the body of the function.\n * See big comment within the body of the function.\n */\nfn extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [[u8; 32]; N] {\n    /*\n     * Unsafe because of https://eprint.iacr.org/2010/264.pdf Page 13, Lemma 2 (and the * two paragraphs below it).\n     *\n     * If you call this function, you need to be careful and aware of how the arg\n     * `shared_secret` has been derived.\n     *\n     * The paper says that the way you derive aes keys and IVs should be fine with poseidon2\n     * (modelled as a RO), as long as you _don't_ use Poseidon2 as a PRG to generate the * two exponents x & y which multiply to the shared secret S:\n     *\n     * S = [x*y]*G.\n     *\n     * (Otherwise, you would have to \"key\" poseidon2, i.e. generate a uniformly string K\n     * which can be public and compute Hash(x) as poseidon(K,x)).\n     * In that lemma, k would be 2*254=508, and m would be the number of points on the * grumpkin curve (which is close to r according to the Hasse bound).\n     *\n     * Our shared secret S is [esk * address_sk] * G, and the question is: * Can we compute hash(S) using poseidon2 instead of sha256?\n     *\n     * Well, esk is random and not generated with poseidon2, so that's good.\n     * What about address_sk?\n     * Well, address_sk = poseidon2(stuff) + ivsk, so there was some\n     * discussion about whether address_sk is independent of poseidon2.\n     * Given that ivsk is random and independent of poseidon2, the address_sk is also\n     * independent of poseidon2.\n     *\n     * Tl;dr: we believe it's safe to hash S = [esk * address_sk] * G using poseidon2,\n     * in order to derive a symmetric key.\n     *\n     * If you're calling this function for a differently-derived `shared_secret`, be\n     * careful.\n     *\n     */\n\n    /* The output of this function needs to be 32 random bytes.\n     * A single field won't give us 32 bytes of entropy.\n     * So we compute two \"random\" fields, by poseidon-hashing with two different\n     * generators.\n     * We then extract the last 16 (big endian) bytes of each \"random\" field.\n     * Note: we use to_be_bytes because it's slightly more efficient. But we have to\n     * be careful not to take bytes from the \"big end\", because the \"big\" byte is\n     * not uniformly random over the byte: it only has < 6 bits of randomness, because\n     * it's the big end of a 254-bit field element.\n     */\n\n    let mut all_bytes: [[u8; 32]; N] = std::mem::zeroed();\n    // We restrict N to be < 2^8, because of how we compute the domain separator\n    // from k below (where k <= N must be 8 bits). In practice, it's extremely\n    // unlikely that an app will want to compute >= 256 ciphertexts.\n    std::static_assert(N < 256, \"N too large\");\n    for k in 0..N {\n        // We augment the domain separator with the loop index, so that we can\n        // generate N lots of randomness.\n        let k_shift = (k as u16 << 8);\n        let separator_1 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY as u16;\n        let separator_2 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY_2 as u16;\n\n        let rand1: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_1);\n        let rand2: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_2);\n\n        let rand1_bytes: [u8; 32] = rand1.to_be_bytes();\n        let rand2_bytes: [u8; 32] = rand2.to_be_bytes();\n\n        let mut bytes: [u8; 32] = [0; 32];\n        for i in 0..16 {\n            // We take bytes from the \"little end\" of the be-bytes arrays:\n            let j = 32 - i - 1;\n            bytes[i] = rand1_bytes[j];\n            bytes[16 + i] = rand2_bytes[j];\n        }\n\n        all_bytes[k] = bytes;\n    }\n\n    all_bytes\n}\n\nfn derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits<let N: u32>(\n    many_random_256_bits: [[u8; 32]; N],\n) -> [([u8; 16], [u8; 16]); N] {\n    // Many (sym_key, iv) pairs:\n    let mut many_pairs: [([u8; 16], [u8; 16]); N] = std::mem::zeroed();\n    for k in 0..N {\n        let random_256_bits = many_random_256_bits[k];\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n        for i in 0..16 {\n            sym_key[i] = random_256_bits[i];\n            iv[i] = random_256_bits[i + 16];\n        }\n        many_pairs[k] = (sym_key, iv);\n    }\n\n    many_pairs\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [([u8; 16], [u8; 16]); N] {\n    let many_random_256_bits: [[u8; 32]; N] = extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe(\n        shared_secret,\n    );\n\n    derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits(many_random_256_bits)\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PlaintextLen: u32>(\n        plaintext: [Field; PlaintextLen],\n        recipient: AztecAddress,\n    ) -> [Field; MESSAGE_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        // It is safe to call the `unsafe` function here, because we know the `shared_secret`\n        // was derived using an AztecAddress (the recipient). See the block comment\n        // at the start of this unsafe target function for more info.\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, body_iv, body_sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        std::static_assert(\n            ciphertext_bytes.len() == 16 * (1 + (PlaintextLen * 32) / 16),\n            \"unexpected ciphertext length\",\n        );\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, header_iv, header_sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        std::static_assert(\n            header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n            \"unexpected ciphertext header length\",\n        );\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PlaintextLen * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PlaintextLen * 32>();\n\n        std::static_assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n        offset += log_bytes_padding_to_mult_31.len();\n\n        // Ideally we would be able to have a static assert where we check that the offset would be such that we've\n        // written to the entire log_bytes array, but we cannot since Noir does not treat the offset as a comptime\n        // value (despite the values that it goes through being known at each stage). We instead check that the\n        // computation used to obtain the offset computes the expected value (which we _can_ do in a static check), and\n        // then add a cheap runtime check to also validate that the offset matches this.\n        std::static_assert(\n            1\n                + header_ciphertext_bytes.len()\n                + ciphertext_bytes.len()\n                + log_bytes_padding_to_mult_31.len()\n                == log_bytes.len(),\n            \"unexpected log length\",\n        );\n        assert(offset == log_bytes.len(), \"unexpected encrypted log length\");\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; MESSAGE_CIPHERTEXT_LEN] = [0; MESSAGE_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..MESSAGE_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, MESSAGE_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, MESSAGE_PLAINTEXT_LEN> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, MESSAGE_CIPHERTEXT_LEN, MESSAGE_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n\n        // Derive symmetric keys:\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext =\n            aes128_decrypt_oracle(header_ciphertext_bvec, header_iv, header_sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (MESSAGE_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (MESSAGE_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, body_iv, body_sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::{encoding::MESSAGE_PLAINTEXT_LEN, encryption::log_encryption::LogEncryption},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let env = TestEnvironment::new();\n\n        // Log decryption requires oracles that are only available during private execution\n        env.private_context(|_| {\n            let plaintext = [1, 2, 3];\n\n            let recipient = AztecAddress::from_field(\n                0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n            );\n\n            // Mock random values for deterministic test\n            let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(eph_sk).times(1);\n\n            let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(randomness).times(1000000);\n\n            let _ = OracleMock::mock(\"utilityGetIndexedTaggingSecretAsSender\").returns(\n                IndexedTaggingSecret::deserialize([69420, 1337]),\n            );\n            let _ = OracleMock::mock(\"privateIncrementAppTaggingSecretIndexAsSender\").returns(());\n\n            // Encrypt the log\n            let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n            // Mock shared secret for deterministic test\n            let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n                EmbeddedCurveScalar::from_field(eph_sk),\n                recipient,\n            );\n            let _ = OracleMock::mock(\"utilityGetSharedSecret\").returns(shared_secret);\n\n            // Decrypt the log\n            let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n            // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n            // at compile time. For this reason we need to convert the original input to a BoundedVec.\n            let plaintext_bvec = BoundedVec::<Field, MESSAGE_PLAINTEXT_LEN>::from_array(plaintext);\n\n            // Verify decryption matches original plaintext\n            assert_eq(\n                decrypted,\n                plaintext_bvec,\n                \"Decrypted bytes should match original plaintext\",\n            );\n\n            // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n            // static methods of the struct).\n            let _ = AES128 {};\n        });\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"126":{"source":"use crate::oracle::notes::{\n    get_app_tag_as_sender, get_sender_for_tags, increment_app_tagging_secret_index_as_sender,\n};\nuse dep::protocol_types::address::AztecAddress;\n\n// TODO(#14565): Add constrained tagging\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe {\n        let sender = get_sender_for_tags().expect(\n            f\"Sender for tags is not set when emitting a private log. Set it by calling `set_sender_for_tags(...)`.\",\n        );\n        increment_app_tagging_secret_index_as_sender(sender, recipient);\n        get_app_tag_as_sender(sender, recipient)\n    };\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test(should_fail)]\n    unconstrained fn no_tag_sender() {\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles - note privateGetSenderForTags returns none\n        let _ = OracleMock::mock(\"privateGetSenderForTags\").returns(Option::<AztecAddress>::none());\n        let _ = OracleMock::mock(\"utilityGetIndexedTaggingSecretAsSender\").returns(\n            indexed_tagging_secret,\n        );\n        let _ = OracleMock::mock(\"privateIncrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let _ = prefix_with_tag(log_without_tag, recipient);\n    }\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"privateGetSenderForTags\").returns(Option::some(sender));\n        let _ = OracleMock::mock(\"utilityGetIndexedTaggingSecretAsSender\").returns(\n            indexed_tagging_secret,\n        );\n        let _ = OracleMock::mock(\"privateIncrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr"},"135":{"source":"pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr"},"140":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"142":{"source":"use crate::{\n    context::PrivateContext,\n    messages::{\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::{note::private_note_to_message_plaintext, utils::prefix_with_tag},\n        message_delivery::MessageDelivery,\n        offchain_messages::emit_offchain_message,\n    },\n    note::note_interface::NoteType,\n    utils::remove_constraints::remove_constraints_if,\n};\nuse protocol_types::{address::AztecAddress, traits::Packable};\n\n/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    // The struct fields are exposed only because of tests.\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note>\nwhere\n    Note: NoteType + Packable,\n{\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    /// Emits a note that can be delivered either via private logs or offchain messages, with configurable encryption and\n    /// tagging constraints.\n    ///\n    /// # Arguments\n    /// * `self` - The note emission to emit\n    /// * `context` - The private context to emit the note in\n    /// * `recipient` - The address that should receive this note\n    /// * `delivery_mode` - Controls encryption, tagging, and delivery constraints. Must be a compile-time constant.\n    ///   See `MessageDeliveryEnum` for details on the available modes.\n    pub fn emit(self, context: &mut PrivateContext, recipient: AztecAddress, delivery_mode: u8) {\n        // This function relies on `delivery_mode` being a constant in order to reduce circuit constraints when unconstrained\n        // usage is requested. If `delivery_mode` were a runtime value then performance would suffer.\n        assert_constant(delivery_mode);\n\n        // The following maps out the 3 dimensions across which we configure message delivery.\n        let constrained_encryption = delivery_mode == MessageDelivery.CONSTRAINED_ONCHAIN;\n        let emit_as_offchain_message = delivery_mode == MessageDelivery.UNCONSTRAINED_OFFCHAIN;\n        // TODO(#14565): Add constrained tagging\n        let _constrained_tagging = delivery_mode == MessageDelivery.CONSTRAINED_ONCHAIN;\n\n        let ciphertext = remove_constraints_if(\n            !constrained_encryption,\n            || AES128::encrypt_log(\n                private_note_to_message_plaintext(self.note, self.storage_slot),\n                recipient,\n            ),\n        );\n\n        if emit_as_offchain_message {\n            emit_offchain_message(ciphertext, recipient);\n        } else {\n            // Safety: Currently unsafe. See description of CONSTRAINED_ONCHAIN in MessageDeliveryEnum.\n            // TODO(#14565): Implement proper constrained tag prefixing to make this truly CONSTRAINED_ONCHAIN\n            let log_content = prefix_with_tag(ciphertext, recipient);\n\n            // Regardless of the original note size `N`, the log is padded with random bytes up to\n            // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n            let length = log_content.len();\n            context.emit_raw_note_log(log_content, length, self.note_hash_counter);\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    pub emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note>\nwhere\n    Note: NoteType + Packable,\n{\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit(self, context: &mut PrivateContext, recipient: AztecAddress, delivery_mode: u8) {\n        if self.emission.is_some() {\n            self.emission.unwrap_unchecked().emit(context, recipient, delivery_mode);\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"144":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_getter_options::{\n            NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder,\n        },\n        note_interface::{NoteHash, NoteType},\n        note_viewer_options::NoteViewerOptions,\n        retrieved_note::RetrievedNote,\n        utils::compute_note_hash_for_read_request,\n    },\n    oracle,\n    utils::{array, comparison::compare},\n};\n\nuse protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::{Packable, ToField}};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { view_note::<Note>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let M: u32, PreprocessorArgs, FilterArgs>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, M, PreprocessorArgs, FilterArgs>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N = M>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PreprocessorArgs>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PreprocessorArgs) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PreprocessorArgs,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let M: u32, PreprocessorArgs, FilterArgs>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, M, PreprocessorArgs, FilterArgs>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N = M>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; M];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\npub unconstrained fn view_note<Note>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable,\n{\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\")\n}\n\nunconstrained fn get_notes_internal<Note, let M: u32, PreprocessorArgs, FilterArgs>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, M, PreprocessorArgs, FilterArgs>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N = M>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. note nonce, note hash,\n/// etc.).\npub unconstrained fn view_notes<Note, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, M>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N = M> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"147":{"source":"use protocol_types::traits::{Packable, Serialize};\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize, Packable)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"150":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"155":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize,\n{\n    let serialized_option = load_oracle(contract_address, slot, <T as Deserialize>::N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(utilityStoreCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(utilityLoadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(utilityDeleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(utilityCopyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), value);\n        });\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            let new_value = MockStruct::new(7, 8);\n            store(contract_address, SLOT, new_value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n        });\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n            delete(contract_address, SLOT);\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            delete(contract_address, SLOT);\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 5;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 10;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 1;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 2;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n            assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n            assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 2;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 1;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n            assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n            assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n        });\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            copy(contract_address, SLOT, SLOT, 1);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let value = MockStruct::new(5, 6);\n            store(other_contract_address, SLOT, value);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let _: Option<MockStruct> = load(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            delete(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            copy(other_contract_address, SLOT, SLOT, 0);\n        });\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"157":{"source":"use crate::context::utility_context::UtilityContext;\n\n#[oracle(utilityGetUtilityContext)]\nunconstrained fn get_utility_context_oracle() -> UtilityContext {}\n\n/// Returns a utility context built from the global variables of anchor block and the contract address of the function\n/// being executed.\npub unconstrained fn get_utility_context() -> UtilityContext {\n    get_utility_context_oracle()\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"159":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(utilityGetContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"164":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(utilityGetKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"165":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(utilityGetPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"167":{"source":"use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(utilityFetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(utilityValidateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(utilityBulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr"},"169":{"source":"use crate::note::{note_interface::NoteType, retrieved_note::RetrievedNote};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(privateNotifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(privateNotifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(privateNotifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(utilityGetNotes)]\nunconstrained fn get_notes_oracle<Note, let M: u32, let MaxNotes: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to <RetrievedNote<Note> as Packable>::N. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; <RetrievedNote<Note> as Packable>::N], MaxNotes>\nwhere\n    // TODO(https://github.com/noir-lang/noir/issues/9399): `Note: Packable` should work here.\n    RetrievedNote<Note>: Packable,\n{}\n\npub unconstrained fn get_notes<Note, let M: u32, let MaxNotes: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MaxNotes]\nwhere\n    Note: NoteType + Packable,\n{\n    let packed_retrieved_notes: BoundedVec<[Field; <RetrievedNote<Note> as Packable>::N], MaxNotes>\n         = get_notes_oracle::<Note, M, MaxNotes>(\n            storage_slot,\n            num_selects,\n            select_by_indexes,\n            select_by_offsets,\n            select_by_lengths,\n            select_values,\n            select_comparators,\n            sort_by_indexes,\n            sort_by_offsets,\n            sort_by_lengths,\n            sort_order,\n            limit,\n            offset,\n            status,\n            MaxNotes,\n            <RetrievedNote<Note> as Packable>::N,\n        );\n\n    let mut notes = BoundedVec::<_, MaxNotes>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = RetrievedNote::unpack(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MaxNotes];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(utilityCheckNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n// TODO: Oracles below are generic private log oracles and are not specific to notes. Move them somewhere else.\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(utilityGetIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(privateIncrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Gets the sender for tags.\n///\n/// This unconstrained value is used as the sender when computing an unconstrained shared secret\n/// for a tag in order to emit a log. Constrained tagging should not use this as there is no\n/// guarantee that the recipient knows about the sender, and hence about the shared secret.\n///\n/// The value persists through nested calls, meaning all calls down the stack will use the same\n/// 'senderForTags' value (unless it is replaced).\npub unconstrained fn get_sender_for_tags() -> Option<AztecAddress> {\n    get_sender_for_tags_oracle()\n}\n\n#[oracle(privateGetSenderForTags)]\nunconstrained fn get_sender_for_tags_oracle() -> Option<AztecAddress> {}\n\n/// Sets the sender for tags.\n///\n/// This unconstrained value is used as the sender when computing an unconstrained shared secret\n/// for a tag in order to emit a log. Constrained tagging should not use this as there is no\n/// guarantee that the recipient knows about the sender, and hence about the shared secret.\n///\n/// Account contracts typically set this value before calling other contracts. The value persists\n/// through nested calls, meaning all calls down the stack will use the same 'senderForTags'\n/// value (unless it is replaced by another call to this setter).\npub unconstrained fn set_sender_for_tags(sender_for_tags: AztecAddress) {\n    set_sender_for_tags_oracle(sender_for_tags);\n}\n\n#[oracle(privateSetSenderForTags)]\nunconstrained fn set_sender_for_tags_oracle(_sender_for_tags: AztecAddress) {}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"171":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(utilityGetRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"172":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(utilityGetSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"174":{"source":"/// The ORACLE_VERSION constant is used to check that the oracle interface is in sync between PXE and Aztec.nr. We need\n/// to version the oracle interface to ensure that developers get a reasonable error message if they use incompatible\n/// versions of Aztec.nr and PXE. The TypeScript counterpart is in `oracle_version.ts`.\n///\n/// @dev Whenever a contract function or Noir test is run, the `utilityAssertCompatibleOracleVersion` oracle is called and\n/// if the oracle version is incompatible an error is thrown.\npub global ORACLE_VERSION: Field = 2;\n\n/// Asserts that the version of the oracle is compatible with the version expected by the contract.\npub fn assert_compatible_oracle_version() {\n    // Safety: This oracle call returns nothing: we only call it to check Aztec.nr and Oracle interface versions are\n    // compatible. It is therefore always safe to call.\n    unsafe {\n        assert_compatible_oracle_version_wrapper();\n    }\n}\n\nunconstrained fn assert_compatible_oracle_version_wrapper() {\n    assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n}\n\n#[oracle(utilityAssertCompatibleOracleVersion)]\nunconstrained fn assert_compatible_oracle_version_oracle(version: Field) {}\n\nmod test {\n    use super::{assert_compatible_oracle_version_oracle, ORACLE_VERSION};\n\n    #[test]\n    unconstrained fn compatible_oracle_version() {\n        assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n    }\n\n    #[test(should_fail_with = \"Incompatible oracle version. TXE is using version '2', but got a request for '318183437'.\")]\n    unconstrained fn incompatible_oracle_version() {\n        let arbitrary_incorrect_version = 318183437;\n        assert_compatible_oracle_version_oracle(arbitrary_incorrect_version);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/oracle/version.nr"},"178":{"source":"use crate::state_vars::storage::HasStorageSlot;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n/// Map\n///\n/// A key-value storage container that maps keys to state variables, similar\n/// to Solidity mappings.\n///\n/// `Map` enables you to associate keys (like addresses or other identifiers)\n/// with state variables in your Aztec smart contract. This is conceptually\n/// similar to Solidity's `mapping(K => V)` syntax, where you can store and\n/// retrieve values by their associated keys.\n///\n/// You can declare a state variable contained within a Map in your contract's\n/// #[storage] struct.\n///\n/// For example, you might use\n/// `Map<AztecAddress, PrivateMutable<ValueNote, Context>, Context>` to track\n/// token balances for different users, similar to how you'd use\n/// `mapping(address => uint256)` in Solidity.\n///\n/// > Aside: the verbose `Context` in the declaration is a consequence of\n/// > leveraging Noir's regular syntax for generics to ensure that certain\n/// > state variable methods can only be called in some contexts (private,\n/// > public, utility).\n///\n/// The methods of Map are:\n/// - `at` (access state variable for a given key)\n/// (see the method's own doc comments for more info).\n///\n/// ## Generic Parameters\n/// - `K`: The key type (must implement `ToField` trait for hashing)\n/// - `V`: The value type:\n///   - any Aztec state variable:\n///     - `PublicMutable`\n///     - `PublicImmutable`\n///     - `PrivateMutable`\n///     - `PrivateImmutable`\n///     - `PrivateSet`\n///     - `DelayedPublicMutable`\n///     - `Map`\n/// - `Context`: The execution context (handles private/public function\n///   contexts)\n///\n/// ## Usage\n/// Maps are typically declared in your contract's #[storage] struct and\n/// accessed\n/// using the `at(key)` method to get the state variable for a specific key.\n/// The resulting state variable can then be read from or written to using its\n/// own methods.\n///\n/// ## Advanced\n/// Internally, `Map` uses a single base storage slot to represent the\n/// mapping\n/// itself, similar to Solidity's approach. Individual key-value pairs are\n/// stored at derived storage slots computed by hashing the base storage\n/// slot\n/// with the key using Poseidon2. This ensures:\n/// - No storage slot collisions between different keys\n/// - Uniform distribution of storage slots across the storage space\n/// - Compatibility with Aztec's storage tree structure\n/// - Gas-efficient storage access patterns similar to Solidity mappings\n///\n/// The storage slot derivation uses `derive_storage_slot_in_map(base_slot,\n/// key)` which computes `poseidon2_hash([base_slot, key.to_field()])`,\n/// ensuring cryptographically secure slot separation.\n///\n/// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because\n// nothing is stored at said slot: it is only used to derive the storage slots\n// of nested state variables, which is expected to never result in collisions\n// or slots being close to one another due to these being hashes. This mirrors\n// the strategy adopted by Solidity mappings.\nimpl<K, T, Context> HasStorageSlot<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    /// Initializes a new Map state variable.\n    ///\n    /// This function is usually automatically called within the #[storage]\n    /// macro.\n    /// You typically don't need to call this directly when writing smart contracts.\n    ///\n    /// # Arguments\n    ///\n    /// * `context` - One of `PrivateContext`/`PublicContext`/`UtilityContext`.\n    ///               The Context determines which methods of this struct will\n    ///               be made available to the calling smart contract function.\n    /// * `storage_slot` - A unique identifier for this Map within the contract.\n    ///                    Usually, the #[storage] macro will determine an\n    ///                    appropriate storage_slot automatically. A smart\n    ///                    contract dev shouldn't have to worry about this, as\n    ///                    it's managed behind the scenes.\n    /// * `state_var_constructor` - A function that creates the value type (V)\n    ///                             given a context and storage slot. This is\n    ///                             typically the constructor of the state\n    ///                             variable type being stored in the Map.\n    ///\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    /// Returns the state variable associated with the given key.\n    ///\n    /// This is equivalent to accessing `mapping[key]` in Solidity. It returns\n    /// the state variable instance for the specified key, which can then be\n    /// used to read or write the value at that key.\n    ///\n    /// Unlike Solidity mappings which return the value directly, this returns\n    /// the state variable wrapper (like PrivateMutable, PublicMutable, etc.)\n    /// that you then call methods on to interact with the actual value.\n    ///\n    /// # Arguments\n    ///\n    /// * `key` - The key to look up in the map. Must implement the ToField\n    ///           trait (which most basic Noir & Aztec types do).\n    ///\n    /// # Returns\n    ///\n    /// * `V` - The state variable instance for this key. You can then call\n    ///         methods like `.read()`, `.write()`, `.get_note()`, etc. on this\n    ///         depending on the specific state variable type.\n    ///\n    /// # Example\n    ///\n    /// ```noir\n    /// // Get a user's balance (assuming PrivateMutable<ValueNote>)\n    /// let user_balance = storage.balances.at(user_address);\n    /// let current_note = user_balance.get_note();\n    ///\n    /// // Update the balance\n    /// user_balance.replace(new_note);\n    /// ```\n    ///\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"184":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::HasStorageSlot;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n/// # PrivateSet\n///\n/// PrivateSet is a private state variable type, which enables you to read, mutate,\n/// and write private state within the #[private] functions of your smart contract.\n///\n/// You can declare a state variable of type PrivateSet within your contract's\n/// #[storage] struct:\n///\n/// E.g.:\n/// `your_variable: PrivateSet<YourNote, Context>`\n/// or:\n/// `your_mapping: Map<Field, PrivateSet<YourNote, Context>>`\n///\n/// The PrivateSet type operates over notes, by facilitating: the insertion\n/// of new notes, the reading of existing notes, and the nullification of existing\n/// notes.\n///\n/// The methods of PrivateSet are:\n/// - `insert`\n/// - `pop_notes`\n/// - `get_notes`\n/// - `remove`\n/// (see the methods' own doc comments for more info).\n///\n/// The \"current value\" of a PrivateSet state variable is represented as a\n/// _collection_ (or \"Set\") of multiple notes.\n///\n/// > More exactly, the 'current value' is the collection of all\n/// > _not-yet-nullified_ notes in the set.\n///\n///\n/// ## Example.\n///\n/// A user's token balance can be represented as a PrivateSet of multiple notes,\n/// where the note type contains a value.\n/// The \"current value\" of the user's token balance (the PrivateSet state variable)\n/// can be interpreted as the summation of the values contained within all\n/// not-yet-nullified notes (aka \"current notes\") in the PrivateSet.\n///\n/// This is similar to a physical wallet containing five $10 notes: the owner's\n/// wallet balance is the sum of all those $10 notes: $50.\n/// To spend $2, they can get one $10 note, nullify it, and insert one $8 note as\n/// change. Their new wallet balance will then be interpreted as the new summation: $48.\n///\n/// The interpretation doesn't always have to be a \"summation of values\". When\n/// `get_notes` is called, PrivateSet does not attempt to interpret the notes at all;\n/// it's up to the custom code of the smart contract to make an interpretation.\n///\n/// For example: a set of notes could instead represent a moving average; or a modal\n/// value; or some other single statistic. Or the set of notes might not be\n/// collapsible into a single statistic: it could be a disjoint collection of NFTs\n/// which are housed under the same \"storage slot\".\n///\n/// It's worth noting that a user can prove existence of _at least_ some subset\n/// of notes in a PrivateSet, but they cannot prove existence of _all_ notes\n/// in a PrivateSet.\n/// The physical wallet is a good example: a user can prove that there are five\n/// $10 notes in their wallet by furnishing those notes. But because we cannot\n/// _see_ the entirety of their wallet, they might have many more notes that\n/// they're choosing to not showing us.\n///\n/// ## When to choose PrivateSet vs PrivateMutable:\n///\n/// - If you want _someone else_ (other than the owner of the private state) to be\n///   able to make edits (insert notes).\n/// - If you don't want to leak the storage_slot being initialized (see the\n///   PrivateMutable file).\n/// - If you find yourself needing to re-initialize a PrivateMutable (see that file).\n///\n/// The 'current' value of a _PrivateMutable_ state variable is only ever represented\n/// by _one_ note at a time. To mutate the current value of a PrivateMutable, the\n/// current note always gets nullified, and a new, replacement note gets inserted.\n/// So if nullification is always required to mutate a PrivateMutable, that means\n/// only the 'owner' of a given PrivateMutable state variable can ever mutate it.\n/// For some use cases, this can be too limiting: A key feature of some smart contract\n/// functions is that _multiple people_ are able to mutate a particular state\n/// variable.\n///\n/// PrivateSet enables \"other people\" (other than the owner of the private state) to\n/// mutate the 'current' value, with some limitations:\n/// The 'owner' is still the only person with the ability to `remove` notes from the\n/// the set.\n/// \"Other people\" can `insert` notes into the set.\n///\n/// It's important to notice that the \"owner\" of a state variable is an abstract\n/// concept which will differ depending on the rules of a smart contract. When we\n/// talk about the \"owner\" in the context of these aztec-nr files, we tend to mean\n/// \"the person who has the ability to nullify the state variable's notes\".\n/// Notice that the state variable abstractions of aztec-nr do not know what an\n/// \"owner\" is: they delegate responsibility of understanding who the \"owner\" of a\n/// note is to the note itself, via a `compute_nullifier` call.\n///\n///\n/// ## Privacy\n///\n/// The methods of a PrivateSet are only executable in a PrivateContext, and are\n/// designed to not leak anything about _which_ state variable was read/modified/\n/// inserted, to the outside world.\n///\n/// The design of the Note does impact the privacy of the state variable: the note\n/// will need to contain a `randomness` field so that, when hashed, the contents of\n/// the note are private.\n/// > Note: we decided to explicitly require `randomness` in a note definition,\n/// > because we anticipated use cases where notes might also be used to store\n/// > certain _public_ state. We might roll-back that decision, so that users don't\n/// > need to worry about handling their own randomness when defining custom notes.\n///\n/// The design of the note's custom `compute_nullifier` method will also impact the\n/// privacy of the note at the time it is nullified. (Note: all Notes must implement\n/// `compute_nullifier` to be compatible with PrivateSet). See the docs.\n///\n///\n/// # Struct Fields:\n///\n/// * context - The execution context (PrivateContext or UtilityContext).\n/// * storage_slot -  All notes that \"belong\" to a given PrivateSet state variable\n///                   are augmented with a common `storage_slot` field, as a way of\n///   identifying which set they belong to. (Management of `storage_slot` is handled\n///   within the innards of the PrivateSet impl, so you shouldn't need to think about\n///   this any further).\n///\n///\n/// # Generic Parameters:\n///\n/// * `Note` - Many notes of this type will collectively form the PrivateSet at the\n///            given storage_slot.\n/// * `Context` - The execution context (PrivateContext or UtilityContext).\n///\n/// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> HasStorageSlot<1> for PrivateSet<T, Context> {\n    // Private storage slots are not really 'slots' but rather a value in the note\n    // hash preimage, so there is no notion of a value spilling over multiple slots.\n    // For this reason, PrivateSet (and all other private state variables) needs\n    // just one slot to be reserved, regardless of what it stores.\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    /// Initializes a new PrivateSet state variable.\n    ///\n    /// This function is usually automatically called within the #[storage] macro.\n    /// You typically don't need to call this directly when writing smart contracts.\n    ///\n    ///\n    /// # Arguments\n    ///\n    /// * `context` - One of `PrivateContext`/`PublicContext`/`UtilityContext`. The\n    ///               Context determines which methods of this struct will be made\n    ///               available to the calling smart contract function.\n    /// * `storage_slot` - A unique identifier for this state variable within the\n    ///                    contract. All notes that \"belong\" to a given PrivateSet\n    ///                    state variable are augmented with a common `storage_slot`\n    ///                    field, as a way of identifying which set they belong to.\n    ///                    Usually, the #[storage] macro will determine an appropriate\n    ///                    storage_slot automatically. A smart contract dev shouldn't\n    ///                    have to worry about this, as it's managed behind the scenes.\n    ///\n    /// docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    /// Inserts a new `note` into the PrivateSet.\n    ///\n    /// # Arguments\n    ///\n    /// - `note` - A newly-created note that you would like to insert into this\n    ///            PrivateSet.\n    ///\n    /// # Returns\n    ///\n    /// - NoteEmission<Note> - A type-safe wrapper which makes it clear to the\n    ///                        smart contract dev that they now have a choice: they\n    ///   need to decide whether they would like to send the contents of the newly-\n    ///   created note to someone, or not. If they would like to, they have some\n    ///   further choices:\n    ///   - What kind of log to use? (Private log, or offchain log).\n    ///   - What kind of encryption scheme to use? (Currently only AES128 is supported)\n    ///   - Whether to _constrain_ delivery of the note, or not.\n    ///   At the moment, aztec-nr provides limited options.\n    ///   You can call `.emit()` on the returned type to encrypt and log the note, or\n    ///   `.discard()` to skip emission.\n    ///   See NoteEmission for more details.\n    ///   > Note: We're planning a _significant_ refactor of this syntax, to make the\n    ///     syntax of how to encrypt and deliver notes much clearer, and to make the\n    ///     default options much clearer to developers. We will also be enabling\n    ///     easier ways to customize your own note encryption options.\n    ///\n    /// # Advanced:\n    ///\n    /// Ultimately, this function inserts the `note` into the protocol's Note Hash\n    /// Tree.\n    /// Behind the scenes, we do the following:\n    /// - Augment the note with the `storage_slot` of this PrivateSet, to\n    ///   convey which set it belongs to.\n    /// - Augment the note with a `note_type_id`, so that it can be correctly filed-\n    ///   away when it is eventually discovered, decrypted, and processed by its\n    ///   intended recipient.\n    ///   (The note_type_id is usually allocated by the #[note] macro).\n    /// - Provide the contents of the (augmented) note to the PXE, so that it can\n    ///   store all notes created by the user executing this function.\n    ///   - The note is also kept in the PXE's memory during execution, in case this\n    ///     newly-created note gets _read_ in some later execution frame of this\n    ///     transaction. In such a case, we feed hints to the kernel to squash:\n    ///     the so-called \"transient note\", its note log (if applicable), and the\n    ///     nullifier that gets created by the reading function.\n    /// - Hash the (augmented) note into a single Field, via the note's own\n    ///   `compute_note_hash` method.\n    /// - Push the `note_hash` to the PrivateContext. From here, the protocol's\n    ///   kernel circuits will take over and insert the note_hash into the protocol's\n    ///   \"note hash tree\".\n    ///   - Before insertion, the protocol will:\n    ///     - \"Silo\" the `note_hash` with the `contract_address` of the calling\n    ///       function, to yield a `siloed_note_hash`. This prevents state collisions\n    ///       between different smart contracts.\n    ///     - Ensure uniqueness of the `siloed_note_hash`, to prevent Faerie-Gold\n    ///       attacks, by hashing the `siloed_note_hash` with a unique value, to\n    ///       yield a `unique_siloed_note_hash` (see the protocol spec for more).\n    ///\n    /// docs:start:insert\n    pub fn insert(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    /// Pops a collection of \"current\" notes (i.e. not-yet-nullified notes) which\n    /// belong to this PrivateSet.\n    ///\n    /// \"Pop\" indicates that, conceptually, the returned notes will get _permanently\n    /// removed_ (nullified) from the PrivateSet by this method.\n    ///\n    /// The act of nullifying convinces us that the returned notes are indeed\n    /// \"current\" (because if they can be nullified, it means they haven't been\n    /// nullified already, because a note can only be nullified once).\n    ///\n    /// This means that -- whilst the returned notes should be considered \"current\"\n    /// within the currently-executing execution frame of the tx -- they will be not\n    /// be considered \"current\" by any _later_ execution frame of this tx (or any\n    /// future tx).\n    ///\n    /// Notes will be selected from the PXE's database, via an oracle call, according\n    /// to the filtering `options` provided.\n    ///\n    /// # Arguments\n    ///\n    /// - `options` - See NoteGetterOptions. Enables the caller to specify the\n    ///               properties of the notes that must be returned by the oracle\n    ///               call to the PXE.\n    ///               The NoteGetterOptions are designed to contain functions which\n    ///               _constrain_ that the returned notes do indeed adhere to the\n    ///               specified options. Those functions are executed _within_ this\n    ///               `pop_notes` call.\n    ///\n    /// # Returns\n    ///\n    /// - BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    ///   - A vector of \"current\" notes, that have been constrained to satisfy the\n    ///     retrieval criteria specified by the given `options`.\n    ///\n    /// # Generic Parameters\n    ///\n    /// * `PreprocessorArgs` - See `NoteGetterOptions`.\n    /// * `FilterArgs` - See `NoteGetterOptions`.\n    /// * `M` - The length of the note (in Fields), when packed by the Packable trait.\n    ///\n    /// # Advanced:\n    ///\n    /// Reads the notes:\n    ///\n    /// - Gets notes from the PXE, via an oracle call, according to the filtering\n    ///   `options` provided.\n    /// - Constrains that the returned notes do indeed adhere to the `options`.\n    ///   (Note: the `options` contain _constrained_ functions that get invoked\n    ///   _within_ this function).\n    /// - Asserts that the notes do indeed belong to this calling function's\n    ///   `contract_address`, and to this PrivateSet's `storage_slot`.\n    /// - Computes the note_hash for each note, using the `storage_slot` and\n    ///   `contract_address` of this PrivateSet instance.\n    /// - Asserts that the note_hash does indeed exist:\n    ///   - For settled notes: makes a request to the kernel to perform a merkle\n    ///     membership check against the historical Note Hashes Tree that this tx\n    ///     is referencing.\n    ///   - For transient notes: makes a request to the kernel to ensure that the\n    ///     note was indeed emitted by some earlier execution frame of this tx.\n    ///\n    /// Nullifies the notes:\n    ///\n    /// - Computes the nullifier for each note.\n    ///   - (The nullifier computation differs depending on whether the note is\n    ///     settled or transient).\n    /// - Pushes the nullifiers to the PrivateContext. From here, the protocol's\n    ///   kernel circuits will take over and insert the nullifiers into the\n    ///   protocol's \"nullifier tree\".\n    ///   - Before insertion, the protocol will:\n    ///     - \"Silo\" each `nullifier` with the `contract_address` of the calling\n    ///       function, to yield a `siloed_nullifier`. This prevents nullifier\n    ///       collisions between different smart contracts.\n    ///     - Ensure that each `siloed_nullifier` does not already exist in the\n    ///       nullifier tree. The nullifier tree is an indexed merkle tree, which\n    ///       supports efficient non-membership proofs.\n    ///\n    pub fn pop_notes<PreprocessorArgs, FilterArgs, let M: u32>(\n        self,\n        options: NoteGetterOptions<Note, M, PreprocessorArgs, FilterArgs>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N = M>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in fewer constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Permanently removes (conceptually) the given note from this PrivateSet,\n    /// by nullifying it.\n    ///\n    /// Note that if you obtained the note via `get_notes` it's much better to use\n    /// `pop_notes`, as `pop_notes` results in significantly fewer constraints,\n    /// due to avoiding an extra hash and read request check.\n    ///\n    /// # Arguments\n    ///\n    /// - `retrieved_note` - A note which -- earlier in the calling function's\n    ///                      execution -- has been retrieved from the PXE.\n    ///                      The `retrieved_note` is constrained to have been read\n    ///                      from the i\n    ///\n    /// # Returns\n    ///\n    /// - NoteEmission<Note> - A type-safe wrapper which makes it clear to the\n    ///                        smart contract dev that they now have a choice: they\n    ///   need to decide whether they would like to send the contents of the newly-\n    ///   created note to someone, or not. If they would like to, they have some\n    ///   further choices:\n    ///   - What kind of log to use? (Private log, or offchain log).\n    ///   - What kind of encryption scheme to use? (Currently only AES128 is supported)\n    ///   - Whether to _constrain_ delivery of the note, or not.\n    ///   At the moment, aztec-nr provides limited options.\n    ///   See NoteEmission for further details.\n    ///   > Note: We're planning a _significant_ refactor of this syntax, to make the\n    ///     syntax of how to encrypt and deliver notes much clearer, and to make the\n    ///     default options much clearer to developers. We will also be enabling\n    ///     easier ways to customize your own note encryption options.\n    ///\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Returns a collection of which belong to this PrivateSet.\n    ///\n    /// DANGER: the returned notes do not get nullified within this `get_notes`\n    /// function, and so they cannot necessarily be considered \"current\" notes.\n    /// I.e. you might be reading notes that have already been nullified. It is\n    /// this which distinguishes `get_notes` from `pop_notes`.\n    ///\n    /// Note that if you later on remove the note it's much better to use\n    /// `pop_notes` as `pop_notes` results in significantly fewer constrains\n    /// due to avoiding 1 read request check.\n    /// If you need for your app to see the notes before it can decide which to\n    /// nullify (which ideally would not be the case, and you'd be able to rely\n    /// on the filter and preprocessor to do this), then you have no resort but\n    /// to call `get_notes` and then `remove`.\n    ///\n    /// Notes will be selected from the PXE's database, via an oracle call, according\n    /// to the filtering `options` provided.\n    ///\n    /// # Arguments\n    ///\n    /// - `options` - See NoteGetterOptions. Enables the caller to specify the\n    ///               properties of the notes that must be returned by the oracle\n    ///               call to the PXE.\n    ///               The NoteGetterOptions are designed to contain functions which\n    ///               _constrain_ that the returned notes do indeed adhere to the\n    ///               specified options. Those functions are executed _within_ this\n    ///               `pop_notes` call.\n    ///\n    /// # Returns\n    ///\n    /// - BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    ///   - A vector of \"current\" notes, that have been constrained to satisfy the\n    ///     retrieval criteria specified by the given `options`.\n    ///\n    /// # Generic Parameters\n    ///\n    /// * `PreprocessorArgs` - See `NoteGetterOptions`.\n    /// * `FilterArgs` - See `NoteGetterOptions`.\n    /// * `M` - The length of the note (in Fields), when packed by the Packable trait.\n    ///\n    /// # Advanced:\n    ///\n    /// Reads the notes:\n    ///\n    /// - Gets notes from the PXE, via an oracle call, according to the filtering\n    ///   `options` provided.\n    /// - Constrains that the returned notes do indeed adhere to the `options`.\n    ///   (Note: the `options` contain _constrained_ functions that get invoked\n    ///   _within_ this function).\n    /// - Asserts that the notes do indeed belong to this calling function's\n    ///   `contract_address`, and to this PrivateSet's `storage_slot`.\n    /// - Computes the note_hash for each note, using the `storage_slot` and\n    ///   `contract_address` of this PrivateSet instance.\n    /// - Asserts that the note_hash does indeed exist:\n    ///   - For settled notes: makes a request to the kernel to perform a merkle\n    ///     membership check against the historical Note Hashes Tree that this tx\n    ///     is referencing.\n    ///   - For transient notes: makes a request to the kernel to ensure that the\n    ///     note was indeed emitted by some earlier execution frame of this tx.\n    ///\n    pub fn get_notes<PreprocessorArgs, FilterArgs, let M: u32>(\n        self,\n        options: NoteGetterOptions<Note, M, PreprocessorArgs, FilterArgs>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N = M>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    /// Returns a collection of notes which belong to this PrivateSet, according\n    /// to the given selection `options`.\n    ///\n    /// Notice that this function is executable only within a UtilityContext, which\n    /// is an unconstrained environment on the user's local device.\n    ///\n    /// # Arguments\n    ///\n    /// - `options` - See NoteGetterOptions. Enables the caller to specify the\n    ///               properties of the notes that must be returned by the oracle\n    ///               call to the PXE.\n    ///\n    /// docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, <Note as Packable>::N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"205":{"source":"/// Appends the elements of the second `BoundedVec` to the end of the first one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let ALen: u32, let BLen: u32, let DstLen: u32>(\n    a: BoundedVec<T, ALen>,\n    b: BoundedVec<T, BLen>,\n) -> BoundedVec<T, DstLen> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"206":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"208":{"source":"/// Returns `DstLen` elements from a source array, starting at `offset`. `DstLen` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SrcLen: u32, let DstLen: u32>(src: [T; SrcLen], offset: u32) -> [T; DstLen] {\n    assert(offset + DstLen <= SrcLen, \"DstLen too large for offset\");\n\n    let mut dst: [T; DstLen] = std::mem::zeroed();\n    for i in 0..DstLen {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DstLen to be 0, so we always get back an empty array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"209":{"source":"use crate::utils::array;\n\n/// Returns `DstMaxLen` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DstLen` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DstLen` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SrcMaxLen: u32, let DstMaxLen: u32>(\n    bvec: BoundedVec<T, SrcMaxLen>,\n    offset: u32,\n) -> BoundedVec<T, DstMaxLen> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"211":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"212":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"214":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"216":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"217":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"218":{"source":"/// Calls a function and returns its return value, but removes any constraints associated with calling the function,\n/// behaving as if the function was unconstrained.\npub unconstrained fn remove_constraints<Env, T>(f: fn[Env]() -> T) -> T {\n    f()\n}\n\n/// Calls a function and returns its return value, removing any constraints associated with calling the function if\n/// `condition` is true, behaving as if the function was unconstrained.\n///\n/// Requires `condition` to be a compile time constant.\npub fn remove_constraints_if<Env, T>(condition: bool, f: fn[Env]() -> T) -> T {\n    // If `condition` is not a compile-time constant, then the compiler won't optimize away the branch not taken in the\n    // if statement below, and we may end up with constraints for `f` regardless of the runtime value of `condition`.\n    assert_constant(condition);\n\n    if condition {\n        // Safety: the purpose of this function is to execute `f` with no constraints when `condition` is true.\n        unsafe {\n            remove_constraints(f)\n        }\n    } else {\n        f()\n    }\n}\n\nmod test {\n    use super::remove_constraints;\n\n    fn return_unit() -> () {\n        ()\n    }\n\n    fn return_field() -> Field {\n        5\n    }\n\n    #[test]\n    fn returns_unit() {\n        let expected = return_unit();\n        // Safety: this is a test\n        let actual = unsafe { remove_constraints(|| return_unit()) };\n        assert_eq(actual, expected);\n    }\n\n    #[test]\n    fn returns_original_value() {\n        let expected = return_field();\n        // Safety: this is a test\n        let actual = unsafe { remove_constraints(|| return_field()) };\n        assert_eq(actual, expected);\n    }\n\n    #[test]\n    unconstrained fn returns_unit_unconstrained() {\n        let expected = return_unit();\n        let actual = remove_constraints(|| return_unit());\n        assert_eq(actual, expected);\n    }\n\n    #[test]\n    unconstrained fn returns_original_value_unconstrained() {\n        let expected = return_field();\n        let actual = remove_constraints(|| return_field());\n        assert_eq(actual, expected);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/aztec/src/utils/remove_constraints.nr"},"228":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/jli/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"295":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\nuse std::meta::derive;\n\n// Aztec address\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    // We use the AZTEC_ADDRESS_LENGTH constant to ensure that there is a match between the derived trait\n    // implementation and the constant.\n    let serialized: [Field; AZTEC_ADDRESS_LENGTH] = address.serialize();\n    let deserialized = AztecAddress::deserialize(serialized);\n    assert_eq(address, deserialized);\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"298":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Empty, Serialize, ToField},\n};\nuse std::meta::derive;\n\n// Partial address\n#[derive(Deserialize, Eq, Serialize)]\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Empty for PartialAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\nmod test {\n    use crate::{address::partial_address::PartialAddress, traits::{Deserialize, Serialize}};\n\n    #[test]\n    fn serialization_of_partial_address() {\n        let item = PartialAddress::from_field(1);\n        let serialized: [Field; 1] = item.serialize();\n        let deserialized = PartialAddress::deserialize(serialized);\n        assert_eq(item, deserialized);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"300":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\n#[derive(Eq)]\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"304":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\nuse std::meta::derive;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n\nmod test {\n    use crate::{\n        address::AztecAddress,\n        constants::CONTRACT_INSTANCE_LENGTH,\n        contract_class_id::ContractClassId,\n        contract_instance::ContractInstance,\n        public_keys::PublicKeys,\n        traits::{Deserialize, FromField, Serialize},\n    };\n\n    #[test]\n    fn serde() {\n        let instance = ContractInstance {\n            salt: 6,\n            deployer: AztecAddress::from_field(12),\n            contract_class_id: ContractClassId::from_field(13),\n            initialization_hash: 156,\n            public_keys: PublicKeys::default(),\n        };\n\n        // We use the CONTRACT_INSTANCE_LENGTH constant to ensure that there is a match between the derived trait\n        // implementation and the constant.\n        let serialized: [Field; CONTRACT_INSTANCE_LENGTH] = instance.serialize();\n\n        let deserialized = ContractInstance::deserialize(serialized);\n\n        assert(instance.eq(deserialized));\n    }\n\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"311":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(utilityDebugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"320":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::field::{field_from_bytes, field_from_bytes_32_trunc},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    // Q: shouldn't we be checking whether the _whole_ nullifier is empty?\n    // A: We don't have to. The init and inner circuits add contract address to non-empty nullifiers.\n    // So we know we should silo it if the contract address is not empty.\n    if nullifier.contract_address.is_zero() {\n        // Q: I don't understand this comment. We could still compute a siloed nullifier from a zero contract address.\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n/// Computes sha256 hash of 2 input fields.\n///\n/// @returns A truncated field (i.e., the first byte is always 0).\npub fn accumulate_sha256(v0: Field, v1: Field) -> Field {\n    // Concatenate two fields into 32 x 2 = 64 bytes\n    let v0_as_bytes: [u8; 32] = v0.to_be_bytes();\n    let v1_as_bytes: [u8; 32] = v1.to_be_bytes();\n    let hash_input_flattened = v0_as_bytes.concat(v1_as_bytes);\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = [separator.to_field()].concat(inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert_eq(input[in_len - remainder + i], 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"321":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"334":{"source":"/// Generates the generic parameter declarations for a struct's trait implementation.\n///\n/// This function takes a struct type definition and generates the generic parameter declarations\n/// that go after the `impl` keyword. For example, given a struct with generics `N: u32` and `T`,\n/// it generates `<let N: u32, T>`.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate generic declarations for\n///\n/// # Returns\n/// A quoted code block containing the generic parameter declarations, or an empty quote if the struct\n/// has no generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// This function generates:\n/// ```\n/// <let N: u32, T>\n/// ```\ncomptime fn get_generics_declarations(s: TypeDefinition) -> Quoted {\n    let generics = s.generics();\n\n    if generics.len() > 0 {\n        let generics_declarations_items = generics\n            .map(|(name, maybe_integer_typ)| {\n                // The second item in the generics tuple is an Option of an integer type that is Some only if\n                // the generic is numeric.\n                if maybe_integer_typ.is_some() {\n                    // The generic is numeric, so we return a quote defined as e.g. \"let N: u32\"\n                    let integer_type = maybe_integer_typ.unwrap();\n                    quote {let $name: $integer_type}\n                } else {\n                    // The generic is not numeric, so we return a quote containing the name of the generic (e.g. \"T\")\n                    quote {$name}\n                }\n            })\n            .join(quote {,});\n        quote {<$generics_declarations_items>}\n    } else {\n        // The struct doesn't have any generics defined, so we just return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates the `where` clause for a trait implementation that constrains non-numeric generic type parameters.\n///\n/// This function takes a struct type definition and a trait name, and generates a `where` clause that\n/// requires all non-numeric generic type parameters to implement the specified trait.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the where clause for\n/// - `trait_name`: The name of the trait that non-numeric generic parameters must implement\n///\n/// # Returns\n/// A quoted code block containing the where clause, or an empty quote if the struct has no non-numeric\n/// generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// And trait name \"Serialize\", this function generates:\n/// ```\n/// where T: Serialize\n/// ```\ncomptime fn get_where_trait_clause(s: TypeDefinition, trait_name: Quoted) -> Quoted {\n    let generics = s.generics();\n\n    // The second item in the generics tuple is an Option of an integer type that is Some only if the generic is\n    // numeric.\n    let non_numeric_generics =\n        generics.filter(|(_, maybe_integer_typ)| maybe_integer_typ.is_none());\n\n    if non_numeric_generics.len() > 0 {\n        let non_numeric_generics_declarations =\n            non_numeric_generics.map(|(name, _)| quote {$name: $trait_name}).join(quote {,});\n        quote {where $non_numeric_generics_declarations}\n    } else {\n        // There are no non-numeric generics, so we return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates a `Serialize` trait implementation for a struct type.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A quoted code block containing the trait implementation\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Log<N> {\n///     fields: [Field; N],\n///     length: u32\n/// }\n/// ```\n///\n/// This function generates code equivalent to:\n/// ```\n/// impl<let N: u32> Serialize for Log<N> {\n///     let N: u32 = <[Field; N] as Serialize>::N + <u32 as Serialize>::N;\n///\n///     #[inline_always]\n///     fn serialize(self) -> [Field; Self::N] {\n///         let mut result = [0; _];\n///         let mut offset = 0;\n///\n///         let serialized_member = Serialize::serialize(self.fields);\n///         let serialized_member_len = <[Field; N] as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         let serialized_member = Serialize::serialize(self.length);\n///         let serialized_member_len = <u32 as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         result\n///     }\n/// }\n/// ```\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Serialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_serialize_clause = get_where_trait_clause(s, quote {Serialize});\n\n    // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Serialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the serialized member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // For multiple struct members, generate serialization code that:\n        // 1. Serializes each member\n        // 2. Copies the serialized fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let serialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                let serialized_member = $crate::traits::Serialize::serialize(self.$param_name);\n                let serialized_member_len = <$param_type as $crate::traits::Serialize>::N;\n                for i in 0..serialized_member_len {\n                    result[i + offset] = serialized_member[i];\n                }\n                offset += serialized_member_len;\n            }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; _];\n            let mut offset = 0;\n\n            $serialization_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Serialize::serialize(self.$param_name)\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Serialize for $typ\n            $where_serialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn serialize(self) -> [Field; Self::N] {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Deserialize` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Deserialize` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Deserialize for MyStruct {\n///     let N: u32 = <AztecAddress as Deserialize>::N + <Field as Deserialize>::N;\n///\n///     fn deserialize(serialized: [Field; Self::N]) -> Self {\n///         let mut offset = 0;\n///         let mut member_fields = [0; <AztecAddress as Deserialize>::N];\n///         for i in 0..<AztecAddress as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let x = <AztecAddress as Deserialize>::deserialize(member_fields);\n///         offset += <AztecAddress as Deserialize>::N;\n///\n///         let mut member_fields = [0; <Field as Deserialize>::N];\n///         for i in 0..<Field as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let y = <Field as Deserialize>::deserialize(member_fields);\n///         offset += <Field as Deserialize>::N;\n///\n///         Self { x, y }\n///     }\n/// }\n/// ```\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Deserialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_deserialize_clause = get_where_trait_clause(s, quote {Deserialize});\n\n    // The following will give us <type_of_struct_member_1 as Deserialize>::N + <type_of_struct_member_2 as Deserialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Deserialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly deserializing the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // This generates deserialization code for each struct member and concatenates them together.\n        let deserialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as Deserialize>::N];\n                    for i in 0..<$param_type as Deserialize>::N {\n                        member_fields[i] = serialized[i + offset];\n                    }\n                    let $param_name = <$param_type as Deserialize>::deserialize(member_fields);\n                    offset += <$param_type as Deserialize>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        // This will give us e.g. `a, b, c` for a struct with three fields named `a`, `b`, and `c`.\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n\n            $deserialization_of_struct_members\n\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Deserialize::deserialize(serialized) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Deserialize for $typ\n            $where_deserialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn deserialize(serialized: [Field; Self::N]) -> Self {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Packable` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Packable` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Packable for MyStruct {\n///     let N: u32 = 2;\n///\n///     fn pack(self) -> [Field; 2] {\n///         let mut result: [Field; 2] = [0_Field; 2];\n///         let mut offset: u32 = 0_u32;\n///         let packed_member: [Field; 1] = self.x.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         let packed_member: [Field; 1] = self.y.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         result\n///     }\n///\n///     fn unpack(packed: [Field; 2]) -> Self {\n///         let mut offset: u32 = 0_u32;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<AztecAddress as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let x: AztecAddress = <AztecAddress as Packable>::unpack(member_fields);\n///         offset = offset + <AztecAddress as Packable>::N;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<Field as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let y: Field = <Field as Packable>::unpack(member_fields);\n///         offset = offset + <Field as Packable>::N;\n///         Self { x: x, y: y }\n///     }\n/// }\n/// ```\npub comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Packable` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_packable_clause = get_where_trait_clause(s, quote {Packable});\n\n    // The following will give us <type_of_struct_member_1 as Packable>::N + <type_of_struct_member_2 as Packable>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Packable>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the packed member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let pack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate packing code that:\n        // 1. Packs each member\n        // 2. Copies the packed fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let packing_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let packed_member = $crate::traits::Packable::pack(self.$param_name);\n                    let packed_member_len = <$param_type as $crate::traits::Packable>::N;\n                    for i in 0..packed_member_len {\n                        result[i + offset] = packed_member[i];\n                    }\n                    offset += packed_member_len;\n                }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; Self::N];\n            let mut offset = 0;\n\n            $packing_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Packable::pack(self.$param_name)\n        }\n    };\n\n    // For structs containing a single member, we can enhance performance by directly unpacking the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let unpack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate unpacking code that:\n        // 1. Unpacks each member\n        // 2. Copies packed fields into member array at correct offset\n        // 3. Updates offset for next member\n        let unpacking_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as $crate::traits::Packable>::N];\n                    for i in 0..<$param_type as $crate::traits::Packable>::N {\n                        member_fields[i] = packed[i + offset];\n                    }\n                    let $param_name = <$param_type as $crate::traits::Packable>::unpack(member_fields);\n                    offset += <$param_type as $crate::traits::Packable>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n            $unpacking_of_struct_members\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Packable::unpack(packed) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Packable for $typ\n            $where_packable_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn pack(self) -> [Field; Self::N] {\n                $pack_function_body\n            }\n\n            #[inline_always]\n            fn unpack(packed: [Field; Self::N]) -> Self {\n                $unpack_function_body\n            }\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Packable, Serialize};\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct Smol {\n        a: Field,\n        b: Field,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct HasArray {\n        a: [Field; 2],\n        b: bool,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct Fancier {\n        a: Smol,\n        b: [Field; 2],\n        c: [u8; 3],\n        d: str<16>,\n    }\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct HasArrayWithGenerics<T, let N: u32> {\n        pub fields: [T; N],\n        pub length: u32,\n    }\n\n    #[test]\n    fn serde_on_smol() {\n        let smol = Smol { a: 1, b: 2 };\n        let serialized = smol.serialize();\n        assert(serialized == [1, 2], serialized);\n        let deserialized = Smol::deserialize(serialized);\n        assert(deserialized == smol);\n\n        // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n        let packed = smol.pack();\n        assert_eq(packed, serialized, \"Packed does not match serialized\");\n    }\n\n    #[test]\n    fn serde_on_has_array() {\n        let has_array = HasArray { a: [1, 2], b: true };\n        let serialized = has_array.serialize();\n        assert(serialized == [1, 2, 1], serialized);\n        let deserialized = HasArray::deserialize(serialized);\n        assert(deserialized == has_array);\n    }\n\n    #[test]\n    fn serde_on_fancier() {\n        let fancier =\n            Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n        let serialized = fancier.serialize();\n        assert(\n            serialized\n                == [\n                    1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                    0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n                ],\n            serialized,\n        );\n        let deserialized = Fancier::deserialize(serialized);\n        assert(deserialized == fancier);\n    }\n\n    #[test]\n    fn serde_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let serialized = struct_with_array_of_generics.serialize();\n        assert(serialized == [1, 2, 3, 3], serialized);\n        let deserialized = HasArrayWithGenerics::deserialize(serialized);\n        assert(deserialized == struct_with_array_of_generics);\n    }\n\n    #[test]\n    fn packable_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let packed = struct_with_array_of_generics.pack();\n        assert(packed == [1, 2, 3, 3], packed);\n\n        let unpacked = HasArrayWithGenerics::unpack(packed);\n        assert(unpacked == struct_with_array_of_generics);\n    }\n\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"335":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl Serialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn serialize(self: Self) -> [Field; Self::N] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn deserialize(serialized: [Field; Self::N]) -> Self {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n\n// TODO(#11356): use compact representation here.\nimpl Packable for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn pack(self) -> [Field; Self::N] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; Self::N]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"336":{"source":"use crate::constants::TWO_POW_64;\nuse crate::traits::{Deserialize, Serialize};\nuse std::meta::derive;\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"343":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::{default::Default, meta::derive};\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nmod test {\n    use crate::{\n        point::POINT_LENGTH,\n        public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n        traits::{Deserialize, Serialize},\n    };\n    use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\n    #[test]\n    unconstrained fn compute_public_keys_hash() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        let actual = keys.hash();\n        let expected_public_keys_hash =\n            0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n        assert(actual.to_field() == expected_public_keys_hash);\n    }\n\n    #[test]\n    unconstrained fn compute_default_hash() {\n        let keys = PublicKeys::default();\n\n        let actual = keys.hash();\n        let test_data_default_hash =\n            0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n        assert(actual.to_field() == test_data_default_hash);\n    }\n\n    #[test]\n    unconstrained fn serde() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        // We use the PUBLIC_KEYS_LENGTH constant to ensure that there is a match between the derived trait\n        let serialized: [Field; POINT_LENGTH * 4] = keys.serialize();\n        let deserialized = PublicKeys::deserialize(serialized);\n\n        assert_eq(keys, deserialized);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"345":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"359":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty: Eq {\n    fn empty() -> Self;\n\n    fn is_empty(self) -> bool {\n        self.eq(Self::empty())\n    }\n\n    // Requires this Noir fix: https://github.com/noir-lang/noir/issues/9002\n    // fn assert_not_empty<let U: u32>(self, msg: str<U>) { // This msg version was failing with weird compiler errors.\n    //     // We provide a default impl but it's likely inefficient.\n    //     // The reason we include this function is because there's a lot of\n    //     // opportunity for optimisation on a per-struct basis.\n    //     // You only need to show one element is not empty to know that the whole thing\n    //     // is not empty.\n    //     // If you know an element of your struct which should always be nonempty,\n    //     // you can write an impl that solely checks that that element is nonempty.\n    //     assert(!self.is_empty(), msg);\n    // }\n\n    // This default impl is overwritten by types like arrays, because there's a much\n    // more efficient approach.\n    fn assert_empty<let S: u32>(self, msg: str<S>) {\n        assert(self.is_empty(), msg);\n    }\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u16 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\n\nimpl<T> Empty for [T]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty()]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\nimpl<A, B> Empty for (A, B)\nwhere\n    A: Empty,\n    B: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        (A::empty(), B::empty())\n    }\n}\n\nimpl<T> Empty for Option<T>\nwhere\n    T: Eq,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\n// pub fn is_empty<T>(item: T) -> bool\n// where\n//     T: Empty,\n// {\n//     item.eq(T::empty())\n// }\n\n// pub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\n// where\n//     T: Empty,\n// {\n//     array.all(|elem| is_empty(elem))\n// }\n\n// pub fn assert_empty<T>(item: T) -> ()\n// where\n//     T: Empty,\n// {\n//     assert(item.eq(T::empty()))\n// }\n\n// pub fn assert_empty_array<T, let N: u32>(array: [T; N]) -> ()\n// where\n//     T: Empty,\n// {\n//     // A cheaper option than `is_empty_array` for if you don't need to gracefully\n//     // handle a bool result.\n//     // Avoids the `&` operator of `is_empty_array`'s `.all()` call.\n//     for i in 0..N {\n//         assert(is_empty(array[i]));\n//     }\n// }\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u16 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u16 {\n    fn from_field(value: Field) -> Self {\n        value as u16\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Associated Constants\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize for str<N> {\n///     let N: u32 = N;\n///\n///     fn serialize(self) -> [Field; Self::N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; Self::N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize {\n    let N: u32;\n\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let M: u32> Serialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; Self::N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n/// Implementation of Deserialize for BoundedVec.\n///\n/// This implementation deserializes a BoundedVec from an array of Fields. The array contains:\n/// 1. The serialized items, each taking up T::N Fields\n/// 2. The length of the BoundedVec as the last Field\n///\n/// # Type Parameters\n/// * `T` - The type of items stored in the BoundedVec, must implement Deserialize\n/// * `M` - The maximum length of the BoundedVec\n///\n/// # Fields Array Layout\n/// [item1_field1, item1_field2, ..., item2_field1, item2_field2, ..., length]\n/// Where:\n/// - itemN_fieldM: The M-th Field of the N-th item (T::N Fields per item)\n/// - length: The number of items in the BoundedVec (1 Field)\n///\n/// Total length N = T::N * M + 1, where:\n/// - T::N is the number of Fields needed to deserialize one item\n/// - M is the maximum length of the BoundedVec\n/// - +1 is for storing the length\n///\n/// # Note\n/// Not deriving this because it's not supported to call derive_deserialize on a \"remote\" struct (and it will never\n/// be supported).\nimpl<T, let M: u32> Deserialize for BoundedVec<T, M>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[<T as Deserialize>::N * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; <T as Deserialize>::N];\n            for j in 0..<T as Deserialize>::N {\n                nested_fields[j] = fields[i * <T as Deserialize>::N + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl Deserialize for () {\n    let N: u32 = 0;\n\n    fn deserialize(_fields: [Field; Self::N]) -> Self {\n        ()\n    }\n}\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl<T, let M: u32> Serialize for BoundedVec<T, M>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M + 1; // +1 for the length of the BoundedVec\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut fields = [0; Self::N];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..<T as Serialize>::N {\n                fields[i * <T as Serialize>::N + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[<T as Serialize>::N * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Associated Constants\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let M: u32> Deserialize for str<M> {\n///     let N: u32 = M;\n///\n///     #[inline_always]\n///     fn deserialize(fields: [Field; Self::N]) -> Self {\n///         str::<Self::N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize {\n    let N: u32;\n\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let M: u32> Deserialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        str::<Self::N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Associated Constants\n/// * `N` - The length of the Field array, known at compile time\n#[derive_via(derive_packable)]\npub trait Packable {\n    let N: u32;\n\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"361":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable for bool {\n    let N: u32 = BOOL_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable for u8 {\n    let N: u32 = U8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable for u16 {\n    let N: u32 = U16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable for u32 {\n    let N: u32 = U32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable for u64 {\n    let N: u32 = U64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable for u128 {\n    let N: u32 = U128_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable for Field {\n    let N: u32 = FIELD_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable for i8 {\n    let N: u32 = I8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable for i16 {\n    let N: u32 = I16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable for i32 {\n    let N: u32 = I32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable for i64 {\n    let N: u32 = I64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Packable for [T; M]\nwhere\n    T: Packable,\n{\n    let N: u32 = M * <T as Packable>::N;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized = self[i].pack();\n            for j in 0..<T as Packable>::N {\n                result[i * <T as Packable>::N + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Packable>::N, M>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"362":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self]\n    }\n}\n\nimpl Deserialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Serialize for [T; M]\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; _] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized_t = self[i].serialize();\n            for j in 0..<T as Serialize>::N {\n                result[i * <T as Serialize>::N + j] = serialized_t[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let M: u32> Deserialize for [T; M]\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Deserialize>::N, M>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T> Serialize for Option<T>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N + 1;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..<T as Serialize>::N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T> Deserialize for Option<T>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        if fields[0] == 1 {\n            let mut value_fields = [0; <T as Deserialize>::N];\n            for i in 0..<T as Deserialize>::N {\n                value_fields[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_fields))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"379":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO: This currently only exists to aid point compression in compress_to_blob_commitment().\n// Once compression is part of BigCurve it can either be removed or optimized to be used elsewhere.\npub fn byte_to_bits_be(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[7 - i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"393":{"source":"use aztec::{\n    context::{PrivateContext, UtilityContext},\n    messages::message_delivery::MessageDelivery,\n    note::note_getter_options::NoteGetterOptions,\n    protocol_types::address::AztecAddress,\n    state_vars::{PrivateSet, storage::HasStorageSlot},\n};\nuse value_note::{balance_utils, filter::filter_notes_min_sum, value_note::ValueNote};\n\n/// @deprecated (soon) (https://github.com/AztecProtocol/aztec-packages/issues/15959) because:\n/// - Its functionality is a subset of `BalanceSet`\n/// - The \"Easy\" naming has been criticized.\n/// - It is not a wrapper around a Uint; bur rather around a Field.\n/// - It's weird to have a state variable be defined at the top-level of aztecnr,\n///   whilst all other state variables are defined _within_ aztecnr.\n///\n/// An example private state variable, representing a `Field` that can be:\n/// - Incremented by anyone\n/// - Decremented by the owner of the private state.\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n}\n\n// TODO(#13824): remove this impl once we allow structs to hold state variables.\nimpl<Context> HasStorageSlot<1> for EasyPrivateUint<Context> {\n    fn get_storage_slot(self) -> Field {\n        self.set.get_storage_slot()\n    }\n}\n\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        EasyPrivateUint { context, set: PrivateSet::new(context, storage_slot) }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(self.context, owner, MessageDelivery.CONSTRAINED_ONCHAIN);\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(self.context, owner, MessageDelivery.CONSTRAINED_ONCHAIN);\n    }\n}\n\nimpl EasyPrivateUint<UtilityContext> {\n    pub unconstrained fn get_value(self) -> Field {\n        balance_utils::get_balance(self.set)\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"395":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UtilityContext, note::note_viewer_options::NoteViewerOptions, state_vars::PrivateSet,\n};\n\n// DEPRECATED: Having this functionality in the value note package is incorrect and will be removed in the future.\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UtilityContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\n// DEPRECATED: Having this functionality in the value note package is incorrect and will be removed in the future.\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UtilityContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"396":{"source":"use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\n// DEPRECATED: Having this functionality in the value note package is incorrect and will be removed in the future.\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/value-note/src/filter.nr"},"398":{"source":"use aztec::{\n    macros::notes::note,\n    oracle::random::random,\n    protocol_types::{address::AztecAddress, traits::Packable},\n};\n\n// docs:start:value-note-def\n#[derive(Eq, Packable)]\n#[note]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n","path":"/Users/jli/nargo/github.com/aztecprotocol/aztec-packages/v3.0.0-nightly.20250922/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}